"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5575],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var d=t(96540);const r={},o=d.createContext(r);function l(e){const n=d.useContext(o);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),d.createElement(o.Provider,{value:n},e.children)}},92244:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"Leetcode/Other/110.110 - Balanced Binary Tree - Easy","title":"110.110 - Balanced Binary Tree - Easy","description":"Solution:","source":"@site/docs/Leetcode/99.Other/110.110 - Balanced Binary Tree - Easy.md","sourceDirName":"Leetcode/99.Other","slug":"/p/8ed98e67-783d-4f12-8b7b-b6b88dd4bf9c","permalink":"/notes/docs/p/8ed98e67-783d-4f12-8b7b-b6b88dd4bf9c","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/110.110 - Balanced Binary Tree - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/8ed98e67-783d-4f12-8b7b-b6b88dd4bf9c","slug":"/p/8ed98e67-783d-4f12-8b7b-b6b88dd4bf9c"},"sidebar":"tutorialSidebar","previous":{"title":"1091.1091 - Shortest Path in Binary Matrix - Medium","permalink":"/notes/docs/p/0f4bd939-f365-413d-9861-887f4c13494d"},"next":{"title":"1102.1102 - Path With Maximum Minimum Value - Medium","permalink":"/notes/docs/p/f257aeda-dd22-4db8-bf1d-5d541d818d7a"}}');var r=t(74848),o=t(28453);const l={created_at:"2025-10-23",page_link:"/p/8ed98e67-783d-4f12-8b7b-b6b88dd4bf9c",slug:"/p/8ed98e67-783d-4f12-8b7b-b6b88dd4bf9c"},s=void 0,i={},a=[{value:"Solution:",id:"solution",level:2},{value:"\u7b2c\u4e00\u6b65\uff1a\u8ba1\u7b97\u5b50\u6811\u9ad8\u5ea6",id:"\u7b2c\u4e00\u6b65\u8ba1\u7b97\u5b50\u6811\u9ad8\u5ea6",level:3},{value:"full code:",id:"full-code",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002\n\n\u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a\n\n\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9\xa0\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002\n\n\u793a\u4f8b 1:\n\n\u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7]\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\u8fd4\u56de true \u3002\n\n\u793a\u4f8b 2:\n\n\u7ed9\u5b9a\u4e8c\u53c9\u6811 [1,2,2,3,3,null,null,4,4]\n\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n\u8fd4\u56de\xa0false\n"})}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution:"}),"\n",(0,r.jsx)(n.p,{children:"\u7531\u4e8e\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\u5c31\u662f**\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002**\u7528\u4f2a\u4ee3\u7801\u63cf\u8ff0\u5c31\u662f\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"if abs(\u9ad8\u5ea6(root.left) - \u9ad8\u5ea6(root.right)) <= 1 and \n        root.left \u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811 and root.right \u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811:\n    print('\u662f\u5e73\u8861\u4e8c\u53c9\u6811')\nelse:\n    print('\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\u7b2c\u4e00\u6b65\u8ba1\u7b97\u5b50\u6811\u9ad8\u5ea6",children:"\u7b2c\u4e00\u6b65\uff1a\u8ba1\u7b97\u5b50\u6811\u9ad8\u5ea6"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def dfs(node, depth):\n    if not node: return 0\n    l = dfs(node.left, depth + 1)\n    r = dfs(node.right, depth + 1)\n    return max(l, r) + 1\n"})}),"\n",(0,r.jsx)(n.h3,{id:"full-code",children:"full code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        def dfs(node, depth):\n            if not node: return 0\n            l = dfs(node.left, depth + 1)\n            r = dfs(node.right, depth + 1)\n            return max(l, r)  + 1\n        if not root: return True\n        if abs(dfs(root.left, 0) -  dfs(root.right, 0)) > 1: return False\n        return self.isBalanced(root.left) and self.isBalanced(root.right)\n"})})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);