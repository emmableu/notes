"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6915],{28453:(t,e,n)=>{n.d(e,{R:()=>d,x:()=>o});var r=n(96540);const i={},s=r.createContext(i);function d(t){const e=r.useContext(s);return r.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:d(t.components),r.createElement(s.Provider,{value:e},t.children)}},51849:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Leetcode/DFS/425.425 - Word Squares - Hard","title":"425.425 - Word Squares - Hard","description":"tags: [Array, String, Backtracking, Trie]","source":"@site/docs/Leetcode/04.DFS/425.425 - Word Squares - Hard.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/f578589b-3465-4827-9da1-666fcec22135","permalink":"/notes/docs/p/f578589b-3465-4827-9da1-666fcec22135","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/425.425 - Word Squares - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/f578589b-3465-4827-9da1-666fcec22135","slug":"/p/f578589b-3465-4827-9da1-666fcec22135"},"sidebar":"tutorialSidebar","previous":{"title":"416.416 - Partition Equal Subset Sum (Medium)","permalink":"/notes/docs/p/d4b1742a-b67c-4693-a34d-f0e40b0060c2"},"next":{"title":"428.428 - Serialize and Deserialize N-ary Tree - Hard","permalink":"/notes/docs/p/5fb4c94a-dbcc-4cc2-8a67-9712528fecce"}}');var i=n(74848),s=n(28453);const d={created_at:"2025-10-23",page_link:"/p/f578589b-3465-4827-9da1-666fcec22135",slug:"/p/f578589b-3465-4827-9da1-666fcec22135"},o=void 0,l={},a=[{value:"Solution 1 \uff08TLE)",id:"solution-1-tle",level:2},{value:"Good Solution \uff08\u4f18\u5316\uff09",id:"good-solution-\u4f18\u5316",level:2}];function c(t){const e={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"tags: [Array, String, Backtracking, Trie]"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/word-squares/",children:"LC Link"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208151733682.png",alt:""})}),"\n",(0,i.jsx)(e.p,{children:"\u7528 (Trie + DFS) \u505a"}),"\n",(0,i.jsx)(e.p,{children:"api:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:">>> a = 'abc'\n>>> list(a)\n['a', 'b', 'c']\n"})}),"\n",(0,i.jsx)(e.h2,{id:"solution-1-tle",children:"Solution 1 \uff08TLE)"}),"\n",(0,i.jsx)(e.p,{children:"(by myself, \u6b63\u786e\u4f46\u662f TLE)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import copy\nclass TrieNode:\n\tdef __init__(self):\n\t\t# \u672c\u9898\u4e0d\u9700\u8981 is_end, \u56e0\u4e3a\u6700\u540e\u4e00\u5b9a\u4f1a\u627e\u6ee14\u4e2a\u3002\n\t\tself.children = {}\n\nclass TrieMap:\n\tdef __init__(self):\n\t\tself.root = TrieNode()\n\n\tdef put(self, word):\n\t\tp = self.root\n\t\tfor c in word:\n\t\t\tif not p.children.get(c):\n\t\t\t\tp.children[c] = TrieNode()\n\t\t\tp = p.children[c]\n\nclass Solution:\n\tdef wordSquares(self, words: List[str]) -> List[List[str]]:\n\t\ttrie_map = TrieMap()\n\t\tword_size = len(words[0])\n\t\tfor word in words:\n\t\t\ttrie_map.put(word)\n\t\tp_list = [trie_map.root for _ in range(word_size)]\n\t\tres = []\n\t\tself.dfs([], res, words, p_list, trie_map, word_size)\n\t\treturn res\n\t\t\t\n\tdef dfs(self, path, res, words, p_list, trie_map, word_size):\n\t\tif len(path) == word_size:\n\t\t\tres.append(copy.deepcopy(path))\n\t\t\treturn\n\n\t\tfor cur in range(len(words)):\n\t\t\tcan_add = True\n\t\t\tfor i, p in enumerate(p_list):\n\t\t\t\tc = words[cur][i]\n\t\t\t\tif i < len(path) and c != path[i][len(path)]:\n\t\t\t\t\tcan_add = False\n\t\t\t\t\tbreak\n\t\t\t\tif not p.children.get(c):\n\t\t\t\t\tcan_add = False\n\t\t\t\t\tbreak\n\t\t\tif can_add:\n\t\t\t\tpath.append(words[cur])\n\t\t\t\tself.dfs(path, res, words, \\\n\t\t\t\t\t\t[p.children[words[cur][i]] for i, p in enumerate(p_list)], \\\n\t\t\t\t\t\ttrie_map, word_size)\n\t\t\t\tpath.pop()\n"})}),"\n",(0,i.jsx)(e.h2,{id:"good-solution-\u4f18\u5316",children:"Good Solution \uff08\u4f18\u5316\uff09"}),"\n",(0,i.jsx)(e.p,{children:"\u7528 get_words_with_prefix \u6765\u4f18\u5316"}),"\n",(0,i.jsx)(e.p,{children:"\u524d\u63d0\u662f\u8981\u66f4\u65b0trie\u7684\u7ed3\u6784\uff1a"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u6bcf\u4e00\u4e2anode\u7528\u4e00\u4e2anode.val \u6765\u8868\u793a\u5f53\u524d\u7684node\u5bf9\u5e94\u6709\u51e0\u4e2aindex"}),"\n",(0,i.jsx)(e.li,{children:"\u8fd9\u6837\u7684\u8bdd\u6bcf\u6b21 get_words_with_prefix \u5c31\u53ea\u8981\u627e\u5230\u5bf9\u5e94\u7684prefix\u7684index \u7684lst\u5c31\u597d\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u8fd9\u4e2a\u60f3\u6cd5\u3002\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5217\u8868 [ball, able, area, lead, lady]\uff0c\u6211\u4eec\u5c1d\u8bd5\u5c06\u56db\u4e2a\u5355\u8bcd\u653e\u5728\u4e00\u8d77\u6784\u5efa\u5355\u8bcd\u65b9\u5757\u3002"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"\u8ba9\u6211\u4eec\u4ece\u5355\u8bcd ball \u5f00\u59cb\uff0c\u4f5c\u4e3a\u5355\u8bcd\u65b9\u5757\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5c06\u653e\u5230\u7b2c\u4e00\u884c\u7684\u5355\u8bcd\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u7136\u540e\u6211\u4eec\u8f6c\u5230\u7b2c\u4e8c\u884c\u3002\u8003\u8651\u5230\u5355\u8bcd\u65b9\u5757\u7684\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u73b0\u5728\u77e5\u9053\u5e94\u8be5\u586b\u5145\u5728\u7b2c\u4e8c\u884c\u7b2c\u4e00\u5217\u7684\u5b57\u6bcd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u77e5\u9053\u7b2c\u4e8c\u884c\u7684\u5355\u8bcd\u5e94\u8be5\u4ee5 a \u524d\u7f00\u5f00\u5934\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u5728\u5355\u8bcd\u5217\u8868\u4e2d\uff0c\u6709\u4e24\u4e2a\u524d\u7f00\u4e3a a \u7684\u5355\u8bcd\uff08\u5373 able\uff0carea\uff09\u3002\u8fd9\u4e24\u4e2a\u5355\u8bcd\u90fd\u53ef\u80fd\u662f\u586b\u5145\u7b2c\u4e8c\u884c\u5355\u8bcd\u7684\u5019\u9009\u3002\u4e0b\u4e00\u6b65\u6211\u4eec\u5bf9\u8fd9\u4e24\u4e2a\u5355\u8bcd\u8fdb\u884c\u5c1d\u8bd5\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u7528\u5355\u8bcd able \u586b\u5145\u5728\u7b2c\u4e8c\u884c\u3002\u7136\u540e\u6211\u4eec\u8f6c\u5411\u7b2c\u4e09\u884c\u3002\u540c\u6837\uff0c\u7531\u4e8e\u5bf9\u79f0\u6027\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u7b2c\u4e09\u884c\u4e2d\u7684\u5355\u8bcd\u5e94\u8be5\u4ee5 ll \u5f00\u5934\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5355\u8bcd\u5217\u8868\u4e2d\u6ca1\u6709\u4ee5 ll \u5f00\u5934\u7684\u5355\u8bcd\u3002\u5bfc\u81f4\u6211\u4eec\u4e0d\u80fd\u7ee7\u7eed\u586b\u5145\u5355\u8bcd\u65b9\u5757\u3002\u7136\u540e\uff0c\u653e\u5f03\u4e86\u6b64\u6b21\u5c1d\u8bd5\uff0c\u8fd4\u56de\u5230\u4e0a\u4e00\u4e2a\u72b6\u6001\uff08\u7b2c\u4e00\u884c\u5df2\u586b\u5145\uff09\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u5c1d\u8bd5\u7528\u5355\u8bcd area \u586b\u5145\u7b2c\u4e8c\u884c\u3002\u4e00\u65e6\u6211\u4eec\u586b\u5145\u7b2c\u4e8c\u884c\uff0c\u6211\u4eec\u77e5\u9053\u5728\u4e0b\u4e00\u884c\u4e2d\uff0c\u8981\u586b\u5145\u7684\u5355\u8bcd\u5e94\u8be5\u4ee5\u524d\u7f00 le \u5f00\u5934\u3002\u8fd9\u6b21\u6211\u4eec\u5728\u5355\u8bcd\u5217\u8868\u4e2d\u627e\u5230\u4e86\u8fd9\u6837\u7684\u5355\u8bcd\uff0c\u5373 lead\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u56e0\u6b64\uff0c\u4e0b\u4e00\u6b65\u6211\u4eec\u7528 lead \u8fd9\u4e2a\u5355\u8bcd\u586b\u5145\u7b2c\u4e09\u884c\u3002\u7b49\u7b49\u7b49\u7b49\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u6700\u540e\uff0c\u4ee5\u6bcf\u4e2a\u5355\u8bcd\u4e3a\u8d77\u59cb\u5355\u8bcd\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u90a3\u4e48\u5c06\u5305\u542b\u6240\u6709\u7684\u53ef\u80fd\u6027\u6765\u6784\u9020\u4e00\u4e2a\u6709\u6548\u7684\u5355\u8bcd\u65b9\u5757\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\n        root (node.val = all indexes)\n    \u201ca\u201d /\n     node\n   (node.val = [0, 1, 3])\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import copy\nclass TrieNode:\n\tdef __init__(self, idx_lst = []):\n\t\tself.idx_lst = idx_lst\n\t\tself.children = {}\n\nclass TrieMap:\n\tdef __init__(self, len_words):\n\t\tself.root = TrieNode([i for i in range(len_words)])\n\n\tdef put(self, word, idx):\n\t\tp = self.root\n\t\tfor c in word:\n\t\t\tif not p.children.get(c):\n\t\t\t\tp.children[c] = TrieNode([])\n\t\t\tp = p.children[c]\n\t\t\tp.idx_lst.append(idx)\n\nclass Solution:\n\tdef wordSquares(self, words: List[str]) -> List[List[str]]:\n\t\tlen_words = len(words)\n\t\tword_size = len(words[0])\n\t\ttrie_map = TrieMap(len_words)\n\t\tfor idx, word in enumerate(words):\n\t\t\ttrie_map.put(word, idx)\n\t\tres = []\n\t\tself.dfs([], res, word_size, words, trie_map)\n\t\treturn res\n\n\tdef dfs(self, path, res, word_size, words, trie_map):\n\t\tif len(path) == word_size:\n\t\t\tres.append(copy.deepcopy(path))\n\t\t\treturn\n\t\tprefix = [path[i][len(path)] for i in range(len(path))] \n\t\t# ^ \u5982\u679c path \u662f [], prefix \u81ea\u52a8\u5f97\u5230 []\n\t\t# \u5982\u679cpath \u662f [ball], prefix = ['a']\n\t\t# path = ['ball', 'able'], prefix = ['l', 'l']\n\t\tp = trie_map.root\n\t\tfor pref in prefix:\n\t\t\tp = p.children.get(pref)\n\t\t\tif not p:\n\t\t\t\treturn\n\t\tfor idx in p.idx_lst:\n\t\t\tpath.append(words[idx])\n\t\t\tself.dfs(path, res, word_size, words, trie_map)\n\t\t\tpath.pop()\n"})})]})}function p(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(c,{...t})}):c(t)}}}]);