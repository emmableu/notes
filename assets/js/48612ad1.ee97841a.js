"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[4878],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var r=n(96540);const s={},a=r.createContext(s);function l(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:t},e.children)}},89998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/Line Sweep/759.759 - Employee Free Time - Hard","title":"759.759 - Employee Free Time - Hard","description":"tags: [Array, Sorting, Heap (Priority Queue)]","source":"@site/docs/Leetcode/09.Line Sweep/759.759 - Employee Free Time - Hard.md","sourceDirName":"Leetcode/09.Line Sweep","slug":"/p/b7478b46-546a-41a0-b734-45745ee106c4","permalink":"/notes/docs/p/b7478b46-546a-41a0-b734-45745ee106c4","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/09.Line Sweep/759.759 - Employee Free Time - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/b7478b46-546a-41a0-b734-45745ee106c4","slug":"/p/b7478b46-546a-41a0-b734-45745ee106c4"},"sidebar":"tutorialSidebar","previous":{"title":"56.56 - Merge Intervals - Medium","permalink":"/notes/docs/p/f62e29c8-bf8a-4ca7-ab41-41d464c2ed40"},"next":{"title":"10.Mono Queue","permalink":"/notes/docs/category/10mono-queue"}}');var s=n(74848),a=n(28453);const l={created_at:"2025-10-23",page_link:"/p/b7478b46-546a-41a0-b734-45745ee106c4",slug:"/p/b7478b46-546a-41a0-b734-45745ee106c4"},o=void 0,i={},c=[{value:"O (n log n), not optimal",id:"o-n-log-n-not-optimal",level:2},{value:"O (n log k),  optimal, heapq",id:"o-n-log-k--optimal-heapq",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"tags: [Array, Sorting, Heap (Priority Queue)]"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://leetcode.cn/problems/employee-free-time/",children:"LC Link"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208142304347.png",alt:""}),"\n",(0,s.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202209061518033.png",alt:""})]}),"\n",(0,s.jsx)(t.p,{children:"Key points:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\u672c\u9898\u7c7b\u4f3c\u4e8e:\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/pages/leetcode56",children:"076 - 56 - Merge Intervals"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"it doesn't matter which employee an interval belongs to, so just flatten"}),"\n",(0,s.jsx)(t.li,{children:"can build result array while merging, don't have to do afterward (and don't need full merged arr)"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"o-n-log-n-not-optimal",children:"O (n log n), not optimal"}),"\n",(0,s.jsx)(t.p,{children:"n is the number of intervals across all employees"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"class Solution:\n\tdef employeeFreeTime(self, schedule: '[[Interval]]') -> '[Interval]':\n\t\tflat = sorted([intv for sch in schedule for intv in sch], key = lambda x: x.start)\n\t\tres, prev_end = [], flat[0].end\n\t\tfor sch in flat[1:]:\n\t\t\tif sch.start > prev_end:\n\t\t\t\tres.append(Interval(prev_end, sch.start))\n\t\t\t\tprev_end = sch.end\n\t\t\telse:\n\t\t\t\tprev_end = max(prev_end, sch.end)\n\t\treturn res\n"})}),"\n",(0,s.jsx)(t.h2,{id:"o-n-log-k--optimal-heapq",children:"O (n log k),  optimal, heapq"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"n is the number of intervals across all employees"}),"\n",(0,s.jsx)(t.li,{children:"k is the number of employees"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"\u6ce8\u610fheapq\u4e0d\u662fpush\u4e00\u6574\u4e2aInterval\uff0c\u56e0\u4e3aInterval\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u6bd4\u8f83\uff0c\u800c\u4e14\u53ea\u9700\u8981start\u5c31\u884c\u4e86"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import heapq\nclass Solution:\n\tdef employeeFreeTime(self, schedule: '[[Interval]]') -> '[Interval]':\n\t\tq = []\n\t\tfor i, employee in enumerate(schedule):\n\t\t\theapq.heappush(q, (employee[0].start, i, 0))\n\t\t\t# \u6ce8\u610f\u4e0d\u662fpush\u4e00\u6574\u4e2aInterval\uff0c\u56e0\u4e3aInterval\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u6bd4\u8f83\uff0c\u800c\u4e14\u53ea\u9700\u8981start\u5c31\u884c\u4e86\n\t\tprev_end = -1\n\t\tres = []\n\t\twhile q:\n\t\t\tcur_start, i, j = heapq.heappop(q)\n\t\t\tcur_end = schedule[i][j].end\n\t\t\tif j < len(schedule[i]) - 1:\n\t\t\t\theapq.heappush(q, (schedule[i][j + 1].start, i, j + 1))\n\n\t\t\tif cur_start > prev_end and prev_end != -1:\n\t\t\t\tres.append(Interval(prev_end, cur_start))\t\n\t\t\t\tprev_end = cur_end\n\t\t\telse:\n\t\t\t\tprev_end = max(prev_end, cur_end)\n\t\treturn res\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);