"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5559],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var d=t(96540);const i={},r=d.createContext(i);function o(e){const n=d.useContext(r);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),d.createElement(r.Provider,{value:n},e.children)}},86345:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"Leetcode/Other/199.199 - Binary Tree Right Side View (Medium)","title":"199.199 - Binary Tree Right Side View (Medium)","description":"Description:","source":"@site/docs/Leetcode/99.Other/199.199 - Binary Tree Right Side View (Medium).md","sourceDirName":"Leetcode/99.Other","slug":"/p/df8270cc-21d4-4b55-94ff-cba8f6d36add","permalink":"/notes/docs/p/df8270cc-21d4-4b55-94ff-cba8f6d36add","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/199.199 - Binary Tree Right Side View (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/df8270cc-21d4-4b55-94ff-cba8f6d36add","slug":"/p/df8270cc-21d4-4b55-94ff-cba8f6d36add"},"sidebar":"tutorialSidebar","previous":{"title":"198.198 - House Robber - Medium","permalink":"/notes/docs/p/ac8e7ff7-4599-49b7-93a7-db22293f736c"},"next":{"title":"20.20 - Valid Parentheses - Easy","permalink":"/notes/docs/p/213a82d9-6862-456d-a41f-fc557dbf8f62"}}');var i=t(74848),r=t(28453);const o={created_at:"2025-10-23",page_link:"/p/df8270cc-21d4-4b55-94ff-cba8f6d36add",slug:"/p/df8270cc-21d4-4b55-94ff-cba8f6d36add"},s=void 0,l={},c=[{value:"Description:",id:"description",level:2},{value:"\u6b63\u786e\u65b9\u6cd5:",id:"\u6b63\u786e\u65b9\u6cd5",level:2}];function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,i.jsx)(n.p,{children:"Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Example 1:\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\nExample 2:\nInput: root = [1,null,3]\nOutput: [1,3]\nExample 3:\nInput: root = []\nOutput: []\n"})}),"\n",(0,i.jsx)(n.p,{children:"Constraints:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The number of nodes in the tree is in the range [0, 100]."}),"\n",(0,i.jsx)(n.li,{children:"-100 <= Node.val <= 100"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u6b63\u786e\u65b9\u6cd5",children:"\u6b63\u786e\u65b9\u6cd5:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"level order traversal."}),"\n",(0,i.jsxs)(n.li,{children:["\u6bcf\u4e00\u4e2a",(0,i.jsx)(n.code,{children:"level"}),"\u505a",(0,i.jsx)(n.code,{children:"popleft"}),"\uff0c\u53d6val\uff0c\u5b58\u5f53\u524dlevel \u7684\u6700\u540e\u4e00\u4e2a val"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution(object):\n    def rightSideView(self, root):\n        q = collections.deque()\n        if root:\n            q.append(root)\n        res = []\n        while q:\n            size, val = len(q), 0\n            for _ in range(size):\n                node = q.popleft()\n                val = node.val # store last value in each level\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(val)\n        return res\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);