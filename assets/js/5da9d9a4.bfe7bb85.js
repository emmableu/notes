"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6060],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(96540);const a={},c=s.createContext(a);function o(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(c.Provider,{value:n},e.children)}},90458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"Leetcode/Stack/1047.1047 - Remove All Adjacent Duplicates In String - Easy","title":"1047.1047 - Remove All Adjacent Duplicates In String - Easy","description":"\u540c\u540d\u9898 1029","source":"@site/docs/Leetcode/16.Stack/1047.1047 - Remove All Adjacent Duplicates In String - Easy.md","sourceDirName":"Leetcode/16.Stack","slug":"/p/e358576b-2c22-4f75-9eab-d951d89709c6","permalink":"/notes/docs/p/e358576b-2c22-4f75-9eab-d951d89709c6","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/16.Stack/1047.1047 - Remove All Adjacent Duplicates In String - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/e358576b-2c22-4f75-9eab-d951d89709c6","slug":"/p/e358576b-2c22-4f75-9eab-d951d89709c6"},"sidebar":"tutorialSidebar","previous":{"title":"\u5355\u8c03\u6808 Monotonic Stack \u6a21\u7248","permalink":"/notes/docs/p/dd3cc125-b0bd-4215-99d9-fb2084f514e0"},"next":{"title":"1209.1209 - Remove All Adjacent Duplicates in String II (Medium)","permalink":"/notes/docs/p/8b991ebd-4065-4c3c-aee0-a51d4adb0182"}}');var a=t(74848),c=t(28453);const o={created_at:"2025-10-23",page_link:"/p/e358576b-2c22-4f75-9eab-d951d89709c6",slug:"/p/e358576b-2c22-4f75-9eab-d951d89709c6"},i=void 0,l={},r=[{value:"\u540c\u540d\u9898 1029",id:"\u540c\u540d\u9898-1029",level:2},{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\u540c\u540d\u9898-1029",children:"\u540c\u540d\u9898 1029"}),"\n",(0,a.jsx)(n.p,{children:"\u672c\u9898\uff1a remove \u4e24\u4e2a\uff0c 1029: remove k\u4e2a\u3002"}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them."}),"\n",(0,a.jsx)(n.p,{children:"We repeatedly make duplicate removals on s until we no longer can."}),"\n",(0,a.jsx)(n.p,{children:"Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'Input: s = "abbaca"\nOutput: "ca"\nExplanation: \nFor example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".\n'})}),"\n",(0,a.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def removeDuplicates(self, s):\n        stk = []\n        for char in s:\n            if stk and char == stk[-1]:\n                stk.pop()\n            else:\n                stk.append(char)\n        return "".join(stk)\n'})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);