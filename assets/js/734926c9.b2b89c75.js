"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7576],{28453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>c});var l=s(96540);const i={},t=l.createContext(i);function r(n){const e=l.useContext(t);return l.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),l.createElement(t.Provider,{value:e},n.children)}},64166:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>o,frontMatter:()=>r,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"Leetcode/Other/15.15 - 3Sum - Medium","title":"15.15 - 3Sum - Medium","description":"duplicate \u5904\u7406\u9700\u8981\u91cd\u505a\u4e00\u904d","source":"@site/docs/Leetcode/99.Other/15.15 - 3Sum - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/608a6c25-0d17-4a49-b1c1-568cd998c156","permalink":"/notes/docs/p/608a6c25-0d17-4a49-b1c1-568cd998c156","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/15.15 - 3Sum - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/608a6c25-0d17-4a49-b1c1-568cd998c156","slug":"/p/608a6c25-0d17-4a49-b1c1-568cd998c156"},"sidebar":"tutorialSidebar","previous":{"title":"1460.1460 - Make Two Arrays Equal by Reversing Sub-arrays (Easy)","permalink":"/notes/docs/p/66bd7780-8a5b-4252-a478-77fc3ab88317"},"next":{"title":"150.150 - Evaluate Reverse Polish Notation - Medium","permalink":"/notes/docs/p/cc751a01-78b0-44ec-be16-5e90bfbe7d2b"}}');var i=s(74848),t=s(28453);const r={created_at:"2025-10-23",page_link:"/p/608a6c25-0d17-4a49-b1c1-568cd998c156",slug:"/p/608a6c25-0d17-4a49-b1c1-568cd998c156"},c=void 0,u={},d=[{value:"duplicate \u5904\u7406\u9700\u8981\u91cd\u505a\u4e00\u904d",id:"duplicate-\u5904\u7406\u9700\u8981\u91cd\u505a\u4e00\u904d",level:2},{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2},{value:"\u65e0\u4efb\u4f55duplicate\u5904\u7406\u7684\u57fa\u672csolution \uff08\u5f97\u5230\u7684\u7ed3\u679c\u5176\u5b9e\u662f\u6709duplicate\u7684\uff09",id:"\u65e0\u4efb\u4f55duplicate\u5904\u7406\u7684\u57fa\u672csolution-\u5f97\u5230\u7684\u7ed3\u679c\u5176\u5b9e\u662f\u6709duplicate\u7684",level:3},{value:"duplicate \u5904\u7406\uff1a",id:"duplicate-\u5904\u7406",level:3}];function a(n){const e={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"duplicate-\u5904\u7406\u9700\u8981\u91cd\u505a\u4e00\u904d",children:"duplicate \u5904\u7406\u9700\u8981\u91cd\u505a\u4e00\u904d"}),"\n",(0,i.jsx)(e.h2,{id:"description",children:"Description:"}),"\n",(0,i.jsx)(e.p,{children:"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0."}),"\n",(0,i.jsx)(e.p,{children:"Notice that the solution set must not contain duplicate triplets."}),"\n",(0,i.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\u8f93\u5165\uff1anums = [-1,2,1,-4], target = 1\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u4e0e target \u6700\u63a5\u8fd1\u7684\u548c\u662f 2 (-1 + 2 + 1 = 2) \u3002\n"})}),"\n",(0,i.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(e.h3,{id:"\u65e0\u4efb\u4f55duplicate\u5904\u7406\u7684\u57fa\u672csolution-\u5f97\u5230\u7684\u7ed3\u679c\u5176\u5b9e\u662f\u6709duplicate\u7684",children:"\u65e0\u4efb\u4f55duplicate\u5904\u7406\u7684\u57fa\u672csolution \uff08\u5f97\u5230\u7684\u7ed3\u679c\u5176\u5b9e\u662f\u6709duplicate\u7684\uff09"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def threeSum(self, nums):\n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1; r -= 1\n                elif s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n        return res\n"})}),"\n",(0,i.jsx)(e.h3,{id:"duplicate-\u5904\u7406",children:"duplicate \u5904\u7406\uff1a"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"\u5f53\u786e\u5b9ai\u7684\u65f6\u5019\uff0c \u5982\u679c\u5f53\u524di\u548c\u524d\u4e00\u4e2a\u4e00\u6837\uff0c\u8df3\u8fc7\u5f53\u524di"}),"\n",(0,i.jsx)(e.li,{children:"l \u548c r: \u5728l/r\u8981\u8d70\u7684\u65f6\u5019\uff0c\u770b\u4e00\u4e0b\u4e0b\u4e00\u4e2a\u548c\u8fd9\u4e2a\u662f\u4e0d\u662f\u4e00\u6837\uff0c\u662f\u7684\u7684\u8bdd\u5c31\u76f4\u63a5\u8fc7\u53bb\uff0c \u524d\u63d0\u662fl\u548cr\u4e0d\u80fd\u76f8\u7b49 \uff08\u56e0\u4e3a\u6211\u4eec\u8981\u4fdd\u7559 \u3010 -2\uff0c 1\uff0c1 \u3011\u8fd9\u6837\u7684\u7ed3\u679c\uff09\u3002"}),"\n"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u8003\u8651 [-8, 4, 4, 9] \u4e2d 4\u4f1a\u4e0d\u4f1a\u88abl \u8df3\u8fc7\uff1a\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u56e0\u4e3a\u5982\u679c\u76ee\u6807\u662f[-8,4,4]\u90a3\u4e48\u5b83\u7684\u524d\u4e00\u4e2a\u662f[-8, 4, 9], \u7136\u540e\u548c\u592a\u5927\u4e86\uff0c\u4f46\u662f\u5728 ",(0,i.jsx)(e.code,{children:"while l < r and nums[r] == nums[r-1]"}),"\u8fd9\u4e2a\u6761\u4ef6\u5e76\u4e0d\u6ee1\u8db3\uff08\u56e0\u4e3a9\u548c4\u5e76\u4e0d\u76f8\u7b49\uff0c\u6240\u4ee5right pointer r\u76f4\u63a5\u505c\u5728\u4e864\u4e0a\u3002\uff09"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsx)(e.li,{children:"\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u5982\u679cnums[0] > 0: \u76f4\u63a5return false\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def threeSum(self, nums):\n        def increment_l():\n            nonlocal l, r, nums\n            while l < r and nums[l] == nums[l+1]:\n                l += 1\n            l += 1\n            \n        def decrement_r():\n            nonlocal l, r, nums\n            while l < r and nums[r] == nums[r-1]:\n                r -= 1\n            r -= 1\n            \n        nums.sort()\n        if len(nums) < 3 or nums[0] > 0:\n            return []\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    increment_l()\n                    decrement_r()\n\n                elif s < 0:\n                    increment_l()\n                    \n                elif s > 0:\n                    decrement_r()\n        return res \n"})})]})}function o(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(a,{...n})}):a(n)}}}]);