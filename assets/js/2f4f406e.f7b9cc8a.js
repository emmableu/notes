"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6510],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}},94907:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Leetcode/Other/270.270 - Closest Binary Search Tree Value (Easy)","title":"270.270 - Closest Binary Search Tree Value (Easy)","description":"Description:","source":"@site/docs/Leetcode/99.Other/270.270 - Closest Binary Search Tree Value (Easy).md","sourceDirName":"Leetcode/99.Other","slug":"/p/bfbe4655-bc9d-4180-8c1a-6af13711e128","permalink":"/notes/docs/p/bfbe4655-bc9d-4180-8c1a-6af13711e128","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/270.270 - Closest Binary Search Tree Value (Easy).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/bfbe4655-bc9d-4180-8c1a-6af13711e128","slug":"/p/bfbe4655-bc9d-4180-8c1a-6af13711e128"},"sidebar":"tutorialSidebar","previous":{"title":"269.269 - Alien Dictionary - Hard","permalink":"/notes/docs/p/38b9d851-99e1-45dd-9031-84415fa1b8d3"},"next":{"title":"271.271 - Encode and Decode Strings (Medium)","permalink":"/notes/docs/p/f80e88f0-39b5-4dcf-bc9d-2c359ac3a670"}}');var r=t(74848),i=t(28453);const s={created_at:"2025-10-23",page_link:"/p/bfbe4655-bc9d-4180-8c1a-6af13711e128",slug:"/p/bfbe4655-bc9d-4180-8c1a-6af13711e128"},a=void 0,l={},c=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Constraints:",id:"constraints",level:2},{value:"solution (O (log n) time complexity)",id:"solution-o-log-n-time-complexity",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,r.jsx)(n.p,{children:"Given the root of a binary search tree and a target value, return the value in the BST that is closest to the target."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"4\n    - 2\n        - 1\n        - 3\n    - 5\nInput: root = [4,2,5,1,3], target = 3.714286\nOutput: 4\n"})}),"\n",(0,r.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The number of nodes in the tree is in the range [1, 104]."}),"\n",(0,r.jsx)(n.li,{children:"0 <= Node.val <= 109"}),"\n",(0,r.jsx)(n.li,{children:"-109 <= target <= 109"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solution-o-log-n-time-complexity",children:"solution (O (log n) time complexity)"}),"\n",(0,r.jsxs)(n.p,{children:["\u5229\u7528bst\u7684\u5b9a\u4e49, \u904d\u5386bst\uff0c\u5982\u679c\u5f53\u524dval\u6bd4target\u5c0f\u5c31\u5f80\u53f3\u8d70\uff0c\u53cd\u4e4b\u5f80\u5de6\u8d70\u3002",(0,r.jsx)(n.br,{}),"\nglobally \u7528\u4e00\u4e2a ",(0,r.jsx)(n.code,{children:"min_tuple"})," \u8bb0\u5f55\u4e00\u4e2a\u5f53\u524d\u7684 (abs(diff), node.val),\u7136\u540e\u6bcf\u904d\u5386\u5230\u4e00\u4e2a\u65b0\u7684node, \u5982\u679c\u8fd9\u4e2a\u65b0\u7684node \u7684 abs(diff) \u66f4\u5c0f\uff0c \u5c31\u66f4\u65b0\u8fd9\u4e2a ",(0,r.jsx)(n.code,{children:"min_tuple"}),",",(0,r.jsx)(n.br,{}),"\n\u6700\u540e\u8fd4\u56de ",(0,r.jsx)(n.code,{children:"min_tuple[1]"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def closestValue(self, root, target):\n        node = root\n        min_tuple = (float("inf"), None)\n        while node:\n            val = node.val\n            min_tuple = min(min_tuple, (abs(val-target), val))\n            if val == target:\n                return val\n            if val < target:\n                node = node.right\n            elif val > target:\n                node = node.left\n        return min_tuple[1]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);