"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3729],{28453:(e,n,d)=>{d.d(n,{R:()=>i,x:()=>o});var r=d(96540);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},60052:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/DFS/140.140 - Word Break II - Hard","title":"140.140 - Word Break II - Hard","description":"Description:","source":"@site/docs/Leetcode/04.DFS/140.140 - Word Break II - Hard.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/8b7ae095-02d9-4646-9cae-8a58b9ddd4a1","permalink":"/notes/docs/p/8b7ae095-02d9-4646-9cae-8a58b9ddd4a1","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/140.140 - Word Break II - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/8b7ae095-02d9-4646-9cae-8a58b9ddd4a1","slug":"/p/8b7ae095-02d9-4646-9cae-8a58b9ddd4a1"},"sidebar":"tutorialSidebar","previous":{"title":"139.139 - Word Break - Medium","permalink":"/notes/docs/p/31df1555-fac7-4d51-9421-be815e50d2bf"},"next":{"title":"1820.1820 - Maximum Number of Accepted Invitations - Medium","permalink":"/notes/docs/p/aa909471-863b-4874-b26a-e2b254699551"}}');var a=d(74848),t=d(28453);const i={created_at:"2025-10-23",page_link:"/p/8b7ae095-02d9-4646-9cae-8a58b9ddd4a1",slug:"/p/8b7ae095-02d9-4646-9cae-8a58b9ddd4a1"},o=void 0,s={},c=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Implementations",id:"implementations",level:2},{value:"DP (Most Preferred)",id:"dp-most-preferred",level:3},{value:"\u6ce8\u610f\uff1a",id:"\u6ce8\u610f",level:3},{value:"DFS with memoization:",id:"dfs-with-memoization",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,a.jsx)(n.p,{children:"Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order."}),"\n",(0,a.jsx)(n.p,{children:"Note that the same word in the dictionary may be reused multiple times in the segmentation."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'Example 1:\nInput: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]\nOutput: ["cats and dog","cat sand dog"]\n\nExample 2:\nInput: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]\nOutput: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\nExample 3:\nInput: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]\nOutput: []\n'})}),"\n",(0,a.jsx)(n.h2,{id:"implementations",children:"Implementations"}),"\n",(0,a.jsx)(n.h3,{id:"dp-most-preferred",children:"DP (Most Preferred)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def wordBreak(self, s, wordDict):\n        dp = [[[]]] + [[] for _ in range(len(s))]\n        for i in range(len(s)):\n            for word in wordDict:\n                if s[:i + 1].endswith(word):\n                    for ele in dp[i + 1 - len(word)]:\n                        dp[i + 1].append(ele + [word])\n        return [" ".join(ele) for ele in dp[-1]]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"\u6ce8\u610f",children:"\u6ce8\u610f\uff1a"}),"\n",(0,a.jsxs)(n.p,{children:["\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u5199\u7684\u662f ",(0,a.jsx)(n.code,{children:"dp = [[[]]] + [[]] * len(s)"}),", \u8fd9\u6837\u4f1a\u5bfc\u81f4\u66f4\u65b0\u4e00\u4e2a\uff0c\u5219\u66f4\u65b0\u5168\u90e8\u3002\ne.g.,"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = [[]] * 3\na[0].append(1)\nprint(a)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["\u4f1aprint ",(0,a.jsx)(n.code,{children:"[[1], [1], [1]]"}),"\n\u4f46\u662f\uff0c"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"a = [[] for _ in range(3)]\na[0].append(1)\nprint(a)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["\u4f1aprint ",(0,a.jsx)(n.code,{children:"[[1], [], []]"})]}),"\n",(0,a.jsx)(n.h3,{id:"dfs-with-memoization",children:"DFS with memoization:"}),"\n",(0,a.jsxs)(n.p,{children:["\u6700\u540e\u7684",(0,a.jsx)(n.code,{children:"memo"})," for ",(0,a.jsx)(n.code,{children:"aab"}),", ",(0,a.jsx)(n.code,{children:"word_dict"})," = ",(0,a.jsx)(n.code,{children:"['a', 'ab']"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:' a                a               b\n[["a", "ab"]], [["ab"]],          []           [[]]]\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def wordBreak(self, s, wordDict):\n        memo = [None] * len(s) + [[[]]]\n        """\n        \u6700\u5916\u5c42 []\uff1a\u5305\u88f9\u5176\u4e2d\u7684\u5143\u7d20[[]]\n        \u4e2d\u95f4\u5c42 []: \u6240\u6709memo\u8fc7\u7684\u5143\u7d20\u90fd\u4f1a\u6709\uff0c\u5982\u679c\u53ea\u6709 [] \u8868\u793a\u5728\u8fd9\u4e2a\u70b9\u5f80\u540e\u6ca1\u6709valid word break\u3002\n        \u6700\u91cc\u5c42 []: \u8868\u793aempty \u5143\u7d20\uff0c\u4e3a\u4e86\u4f7f\u5f97\u540e\u9762 [word] + ele \u8fd4\u56de\u7c7b\u4f3c ["dog"]\n        """\n        word_dict = set(wordDict)\n        res = self.dfs(s, word_dict, memo, 0)\n        return [" ".join(ele) for ele in res]\n        \n        \n    def dfs(self, s, word_dict, memo, idx):\n        if memo[idx] != None:\n            return memo[idx]\n            \n        res = []\n        for i in range(idx, len(s)):\n            word = s[idx:i+1]\n            if word in word_dict:\n                rest_res = self.dfs(s, word_dict, memo, i+1)\n                for ele in rest_res:\n                    res.append([word] + ele)\n        memo[idx] = res\n        return res\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);