"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[4007],{28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>t});var l=a(96540);const s={},i=l.createContext(s);function r(e){const n=l.useContext(i);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(i.Provider,{value:n},e.children)}},49186:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"Leetcode/Other/125.125 - Valid Palindrome - Easy","title":"125.125 - Valid Palindrome - Easy","description":"python apis:","source":"@site/docs/Leetcode/99.Other/125.125 - Valid Palindrome - Easy.md","sourceDirName":"Leetcode/99.Other","slug":"/p/3b966a29-dddc-43d1-bf90-d8b94e7e7413","permalink":"/notes/docs/p/3b966a29-dddc-43d1-bf90-d8b94e7e7413","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/125.125 - Valid Palindrome - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/3b966a29-dddc-43d1-bf90-d8b94e7e7413","slug":"/p/3b966a29-dddc-43d1-bf90-d8b94e7e7413"},"sidebar":"tutorialSidebar","previous":{"title":"124.124 - Binary Tree Maximum Path Sum - Hard","permalink":"/notes/docs/p/ee21661f-55eb-4483-83f8-601e42b661c0"},"next":{"title":"126.126 - Word Ladder II (Hard)","permalink":"/notes/docs/p/8ca93ecc-051f-4992-b59f-d0d70c3df6b9"}}');var s=a(74848),i=a(28453);const r={created_at:"2025-10-23",page_link:"/p/3b966a29-dddc-43d1-bf90-d8b94e7e7413",slug:"/p/3b966a29-dddc-43d1-bf90-d8b94e7e7413"},t=void 0,d={},o=[{value:"python apis:",id:"python-apis",level:2},{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"python-apis",children:"python apis:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"isalnum()"}),":  \uff08is alphabetical or numeric)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"1".isalnum() = True'}),", ",(0,s.jsx)(n.code,{children:'"a".isalnum() = True'})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"lower()"}),": (to lower case)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:'"P".lower() = "p", "1".lower() = "1"'})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,s.jsx)(n.p,{children:"Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Example 1:\n\nInput: s = "A man, a plan, a canal: Panama"\nOutput: true\nExplanation: "amanaplanacanalpanama" is a palindrome.\nExample 2:\n\nInput: s = "race a car"\nOutput: false\nExplanation: "raceacar" is not a palindrome.\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def isPalindrome(self, s):\n        l, r = 0, len(s)-1\n        while l < r:\n            while l < r and not s[l].isalnum():\n                l += 1\n            while l < r and not s[r].isalnum():\n                r -= 1\n            if s[l].lower() == s[r].lower():\n                l += 1\n                r -= 1\n            else:\n                return False\n        return True\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);