"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9345],{19238:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Leetcode/Other/1554.1554 - Strings Differ by One Character - Medium","title":"1554.1554 - Strings Differ by One Character - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/1554.1554 - Strings Differ by One Character - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/25f099aa-a94f-4698-a7da-b00a1f61edff","permalink":"/notes/docs/p/25f099aa-a94f-4698-a7da-b00a1f61edff","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1554.1554 - Strings Differ by One Character - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/25f099aa-a94f-4698-a7da-b00a1f61edff","slug":"/p/25f099aa-a94f-4698-a7da-b00a1f61edff"},"sidebar":"tutorialSidebar","previous":{"title":"1541.1541 - Minimum Insertions to Balance a Parentheses String (Medium)","permalink":"/notes/docs/p/75548748-23b1-4670-98b2-d2383e32acf8"},"next":{"title":"1559.1559 - Detect Cycles in 2D Grid (Medium)","permalink":"/notes/docs/p/7e4d7d56-2c32-403c-be23-7878f2aebd1c"}}');var i=r(74848),s=r(28453);const d={created_at:"2025-10-23",page_link:"/p/25f099aa-a94f-4698-a7da-b00a1f61edff",slug:"/p/25f099aa-a94f-4698-a7da-b00a1f61edff"},a=void 0,c={},o=[{value:"solution",id:"solution",level:2},{value:"1. \u6eda\u52a8\u54c8\u5e0c (rolling hashmap) O(nm)",id:"1-\u6eda\u52a8\u54c8\u5e0c-rolling-hashmap-onm",level:3},{value:"Ord function:",id:"ord-function",level:4},{value:"2. Brute force (not preferred) (O(n * m^2))",id:"2-brute-force-not-preferred-on--m2",level:3},{value:"\u65f6\u95f4\u590d\u6742\u5ea6",id:"\u65f6\u95f4\u590d\u6742\u5ea6",level:4}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/strings-differ-by-one-character/",children:"LC link"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/1554-0.png",alt:""})}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"solution"}),"\n",(0,i.jsx)(n.h3,{id:"1-\u6eda\u52a8\u54c8\u5e0c-rolling-hashmap-onm",children:"1. \u6eda\u52a8\u54c8\u5e0c (rolling hashmap) O(nm)"}),"\n",(0,i.jsx)(n.p,{children:"\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u4e00\u4e2a 27\u8fdb\u5236\u7684\u6570\u5b57\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"a"})," = ",(0,i.jsx)(n.code,{children:"1"}),"; ",(0,i.jsx)(n.code,{children:"z"})," = ",(0,i.jsx)(n.code,{children:"26"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"aa"})," = ",(0,i.jsx)(n.code,{children:"1 * 27 + 1 = 28"}),"; ",(0,i.jsx)(n.code,{children:"ab"})," = ",(0,i.jsx)(n.code,{children:"1 * 27 + 2 = 29"}),"\n\u4e3a\u9632\u6b62\u7ed3\u679c\u592a\u5927\uff0c\u9664\u4ee5\u4e00\u4e2a\u5927\u8d28\u6570(",(0,i.jsx)(n.code,{children:"MOD = 100000000007"}),") (10\u4e2a0\uff09\u5e76\u53d6\u4f59\uff0c\n\u4ee5 ",(0,i.jsx)(n.code,{children:'dict = ["ab","cd","yz"]'})," \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u4e3a\u4f2a\u4ee3\u7801"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def differByOne():\n    \u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u4e00\u4e2a27\u8fdb\u5236\u7684\u6570\u5b57\uff1a\n        hashes: [29, 85, 701]\n\n    \u4ece\u540e\u5f80\u524d\uff0c\u904d\u5386\u4e24\u6b21 \uff08j = 1 to 0)\n        seen = {}\n        \u5bf9dict\u91cc\u9762\u6bcf\u4e2aword\uff1a\n            \u5bf9hash[i][j], \u5728j\u4f4d\u4e0a\u51cf\u53bb\u90a3\u4e2a\u5f53\u524dword[j] \u5bf9\u5e94\u7684\u503c\n            e.g. "ab" => "a*" = 29-2 = 27\n            \u5982\u679cdict\u91cc\u9762\u6709\u4e00\u4e2a "az", \u90a3\u4e48 "az" \u6682\u65f6\u53d8\u6210 "a*" \u4e5f\u662f 27\uff0c\u5c31\u8fd4\u56detrue\n        base = 27 * base % MOD\n    return False\n'})}),"\n",(0,i.jsx)(n.h4,{id:"ord-function",children:"Ord function:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Python ord() function"}),"\xa0returns the Unicode code from a given character.\n",(0,i.jsx)(n.img,{width:"633",alt:"image",src:"https://user-images.githubusercontent.com/41789327/180720293-f6fbdf35-414d-4850-b8c4-407e380059f2.png"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def differByOne(self, dict: List[str]) -> bool:\n        n, m = len(dict), len(dict[0])\n        hashes = [0] * n\n        MOD = 100000000007\n        \n        # \u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u4e00\u4e2a 27\u8fdb\u5236\u7684\u6570\u5b57\n        for i in range(n):\n            for j in range(m):\n                hashes[i] = (27 * hashes[i] + (ord(dict[i][j]) - ord('a'))) % MOD\n        \n        base = 1 # \u4ece\u6700\u540e\u4e00\u4f4d\u5f80\u524d\u6570\n        for j in range(m - 1, -1, -1):     \n            seen = set()\n            for i in range(n):\n                new_h = (hashes[i] - base * (ord(dict[i][j]) - ord('a'))) % MOD\n                if new_h in seen:\n                    return True\n                seen.add(new_h)\n            base = 27 * base % MOD\n        return False\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-brute-force-not-preferred-on--m2",children:"2. Brute force (not preferred) (O(n * m^2))"}),"\n",(0,i.jsxs)(n.p,{children:["\u8003\u8651\u5b57\u7b26\u4e32\u4e0a\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u5b57\u7b26\u4f5c\u4e3a\u4e0d\u540c\u7684\u5b57\u7b26\uff0c\u5e76\u5c06\u5176\u7f6e\u4e3a",(0,i.jsx)(n.code,{children:"*"}),",\u5982\u679c\u5b58\u5728\u4e24\u4e2a\u5b57\u7b26\u4e32\u5728\u76f8\u540c\u7d22\u5f15\u5904\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\u65f6\uff0c\u90a3\u4e48\u5c06\u8be5\u5b57\u7b26\u4e0d\u540c\u7684\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u7f6e\u4e3a",(0,i.jsx)(n.code,{children:"*"}),"\u540e\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u4ee5",(0,i.jsx)(n.code,{children:'dict = ["ab","cd","yz"]'}),"\u4e3a\u4f8b\uff1a"]}),"\n",(0,i.jsx)(n.p,{children:'\u56e0\u4e3a "ab" \u6709\u4e24\u4f4d\uff0c\u8d70\u4e24\u4e2a\u5faa\u73af\uff1a'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u7b2c\u4e00\u4e2a\u5faa\u73af\u8d70\u5b8c\u540e\uff0c ",(0,i.jsx)(n.code,{children:'seen = {"*b", "*d", "*z"}'})]}),"\n",(0,i.jsxs)(n.li,{children:["\u7b2c2\u4e2a\u5faa\u73af\u8d70\u5b8c\u540e\uff0c ",(0,i.jsx)(n.code,{children:'seen = {"a*", "c*", "y*"}'}),"\n\u56e0\u4e3a\u6ca1\u6709\u91cd\u590d\u7684\uff0c\u6240\u4ee5return false"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def differByOne(self, dict: List[str]) -> bool:\n        n, m = len(dict), len(dict[0])\n        for j in range(m):\n            seen = set()\n            for i in range(n):\n                new = dict[i][:j] + '*' +dict[i][j+1:]\n                if new in seen:\n                    return True\n                seen.add(new)\n        return False\n"})}),"\n",(0,i.jsx)(n.h4,{id:"\u65f6\u95f4\u590d\u6742\u5ea6",children:"\u65f6\u95f4\u590d\u6742\u5ea6"}),"\n",(0,i.jsxs)(n.p,{children:["This solution takes ",(0,i.jsx)(n.code,{children:"O(N*M^2)"}),", where N = len(dict) and M = len(dict[i]). It takes O(N) to iterate through the word list, O(M) to iterate through each character in the word, and another O(M) to create all the wildcard words."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>a});var t=r(96540);const i={},s=t.createContext(i);function d(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);