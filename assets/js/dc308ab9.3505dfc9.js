"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3087],{28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var o=n(96540);const t={},c=o.createContext(t);function s(e){const r=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(c.Provider,{value:r},e.children)}},45400:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"Leetcode/DFS/1034.1034 - Coloring A Border (Medium)","title":"1034.1034 - Coloring A Border (Medium)","description":"LC link","source":"@site/docs/Leetcode/04.DFS/1034.1034 - Coloring A Border (Medium).md","sourceDirName":"Leetcode/04.DFS","slug":"/p/6c2e299b-f14a-4e1d-894c-a74a2f07c854","permalink":"/notes/docs/p/6c2e299b-f14a-4e1d-894c-a74a2f07c854","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/1034.1034 - Coloring A Border (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/6c2e299b-f14a-4e1d-894c-a74a2f07c854","slug":"/p/6c2e299b-f14a-4e1d-894c-a74a2f07c854"},"sidebar":"tutorialSidebar","previous":{"title":"04.04 - Median of Two Sorted Arrays (Hard)","permalink":"/notes/docs/p/7e97ca29-7489-4c37-a3cc-497a1301f45a"},"next":{"title":"1110.1110 - Delete Nodes And Return Forest - Medium","permalink":"/notes/docs/p/e4b19794-660e-408e-ae6d-4b553bc8f7c4"}}');var t=n(74848),c=n(28453);const s={created_at:"2025-10-23",page_link:"/p/6c2e299b-f14a-4e1d-894c-a74a2f07c854",slug:"/p/6c2e299b-f14a-4e1d-894c-a74a2f07c854"},i=void 0,d={},a=[{value:"solution\uff1adfs",id:"solutiondfs",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://leetcode.com/problems/coloring-a-border/",children:"LC link"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/1034-0.png",alt:""})}),"\n",(0,t.jsx)(r.h2,{id:"solutiondfs",children:"solution\uff1adfs"}),"\n",(0,t.jsxs)(r.p,{children:["\u9898\u610f\u7406\u89e3\uff1a\u5982\u679c\u9009\u7684\u662f\u5de6\u8fb9\u7ea2\u8272\u7684\u90a3\u4e2a2\uff0c\u5219\u628agrid\u53d8\u6210\u53f3\u8fb9\uff0c\u4e5f\u5c31\u662f\u628a\u6240\u67092\u8fde\u8d77\u6765\u7684\u70b9\u7684\u5916\u5708\u6807\u6210\u84dd\u8272\n",(0,t.jsx)(r.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/1034-1.png",alt:""})]}),"\n",(0,t.jsx)(r.p,{children:"\u672c\u9898\u548c\u4e00\u822c\u7684\u7f51\u683cdfs\u7684\u4e0d\u540c\uff1a"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"\u628a\u5224\u65ad\uff0c\u8fc7\u6ee4\uff0c \u5168\u90e8\u5fc5\u987b\u5199\u5728\u6269\u6563\u7684\u8fc7\u7a0b\u4e2d\uff0c\u800c\u4e0d\u662f\u6269\u6563\u5b8c\u8fdb\u5165\u4e0b\u4e00\u4e2adfs\u7684\u65f6\u5019\u3002"}),"\n",(0,t.jsx)(r.li,{children:"\u4e00\u822c\u6765\u8bf4\uff0c\u8fc7\u6ee4\u5728\u54ea\u91cc\u5199\uff0c\u5224\u65ad\u662f\u5426\u5c5e\u4e8evis\uff08\u4f5c\u4e3a\u8fc7\u6ee4\u7684\u4e00\u90e8\u5206\uff09\u4e5f\u5f97\u5728\u54ea\u91cc\u5199\uff0c\u6bd4\u5982\u4e00\u822c\u7684\u5c9b\u5c7f\u6a21\u7248\uff0c\u5168\u90fd\u662f\u5199\u5728dfs\u7684\u5f00\u5934\u5224\u65ad\u662f\u5426return\u7684\u65f6\u5019\uff0c \u8fd9\u91cc\u56e0\u4e3a\u662fupdate parent\uff0c\u6240\u4ee5\u5199\u5728\u6269\u6563\u8fc7\u7a0b\u4e2d\uff0c"}),"\n",(0,t.jsx)(r.li,{children:"\u4f46\u662f\uff0c\u548c\u4e00\u822c\u7684\u7f51\u683cdfs \u76f8\u540c\u70b9\u662f\uff0c\u52a0\u5165vis\u5fc5\u987b\u5199\u5728\u4e0b\u4e00\u4e2adfs\u5f00\u59cb\u7684\u65f6\u5019\u3002"}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"class Solution:\n    def colorBorder(self, grid, row, col, color):\n        vis = set()\n        self.dfs(grid, vis, row, col, grid[row][col], color)\n        return grid\n\n    def dfs(self, grid, vis, r, c, cur_color, target_color):\n        vis.add((r, c))\n        for x, y in (r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1):\n            if (x, y) in vis:\n                continue \n            if not self.in_area(grid, x, y) or grid[x][y] != cur_color:\n                grid[r][c] = target_color\n            elif grid[x][y] == cur_color:\n                self.dfs(grid, vis, x, y, cur_color, target_color)\n\n    def in_area(self, grid, r, c):\n        return 0 <= r < len(grid) and 0 <= c < len(grid[0])\n"})})]})}function u(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);