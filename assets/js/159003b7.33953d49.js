"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[32],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var r=s(96540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}},89434:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>a,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/Other/210.210 - Course Schedule II - Print Results","title":"210.210 - Course Schedule II - Print Results","description":"Description","source":"@site/docs/Leetcode/99.Other/210.210 - Course Schedule II - Print Results.md","sourceDirName":"Leetcode/99.Other","slug":"/p/72362531-077c-4234-a0d0-40f56340f9b4","permalink":"/notes/docs/p/72362531-077c-4234-a0d0-40f56340f9b4","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/210.210 - Course Schedule II - Print Results.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/72362531-077c-4234-a0d0-40f56340f9b4","slug":"/p/72362531-077c-4234-a0d0-40f56340f9b4"},"sidebar":"tutorialSidebar","previous":{"title":"208.208 - Implement Trie (Prefix Tree) - Medium","permalink":"/notes/docs/p/fb836e15-f906-47e0-aa7b-4f617959d585"},"next":{"title":"211.211 - Design Add and Search Words Data Structure - Medium","permalink":"/notes/docs/p/452ae260-fb0c-4eb3-bd62-4db8e7bb3a1d"}}');var i=s(74848),t=s(28453);const o={created_at:"2025-10-23",page_link:"/p/72362531-077c-4234-a0d0-40f56340f9b4",slug:"/p/72362531-077c-4234-a0d0-40f56340f9b4"},d=void 0,l={},c=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution 1 - DFS",id:"solution-1---dfs",level:2},{value:"Solution 2 - BFS",id:"solution-2---bfs",level:2},{value:"\u89e3\u9898\u601d\u8def\uff1a",id:"\u89e3\u9898\u601d\u8def",level:3},{value:"\u7b97\u6cd5\u6d41\u7a0b\uff1a",id:"\u7b97\u6cd5\u6d41\u7a0b",level:3},{value:"code",id:"code",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/course-schedule-ii/",children:"LC link"}),"\n",(0,i.jsx)(n.a,{href:"http://zxi.mytechroad.com/blog/graph/leetcode-210-course-schedule-ii/",children:"explanation"}),"\nThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai."]}),"\n",(0,i.jsx)(n.p,{children:"For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1."}),"\n",(0,i.jsx)(n.p,{children:"Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Example 1:\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n\nExample 2:\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n\nExample 3:\nInput: numCourses = 1, prerequisites = []\nOutput: [0]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"solution-1---dfs",children:"Solution 1 - DFS"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u4f20\u7edfdfs\u53ea\u6709\u4e00\u4e2avisited\u72b6\u6001"}),"\n",(0,i.jsxs)(n.li,{children:["\u62d3\u6251dfs\u6709\u4e24\u4e2a\u72b6\u6001\uff1a ",(0,i.jsx)(n.code,{children:"visited"})," and ",(0,i.jsx)(n.code,{children:"visiting"})]}),"\n",(0,i.jsxs)(n.li,{children:["\u78b0\u5230visited\uff1aok\uff1b \u78b0\u5230  ",(0,i.jsx)(n.code,{children:"visiting"}),": \u8bf4\u660e\u6709\u73af\uff0c\u8fd4\u56defalse\u3002\n\u5c06\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u8fdb\u884c\u53cd\u8f6c\uff0c\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'"""\n3 -> 2 -> 0\n  -> 1 ->\n\nstarting from anywhere, e.g., 2\nfind leaf 2 -> 0 => \u5f97\u5230 \u30100\uff0c 2\u3011\n\nthen 3: \n3 -> 2 (visited, skip)\n-------\n\nstarting from 3 : \n\n\u4ee53\u4e3aroot\u540e\u5e8f\u904d\u5386\n\u5f97\u5230 [0, 2, 1, 3]\n\u6ce8\u610f 0 2 \u4e4b\u540e\u4f1a\u56de\u52300\uff0c \u8981\u526a\u679d \u8fd0\u7528visited\n\nvisiting\uff1a \u662f\u73af\uff0c \u9000\u51fa\n"""\n\nVISITED = 2\nVISITING = 1\n\nclass Solution: \n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        map = defaultdict(list)\n        for post, pre in prerequisites:\n            map[post].append(pre) \n        vis = [0 for _ in range(numCourses)]\n        res = []\n        for i in range(numCourses):\n            is_cycle, cur_path = self.dfs(i, vis, map)\n            if is_cycle:\n                return []\n            else:\n                res.extend(cur_path)\n        return res\n            \n    def dfs(self, i, vis, map):\n        if vis[i] == VISITED:\n            return False, []\n\n        if vis[i] == VISITING:\n            return True, None\n        \n        vis[i] = VISITING\n        prereqs = []\n        is_cycle, prev_prereqs = False, []\n        for ele in map.get(i, []):\n            is_cycle, prev_prereqs = self.dfs(ele, vis, map)\n            if is_cycle:\n                return True, None\n            prereqs.extend(prev_prereqs)\n        prereqs.append(i)\n        vis[i] = VISITED\n        return False, prereqs\n'})}),"\n",(0,i.jsx)(n.h2,{id:"solution-2---bfs",children:"Solution 2 - BFS"}),"\n",(0,i.jsx)(n.h3,{id:"\u89e3\u9898\u601d\u8def",children:"\u89e3\u9898\u601d\u8def\uff1a"}),"\n",(0,i.jsx)(n.p,{children:"\u672c\u9898\u53ef\u7ea6\u5316\u4e3a\uff1a \u8bfe\u7a0b\u5b89\u6392\u56fe\u662f\u5426\u662f \u6709\u5411\u65e0\u73af\u56fe(DAG)\u3002\u5373\u8bfe\u7a0b\u95f4\u89c4\u5b9a\u4e86\u524d\u7f6e\u6761\u4ef6\uff0c\u4f46\u4e0d\u80fd\u6784\u6210\u4efb\u4f55\u73af\u8def\uff0c\u5426\u5219\u8bfe\u7a0b\u524d\u7f6e\u6761\u4ef6\u5c06\u4e0d\u6210\u7acb\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u601d\u8def\u662f\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u6b64\u8bfe\u7a0b\u5b89\u6392\u56fe\u662f\u5426\u662f\u6709\u5411\u65e0\u73af\u56fe(DAG)\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u62d3\u6251\u6392\u5e8f\u539f\u7406\uff1a \u5bf9 DAG \u7684\u9876\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u5bf9\u6bcf\u4e00\u6761\u6709\u5411\u8fb9 (u, v)\uff0c\u5747\u6709 u\uff08\u5728\u6392\u5e8f\u8bb0\u5f55\u4e2d\uff09\u6bd4 v \u5148\u51fa\u73b0\u3002\u4ea6\u53ef\u7406\u89e3\u4e3a\u5bf9\u67d0\u70b9 v \u800c\u8a00\uff0c\u53ea\u6709\u5f53 v \u7684\u6240\u6709\u6e90\u70b9\u5747\u51fa\u73b0\u4e86\uff0cv \u624d\u80fd\u51fa\u73b0\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u901a\u8fc7\u8bfe\u7a0b\u524d\u7f6e\u6761\u4ef6\u5217\u8868 prerequisites \u53ef\u4ee5\u5f97\u5230\u8bfe\u7a0b\u5b89\u6392\u56fe\u7684 \u90bb\u63a5\u8868 graph."}),"\n",(0,i.jsx)(n.h3,{id:"\u7b97\u6cd5\u6d41\u7a0b",children:"\u7b97\u6cd5\u6d41\u7a0b\uff1a"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\u7edf\u8ba1\u8bfe\u7a0b\u5b89\u6392\u56fe\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\uff0c\u751f\u6210\u5165\u5ea6\u8868 ",(0,i.jsx)(n.code,{children:"indegrees"}),"\u3002\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u6ce8\u610f\uff1a\u5224\u65ad\u8c01\u505aroot\u65b9\u5411\uff1a\u5230\u65f6\u5019\u8c01\u8981\u5148\u51fa\u6765\uff0c \u8c01\u5c31\u505aroot\u6216\u8005parent\u3002\u8fd9\u91cc\uff0c\u524d\u7f6e\u8bfe\u7a0b\u8981\u5148\u51fa\u6765\uff0c\u6240\u4ee5\u524d\u7f6e\u8bfe\u7a0b\u5c31\u505aroot/parent"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\u501f\u52a9\u4e00\u4e2a",(0,i.jsx)(n.strong,{children:"\u53cc\u5411\u961f\u5217"})," ",(0,i.jsx)(n.code,{children:"queue = deque()"}),"\uff0c\u5c06\u6240\u6709\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u5165\u961f\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u5f53 ",(0,i.jsx)(n.code,{children:"queue"})," \u975e\u7a7a\u65f6\uff0c\u4f9d\u6b21\u5c06\u961f\u9996\u8282\u70b9\u51fa\u961f\uff0c\u5728\u8bfe\u7a0b\u5b89\u6392\u56fe\u4e2d\u5220\u9664\u6b64\u8282\u70b9 ",(0,i.jsx)(n.code,{children:"course"}),"\uff1a\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u5e76\u4e0d\u662f\u771f\u6b63\u4ece\u90bb\u63a5\u8868\u4e2d\u5220\u9664\u6b64\u8282\u70b9 ",(0,i.jsx)(n.code,{children:"course"}),"\uff0c\u800c\u662f\u5c06\u6b64\u8282\u70b9\u5bf9\u5e94\u6240\u6709\u90bb\u63a5\u8282\u70b9 ",(0,i.jsx)(n.code,{children:"child"})," \u7684\u5165\u5ea6 \u22121\uff0c\u5373 ",(0,i.jsx)(n.code,{children:"indegrees[child] -= 1"}),"\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u5f53\u5165\u5ea6 \u22121 \u540e\u90bb\u63a5\u8282\u70b9 ",(0,i.jsx)(n.code,{children:"child"})," \u7684\u5165\u5ea6\u4e3a 0\uff0c\u8bf4\u660e ",(0,i.jsx)(n.code,{children:"child"})," \u6240\u6709\u7684\u524d\u9a71\u8282\u70b9\u5df2\u7ecf\u88ab \u201c\u5220\u9664\u201d\uff0c\u6b64\u65f6\u5c06 ",(0,i.jsx)(n.code,{children:"child"})," \u5165\u961f\u3002"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\u5728\u6bcf\u6b21 ",(0,i.jsx)(n.code,{children:"course"})," \u51fa\u961f\u65f6\uff0c\u628a ",(0,i.jsx)(n.code,{children:"course"})," \u52a0\u5230 ",(0,i.jsx)(n.code,{children:"res"})," \u91cc\uff0c\u8fd9\u6837\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\u3002\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u8fd9\u91cc\u5982\u679c\u628a\u56fe\u53cd\u8fc7\u6765\u5efa\u7684\u8bdd\uff0cres\u5c31\u4e0d\u9700\u8981\u53cd\u8fc7\u6765\uff0c\u6bd4\u5982\u5982\u679c",(0,i.jsx)(n.code,{children:"[0\uff0c1]"}),"\u5f97\u5230",(0,i.jsx)(n.code,{children:"0"}),"\u4f9d\u8d56\u4e8e",(0,i.jsx)(n.code,{children:"1"}),"\uff0c\u90a3\u4e48\u6309\u7167 ",(0,i.jsx)(n.code,{children:"{1: [0]}"})," \u5efa\u56fe\uff0c\u90a3\u4e48\u540e\u9762\u5c31\u4e0d\u7528\u53cd\u8fc7\u6765\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u82e5\u6574\u4e2a\u8bfe\u7a0b\u5b89\u6392\u56fe\u662f\u6709\u5411\u65e0\u73af\u56fe\uff08\u5373\u53ef\u4ee5\u5b89\u6392\uff09\uff0c\u5219\u6240\u6709\u8282\u70b9\u4e00\u5b9a\u90fd\u5165\u961f\u5e76\u51fa\u961f\u8fc7\uff0c\u5373\u5b8c\u6210\u62d3\u6251\u6392\u5e8f\u3002\u6362\u4e2a\u89d2\u5ea6\u8bf4\uff0c\u82e5\u8bfe\u7a0b\u5b89\u6392\u56fe\u4e2d\u5b58\u5728\u73af\uff0c\u4e00\u5b9a\u6709\u8282\u70b9\u7684\u5165\u5ea6\u59cb\u7ec8\u4e0d\u4e3a ",(0,i.jsx)(n.code,{children:"0"}),"\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u56e0\u6b64\uff0c\u62d3\u6251\u6392\u5e8f\u51fa\u961f\u6b21\u6570\u7b49\u4e8e\u8bfe\u7a0b\u4e2a\u6570\uff0c\u8fd4\u56de",(0,i.jsx)(n.code,{children:" len(res) = numCourses"}),", \u5219\u8bf4\u660e\u8bfe\u7a0b\u53ef\u4ee5\u6210\u529f\u5b89\u6392 \u5224\u65ad\u8bfe\u7a0b\u662f\u5426\u53ef\u4ee5\u6210\u529f\u5b89\u6392\u3002"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u590d\u6742\u5ea6\u5206\u6790\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u65f6\u95f4\u590d\u6742\u5ea6 O(N+M)\uff1a \u904d\u5386\u4e00\u4e2a\u56fe\u9700\u8981\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u548c\u6240\u6709\u4e34\u8fb9\uff0cN \u548c M \u5206\u522b\u4e3a\u8282\u70b9\u6570\u91cf\u548c\u4e34\u8fb9\u6570\u91cf\uff1b"}),"\n",(0,i.jsx)(n.li,{children:"\u7a7a\u95f4\u590d\u6742\u5ea6 O(N+M)\uff1a \u4e3a\u5efa\u7acb\u90bb\u63a5\u8868\u6240\u9700\u989d\u5916\u7a7a\u95f4\uff0cadjacency \u957f\u5ea6\u4e3a N \uff0c\u5e76\u5b58\u50a8 M \u6761\u4e34\u8fb9\u7684\u6570\u636e\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"code",children:"code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from collections import defaultdict, deque\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        indegrees = {i:0 for i in range(numCourses)} \n        # \u6ce8\u610f\u8fd9\u91cc^\u4e0d\u80fd\u7528defaultdict(int),\u56e0\u4e3a\u540e\u9762\u8981\u627e\u5165\u5ea6\u4e3a0\u7684\u70b9\n        graph = defaultdict(list)\n        q = deque()\n        res = []\n        for p in prerequisites:\n            graph[p[1]].append(p[0])\n            indegrees[p[0]] += 1 #\u6ce8\u610f\uff0c\u662f\u7ed9child\u589e\u52a0in-degrees\n        for course, cnt in indegrees.items():\n            if cnt == 0:\n                q.append(course)\n        while q:\n            course = q.popleft()\n            for child in graph[course]:\n                indegrees[child] -= 1\n                if indegrees[child] == 0:\n                    q.append(child)\n            res.append(course)\n        if len(res) == numCourses:\n            return res \n        else:\n            return []\n"})})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);