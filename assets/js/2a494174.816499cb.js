"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5901],{28453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var i=t(96540);const l={},s=i.createContext(l);function a(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:a(n.components),i.createElement(s.Provider,{value:e},n.children)}},68598:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Leetcode/Other/935.935 - Knight Dialer - Medium","title":"935.935 - Knight Dialer - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/935.935 - Knight Dialer - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/1b67a3a7-a086-4dd6-bbfe-55f2ef5cef51","permalink":"/notes/docs/p/1b67a3a7-a086-4dd6-bbfe-55f2ef5cef51","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/935.935 - Knight Dialer - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/1b67a3a7-a086-4dd6-bbfe-55f2ef5cef51","slug":"/p/1b67a3a7-a086-4dd6-bbfe-55f2ef5cef51"},"sidebar":"tutorialSidebar","previous":{"title":"932.932 - Beautiful Array (Medium)","permalink":"/notes/docs/p/e5cad149-f390-4459-a341-dbf7e68e0c3f"},"next":{"title":"938.938 - Range Sum of BST (Easy)","permalink":"/notes/docs/p/21c7e839-78bd-4292-a05d-658b6079ba69"}}');var l=t(74848),s=t(28453);const a={created_at:"2025-10-23",page_link:"/p/1b67a3a7-a086-4dd6-bbfe-55f2ef5cef51",slug:"/p/1b67a3a7-a086-4dd6-bbfe-55f2ef5cef51"},o=void 0,r={},d=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2},{value:"O(n) \uff08\u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u638c\u63e1\uff0c\u56e0\u4e3a\u66f4\u5e38\u89c4\uff09",id:"on-\u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u638c\u63e1\u56e0\u4e3a\u66f4\u5e38\u89c4",level:3},{value:"O(lg n)",id:"olg-n",level:3}];function c(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.a,{href:"https://leetcode.com/problems/knight-dialer/",children:"LC link"}),"\n",(0,l.jsx)(e.a,{href:"https://leetcode-cn.com/problems/knight-dialer/solution/4zhuang-tai-dong-tai-gui-hua-pythonjie-kong-jian-f/",children:"explanation (O(lg n))"}),"\n",(0,l.jsx)(e.a,{href:"https://leetcode-cn.com/problems/knight-dialer/solution/dong-tai-gui-hua-pythonjie-by-clay001/",children:"explanation (O(n))"})]}),"\n",(0,l.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(e.p,{children:"The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L) \uff08\u8d70\u65e5\u5b57\uff09."}),"\n",(0,l.jsx)(e.p,{children:"A chess knight can move as indicated in the chess diagram below:"}),"\n",(0,l.jsx)(e.p,{children:"We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell)."}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"1 2 3\n4 5 6\n7 8 9\n  0\n"})}),"\n",(0,l.jsx)(e.p,{children:"Given an integer n, return how many distinct phone numbers of length n we can dial."}),"\n",(0,l.jsx)(e.p,{children:"You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps."}),"\n",(0,l.jsxs)(e.p,{children:["As the answer may be very large, ",(0,l.jsx)(e.strong,{children:"return the answer modulo 109 + 7"}),"."]}),"\n",(0,l.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"Example 1:\nInput: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n\nExample 2:\nInput: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n\nExample 3:\nInput: n = 3\nOutput: 46\n\nExample 4:\nInput: n = 4\nOutput: 104\n\nExample 5:\nInput: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod.\n"})}),"\n",(0,l.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"        4  -  9\n      /          \\\n    3     \\       2\n    |      0      |\n    8       \\     7\n     \\          /  \n       1  -   6\n"})}),"\n",(0,l.jsx)(e.h3,{id:"on-\u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u638c\u63e1\u56e0\u4e3a\u66f4\u5e38\u89c4",children:"O(n) \uff08\u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u638c\u63e1\uff0c\u56e0\u4e3a\u66f4\u5e38\u89c4\uff09"}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.code,{children:"dp"}),": \u5f53\u524d\u70b9\u662f\u8fd9\u4e2a\u70b9\u7684\u53ef\u80fd\u7684\u8df3\u7684\u65b9\u6cd5\u6709\u51e0\u79cd"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["e.g., N = 2 (\u8df3\u4e24\u6b21)\uff0c\u5219\u7ed3\u679c\u4e3a ",(0,l.jsx)(e.code,{children:"[2,2,2,2,3,0,3,2,2,2]"})]}),"\n",(0,l.jsxs)(e.li,{children:["N = 3 (\u8df3\u4e09\u6b21)\uff0c\u5219\u7ed3\u679c\u4e3a ",(0,l.jsx)(e.code,{children:"[6, 5, 4, 5, 6, 0, 6, 5, 4, 5]"}),"\n",(0,l.jsx)(e.code,{children:"moves"}),"\u4e3a\u7ec8\u6b62\u4f4d\u7f6e\u5206\u522b\u4e3a0-9\u7684\u65f6\u5019\uff0c\u5b83\u7684\u4e0a\u4e00\u6b65\u53ef\u80fd\u4f4d\u7f6e"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def knightDialer(self, N: int) -> int:\n        # \u521d\u59cb\u65f6\u4e3a\u4e00\u4f4d\u7684\u65f6\u5019\uff0c\u5c31\u662f\u8d77\u70b9\u7684\u6570\u503c \n        dp = [1]*10\n        # 0\u53ef\u4ee5\u8df3\u52304\uff0c6\uff1b 1\u53ef\u4ee5\u8df3\u52306\uff0c8, ...\n        moves = [[4,6],[6,8],[7,9],[4,8],[3,9,0],[],\n                     [1,7,0],[2,6],[1,3],[2,4]]\n\n        MOD = 10**9 + 7\n        \n        for i in range(N-1):\n            temp = [0] * 10\n            for idx, next_lst in enumerate(moves):\n                for pos in next_lst:\n                    temp[pos] += dp[idx]\n                    temp[pos] = temp[pos]%MOD\n            dp = temp\n        \n        # \u8f93\u51fa\u7684\u65f6\u5019\u9700\u8981\u53d6\u4e00\u6b21\u6a21\uff0c\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u8fd9\u91cc\u9700\u8981\u7279\u522b\u6ce8\u610f\n        return sum(dp) % MOD\n"})}),"\n",(0,l.jsx)(e.h3,{id:"olg-n",children:"O(lg n)"}),"\n",(0,l.jsx)(e.p,{children:'\uff08\u590d\u6742\u5ea6 lg n \u7531\u4e8e\u77e9\u9635\u5feb\u901f\u5e42\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log(n))\n\u56fe\u7247\u8868\u793a\uff0c\u5f53\u9a91\u58eb\u5904\u4e8e\u201c1\u201d\u5904\u65f6\uff0c\u4e0b\u4e00\u8df3\u5c06\u5728\u201c6\u201d\u6216\u201c8\u201d\uff1b\u9a91\u58eb\u5904\u4e8e\u201c4\u201d\u5904\u65f6\uff0c\u4e0b\u4e00\u8df3\u5c06\u5728\u201c3\u201d\u6216\u201c0\u201d\u6216"9";\u9a91\u58eb\u5904\u4e8e\u201c0\u201d\u5904\u65f6\uff0c\u4e0b\u4e00\u8df3\u5c06\u5728\u201c4\u201d\u6216\u201c6\u201d......'}),"\n",(0,l.jsxs)(e.p,{children:["\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c1\u30013\u30017\u30019\u5904\u4e8e\u5bf9\u79f0\u4f4d\u7f6e\uff1b2\uff0c8\u5904\u4e8e\u5bf9\u79f0\u4f4d\u7f6e;4\uff0c6\u5904\u4e8e\u5bf9\u79f0\u4f4d\u7f6e\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u5b57\u5206\u4e3a4\u4e2a\u72b6\u6001\uff0c\u547d\u540d\u4e3aA\u3001B\u3001C\u3001D\u3002\u5176\u4e2d",(0,l.jsx)(e.code,{children:"A:{1,3,7,9}"}),", ",(0,l.jsx)(e.code,{children:"B:{2,8}"}),", ",(0,l.jsx)(e.code,{children:"C:{4,6}"}),", ",(0,l.jsx)(e.code,{children:"D:{0}"}),"\u3002"]}),"\n",(0,l.jsx)(e.p,{children:"\u6211\u4eec\u7528f(X,n)\u8868\u793a\uff1a\u5728\u72b6\u6001X\u4e0b\uff0c\u8df3\u8dc3n\u6b65\u80fd\u591f\u5f97\u5230\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u3002\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"f(A,n)=f(B,n-1)+f(C,n-1)\nf(B,n)=2*f(A,n-1)\nf(C,n)=2*f(A,n-1)+f(D,n-1)\nf(D,n)=2*f(C,n-1)\n\u89e3\u91ca\u4e3a\uff1a\n\u5904\u4e8e\u72b6\u6001A\u4e2d\u7684\u6570\u5b57(1,3,7,9)\u901a\u8fc7\u4e00\u6b21\u8df3\u8dc3\u8981\u4e48\u53d8\u6210\u72b6\u6001B(2,8)\uff0c\u8981\u4e48\u53d8\u6210\u72b6\u6001C(4,6)\n\u5904\u4e8e\u72b6\u6001B\u4e2d\u7684\u6570\u5b57(2,8)\u901a\u8fc7\u4e00\u6b21\u8df3\u8dc3\u6709\u4e24\u79cd\u65b9\u5f0f\u53d8\u6210\u72b6\u6001A(1,3,7,9)\n\u5904\u4e8e\u72b6\u6001C\u4e2d\u7684\u6570\u5b57(4,6)\u901a\u8fc7\u4e00\u6b21\u8df3\u8dc3\u6709\u4e24\u79cd\u65b9\u5f0f\u53d8\u6210\u72b6\u6001A(1,3,7,9)\uff0c\u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\u53d8\u6210\u72b6\u6001D(0)\n\u5904\u4e8e\u72b6\u6001D\u4e2d\u7684\u6570\u5b57(0)\u901a\u8fc7\u4e00\u6b21\u8df3\u8dc3\u6709\u4e24\u79cd\u65b9\u5f0f\u53d8\u6210\u72b6\u6001C(4,6)\n"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def knightDialer(self, N: int) -> int:\n        if N==1: return 10\n        #\u5206\u522b\u4e3a\u72b6\u6001A,B,C,D\n        nums=[1,1,1,1]\n        for _ in range(N-1):\n            nums=[nums[1]+nums[2], 2*nums[0], 2*nums[0]+nums[3], 2*nums[2]]\n        #\u72b6\u6001A\u67094\u4e2a\u6570\u5b57\uff0cB\u67092\u4e2a\u6570\u5b57\uff0cC\u67092\u4e2a\u6570\u5b57\uff0cD\u67091\u4e2a\u6570\u5b57\n        return (4*nums[0]+2*nums[1]+2*nums[2]+nums[3])%1000000007\n"})})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}}}]);