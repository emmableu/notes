"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[885],{28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var s=n(96540);const r={},d=s.createContext(r);function c(e){const t=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(d.Provider,{value:t},e.children)}},76572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"Leetcode/Other/1302.1302 - Deepest Leaves Sum - Medium","title":"1302.1302 - Deepest Leaves Sum - Medium","description":"tags: [Tree, Depth-First Search, Breadth-First Search, Binary Tree]","source":"@site/docs/Leetcode/99.Other/1302.1302 - Deepest Leaves Sum - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/ce4a52b8-a3cd-48b2-8d78-64b0d2dc04d6","permalink":"/notes/docs/p/ce4a52b8-a3cd-48b2-8d78-64b0d2dc04d6","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1302.1302 - Deepest Leaves Sum - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/ce4a52b8-a3cd-48b2-8d78-64b0d2dc04d6","slug":"/p/ce4a52b8-a3cd-48b2-8d78-64b0d2dc04d6"},"sidebar":"tutorialSidebar","previous":{"title":"126.126 - Word Ladder II (Hard)","permalink":"/notes/docs/p/8ca93ecc-051f-4992-b59f-d0d70c3df6b9"},"next":{"title":"1305.1305 - All Elements in Two Binary Search Trees - Medium","permalink":"/notes/docs/p/7dcc5d77-209e-4db6-9a42-63a1c3c01620"}}');var r=n(74848),d=n(28453);const c={created_at:"2025-10-23",page_link:"/p/ce4a52b8-a3cd-48b2-8d78-64b0d2dc04d6",slug:"/p/ce4a52b8-a3cd-48b2-8d78-64b0d2dc04d6"},a=void 0,l={},o=[];function i(e){const t={code:"code",img:"img",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"tags: [Tree, Depth-First Search, Breadth-First Search, Binary Tree]"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208161931056.png",alt:""})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n        level_sum = []\n        self.dfs(root, level_sum, 0)\n        return level_sum[-1]\n\n    def dfs(self, node, level_sum, cur_level):\n        if not node:\n            return\n        if cur_level >= len(level_sum):\n            level_sum.append(0)\n        level_sum[cur_level] += node.val\n        self.dfs(node.left, level_sum, cur_level + 1)\n        self.dfs(node.right, level_sum, cur_level + 1)\n"})})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}}}]);