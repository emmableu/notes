"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6361],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},29270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>b,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Leetcode/BFS/542.542 - 01 Matrix","title":"542.542 - 01 Matrix","description":"LC link","source":"@site/docs/Leetcode/01.BFS/542.542 - 01 Matrix.md","sourceDirName":"Leetcode/01.BFS","slug":"/p/3d4eb6c7-16fb-4cf8-bb17-06046ed41b14","permalink":"/notes/docs/p/3d4eb6c7-16fb-4cf8-bb17-06046ed41b14","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/01.BFS/542.542 - 01 Matrix.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/3d4eb6c7-16fb-4cf8-bb17-06046ed41b14","slug":"/p/3d4eb6c7-16fb-4cf8-bb17-06046ed41b14"},"sidebar":"tutorialSidebar","previous":{"title":"515.515 - Find Largest Value in Each Tree Row (Medium)","permalink":"/notes/docs/p/bf7d56ea-3a86-40b6-b778-8ecbb93d6f70"},"next":{"title":"815.815 - Bus Routes - Hard","permalink":"/notes/docs/p/1ff445bd-2374-42e5-bbf6-53b5762cbea3"}}');var r=t(74848),a=t(28453);const i={created_at:"2025-10-23",page_link:"/p/3d4eb6c7-16fb-4cf8-bb17-06046ed41b14",slug:"/p/3d4eb6c7-16fb-4cf8-bb17-06046ed41b14"},c=void 0,o={},l=[{value:"Solution: BFS: \u6240\u67090\u4e00\u8d77\u8fdbqueue\u5f00\u59cb\u6269\u6563",id:"solution-bfs-\u6240\u67090\u4e00\u8d77\u8fdbqueue\u5f00\u59cb\u6269\u6563",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://leetcode-cn.com/problems/01-matrix/submissions/",children:"LC link"}),(0,r.jsx)(n.br,{}),"\n\u5bf9\u6bd4\u9898\uff1a",(0,r.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/345ffc",children:"Shortest Distance from All Buildings"}),"\n",(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/542-0.png",alt:""})]}),"\n",(0,r.jsx)(n.h2,{id:"solution-bfs-\u6240\u67090\u4e00\u8d77\u8fdbqueue\u5f00\u59cb\u6269\u6563",children:"Solution: BFS: \u6240\u67090\u4e00\u8d77\u8fdbqueue\u5f00\u59cb\u6269\u6563"}),"\n",(0,r.jsxs)(n.p,{children:["\u76f4\u63a5\u6bcf\u4e2a1\u5206\u522b\u6269\u6563\u4e00\u6b21\u4f1aTLE,\u6240\u4ee5\u4ece0\u5f00\u59cb\u6269\u6563\uff0c \u901a\u8fc7\u628a\u6240\u6709\u76840\u90fd\u5165\u961f\uff0c\u4fdd\u8bc1\u4e86\u6700\u77ed\u8ddd\u79bb\u53ef\u4ee5\u4e00\u6b21bfs\u627e\u5230\u3002",(0,r.jsx)(n.br,{}),"\n\u9996\u5148\u628a\u6bcf\u4e2a\u6e90\u70b9 0 \u5165\u961f\uff0c\u7136\u540e\u4ece\u5404\u4e2a 0 \u540c\u65f6\u5f00\u59cb\u4e00\u5708\u4e00\u5708\u7684\u5411 1 \u6269\u6563\uff08\u6bcf\u4e2a 1 \u90fd\u662f\u88ab\u79bb\u5b83\u6700\u8fd1\u7684 0 \u6269\u6563\u5230\u7684 \uff09\uff0c",(0,r.jsx)(n.br,{}),"\n\u6269\u6563\u7684\u65f6\u5019\u4fee\u6539\u539f\u6570\u7ec4 mat \u6765\u8bb0\u5f55\u8ddd\u79bb\u548c\u6807\u5fd7\u662f\u5426\u8bbf\u95ee\u7684\uff0c",(0,r.jsx)(n.br,{}),"\n\u8fd9\u91cc\u8981\u6ce8\u610f\u5148\u628a matrix \u6570\u7ec4\u4e2d 1 \u7684\u4f4d\u7f6e\u8bbe\u7f6e\u6210 -1\uff0c\u5373\u4e00\u4e2a\u65e0\u6548\u7684\u8ddd\u79bb\u503c\u6765\u6807\u5fd7\u8fd9\u4e2a\u4f4d\u7f6e\u7684 1 \u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7"]}),"\n",(0,r.jsxs)(n.p,{children:["bfs\u8fc7\u7a0b\u4e2d\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981vis\uff1a",(0,r.jsx)(n.br,{}),"\n\u56e0\u4e3avis\u8fc7\u7684\u70b9\u4e0a\u9762\u4f1a\u6807step\u7684\u6570\u5b57\uff0c\u6240\u4ee5\u53ea\u8981\u4e0d\u662f-1\u5c31\u4e0dvisit\u5c31\u884c\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import deque\nclass Solution:\n    def updateMatrix(self, mat):\n        q = deque()\n        for r in range(len(mat)):\n            for c in range(len(mat[0])):\n                if mat[r][c] == 0:\n                    q.append((r, c))\n                elif mat[r][c] == 1:\n                    mat[r][c] = -1\n        self.bfs(mat, q)\n        return mat\n    \n    def bfs(self, mat, q):\n        step = 0\n        while q:\n            size = len(q)\n            step += 1\n            for _ in range(size):\n                r, c = q.popleft()\n                for x, y in (r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1):\n                    if not self.in_area(mat, x, y):  continue\n                    if mat[x][y] == -1: \n                        mat[x][y] = step\n                        q.append((x, y))        \n    \n    def in_area(self, mat, r, c):\n        return 0 <= r < len(mat) and 0 <= c < len(mat[0])\n"})})]})}function b(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);