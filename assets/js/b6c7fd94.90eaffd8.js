"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1652],{28453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>s});var a=n(96540);const r={},i=a.createContext(r);function o(t){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:o(t.components),a.createElement(i.Provider,{value:e},t.children)}},73292:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"Leetcode/Other/1514.1514 - Path with Maximum Probability - Medium","title":"1514.1514 - Path with Maximum Probability - Medium","description":"api:","source":"@site/docs/Leetcode/99.Other/1514.1514 - Path with Maximum Probability - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/0a39a797-2c88-4d1a-b040-cfee4a4080a3","permalink":"/notes/docs/p/0a39a797-2c88-4d1a-b040-cfee4a4080a3","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1514.1514 - Path with Maximum Probability - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/0a39a797-2c88-4d1a-b040-cfee4a4080a3","slug":"/p/0a39a797-2c88-4d1a-b040-cfee4a4080a3"},"sidebar":"tutorialSidebar","previous":{"title":"150.150 - Evaluate Reverse Polish Notation - Medium","permalink":"/notes/docs/p/cc751a01-78b0-44ec-be16-5e90bfbe7d2b"},"next":{"title":"1522.1522 - Diameter of N-Ary Tree (Medium)","permalink":"/notes/docs/p/458f06aa-e6dd-4226-8872-172ceb8b2d7f"}}');var r=n(74848),i=n(28453);const o={created_at:"2025-10-23",page_link:"/p/0a39a797-2c88-4d1a-b040-cfee4a4080a3",slug:"/p/0a39a797-2c88-4d1a-b040-cfee4a4080a3"},s=void 0,c={},p=[];function d(t){const e={code:"code",img:"img",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208240014316.png",alt:""}),"\n",(0,r.jsx)(e.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208240014586.png",alt:""}),(0,r.jsx)(e.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208240015442.png",alt:""})]}),"\n",(0,r.jsx)(e.p,{children:"api:\n\u6ce8\u610f\u4e0d\u80fd\u5199\uff1a"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"-prob, ele = heapq.heappop(q)\n"})}),"\n",(0,r.jsx)(e.p,{children:"-prob \u8fd9\u8fb9\u4f1a\u62a5\u9519\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u53e6\u5916\uff0c\u6ce8\u610f\u4e0d\u8981\u91cd\u590d\u4f7f\u7528 start, end \u8fd9\u4e24\u4e2a\u53c2\u6570\u3002"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from collections import defaultdict\nimport heapq\nclass Solution:\n\tdef maxProbability(self, n: int, edges: List[List[int]], succ_prob: List[float], start: int, end: int) -> float:\n\t\tgraph = defaultdict(list)\n\t\tprob_graph = defaultdict(list)\n\t\tfor i, (parent, child) in enumerate(edges):\n\t\t\tgraph[parent].append(child)\n\t\t\tprob_graph[parent].append(succ_prob[i])\n\t\t\tgraph[child].append(parent)\n\t\t\tprob_graph[child].append(succ_prob[i])\n\n\t\tq = [(-1, start)]\n\t\tvis = set()\n\t\twhile q:\n\t\t\tneg_prob, ele = heapq.heappop(q)\n\t\t\tprob = -neg_prob\n\t\t\tif ele == end:\n\t\t\t\treturn prob\n\t\t\tvis.add(ele)\n\t\t\tfor i, child in enumerate(graph[ele]):\n\t\t\t\tif child in vis:\n\t\t\t\t\tcontinue\n\t\t\t\tnew_prob = -prob * prob_graph[ele][i]\n\t\t\t\theapq.heappush(q, (new_prob, child))\n\t\treturn 0\n"})})]})}function l(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(d,{...t})}):d(t)}}}]);