"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[4919],{11083:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Leetcode/Other/43.43 - Multiply Strings - Medium","title":"43.43 - Multiply Strings - Medium","description":"Description","source":"@site/docs/Leetcode/99.Other/43.43 - Multiply Strings - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/62c66923-ab7c-4737-9339-2ec8420e822b","permalink":"/notes/docs/p/62c66923-ab7c-4737-9339-2ec8420e822b","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/43.43 - Multiply Strings - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/62c66923-ab7c-4737-9339-2ec8420e822b","slug":"/p/62c66923-ab7c-4737-9339-2ec8420e822b"},"sidebar":"tutorialSidebar","previous":{"title":"426.426 - Convert Binary Search Tree to Sorted Doubly Linked List (Medium)","permalink":"/notes/docs/p/afa5c640-0ec1-46ce-a18a-a422b7a043bc"},"next":{"title":"435.435 - Non-overlapping Intervals (Medium)","permalink":"/notes/docs/p/492f6737-a400-4924-a10e-e6a88a4eaea5"}}');var i=t(74848),s=t(28453);const c={created_at:"2025-10-23",page_link:"/p/62c66923-ab7c-4737-9339-2ec8420e822b",slug:"/p/62c66923-ab7c-4737-9339-2ec8420e822b"},l=void 0,o={},d=[{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:2},{value:"Solution",id:"solution",level:2}];function u(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string."}),"\n",(0,i.jsx)(n.p,{children:"Note: You must not use any built-in BigInteger library or convert the inputs to integer directly."}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input: num1 = "2", num2 = "3"\nOutput: "6"\nExample 2:\n\nInput: num1 = "123", num2 = "456"\nOutput: "56088"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max_length"}),": ",(0,i.jsx)(n.code,{children:"num1"}),"*",(0,i.jsx)(n.code,{children:"num2"})," \u4ea7\u751f\u6570\u7ec4\u7684\u6700\u5927\u957f\u5ea6: ",(0,i.jsx)(n.code,{children:"num1 + num2"})]}),"\n",(0,i.jsxs)(n.li,{children:["\u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\uff0c\u957f\u5ea6\u4e3a",(0,i.jsx)(n.code,{children:"max_length"}),", ",(0,i.jsx)(n.code,{children:"num1[i] * num2[j]"})," \u66f4\u65b0 ",(0,i.jsx)(n.code,{children:"i+j"}),", \u548c ",(0,i.jsx)(n.code,{children:"i+j+1"})," \u8fd9\u4e24\u4e2aindex\u4e0a\u7684\u7ed3\u679c\u3002"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"             1 2 3\n               4 5\n         ---------\n               1 5\n             1 0\n           0 5\n             1 2\n           0 8\n         0 4\n         ---------\n         * * * * *\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u6ce8\u610f"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u4ece\u5c0f\u4f4d\u6570\u5f80\u5927\u4f4d\u6570\u505a\u4e58\u6cd5\u3002\u6bcf\u6b21\u8981\u52a0\u4e0a\u5c0f\u4f4d\u6570\u4e0a\u539fres\u5df2\u7ecf\u6709\u7684\u503c\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u5f53\u7ed3\u679c\u662f0\u7684\u65f6\u5019\u76f4\u63a5lstrip\u4f1astrip\u5b8c\uff0c\u6240\u4ee5return\u8981\u52a0\u4e0aor 0"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def multiply(self, num1, num2):\n        m, n = len(num1), len(num2)\n        res = [0 for _ in range(m + n)]\n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                p1, p2 = i + j, i + j + 1\n                mult = int(num1[i]) * int(num2[j]) + res[p2]\n                res[p1] += mult//10\n                res[p2] = mult%10\n        res = [str(ele) for ele in res]\n        # \u6ce8\u610f\u5f53\u7ed3\u679c\u662f0\u7684\u65f6\u5019\u76f4\u63a5strip\u4f1astrip\u5b8c\uff0c\u6240\u4ee5\u8981or 0\n        return "".join(res).lstrip("0") or "0"\n'})})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function c(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);