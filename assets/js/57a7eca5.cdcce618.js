"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5577],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},80702:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Leetcode/Other/536.536 - Construct Binary Tree from String (Medium)","title":"536.536 - Construct Binary Tree from String (Medium)","description":"LC link","source":"@site/docs/Leetcode/99.Other/536.536 - Construct Binary Tree from String (Medium).md","sourceDirName":"Leetcode/99.Other","slug":"/p/b89bfd42-d30f-4743-8e16-84bc736adb6c","permalink":"/notes/docs/p/b89bfd42-d30f-4743-8e16-84bc736adb6c","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/536.536 - Construct Binary Tree from String (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/b89bfd42-d30f-4743-8e16-84bc736adb6c","slug":"/p/b89bfd42-d30f-4743-8e16-84bc736adb6c"},"sidebar":"tutorialSidebar","previous":{"title":"53.53 - Maximum Subarray - Medium","permalink":"/notes/docs/p/5f2015ae-bedb-4f04-adeb-84a69e283ba2"},"next":{"title":"539.539 - Minimum Time Difference - Medium","permalink":"/notes/docs/p/68bc3941-e303-470c-867b-47dbbf237549"}}');var r=t(74848),i=t(28453);const o={created_at:"2025-10-23",page_link:"/p/b89bfd42-d30f-4743-8e16-84bc736adb6c",slug:"/p/b89bfd42-d30f-4743-8e16-84bc736adb6c"},c=void 0,d={},l=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-string/",children:"LC link"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,r.jsx)(n.p,{children:"You need to construct a binary tree from a string consisting of parenthesis and integers."}),"\n",(0,r.jsx)(n.p,{children:"The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure."}),"\n",(0,r.jsx)(n.p,{children:"You always start to construct the left child node of the parent first if it exists."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: s = "4(2(3)(1))(6(5))"\nOutput: [4,2,6,3,1,5]\n\nInput: s = "-4(2(3)(1))(6(5)(7))"\nOutput: [-4,2,6,3,1,5,7]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsxs)(n.p,{children:["\u4ee5",(0,r.jsx)(n.code,{children:"4(2(3)(1))(5)"}),"\u4e3a\u4f8b\uff0c\u76ee\u6807\u4e8c\u53c9\u6811\uff1a"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"     4\n    / \\\n   2  5\n  / \\\n 3   1\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u9700\u8981\u7684\u53d8\u91cf\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stk"}),": \u4fdd\u5b58\u5f53\u524d\u7684\u6811\uff0c\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u7684\u6811\u4fdd\u5b58\u5728",(0,r.jsx)(n.code,{children:"stk[0].left"}),"\n\u904d\u5386\u5b57\u7b26\u4e32s\uff0c\u7528\u53d8\u91cfc\u8bb0\u5f55\u5f53\u524d\u4f4d\u7f6ei\uff0c\u7136\u540e\u770b\u5f53\u524d\u904d\u5386\u5230\u7684\u5b57\u7b26\u662f\u4ec0\u4e48\uff0c"]}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u9047\u5230\u7684\u662f\u5de6\u62ec\u53f7\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\u7ee7\u7eed\u904d\u5386\uff1b"}),"\n",(0,r.jsxs)(n.li,{children:["\u5982\u679c\u9047\u5230\u7684\u662f\u6570\u5b57\u6216\u8005\u8d1f\u53f7\uff0c\u90a3\u4e48\u5c06\u8fde\u7eed\u7684\u6570\u5b57\u90fd\u627e\u51fa\u6765\uff0c\u7136\u540e\u8f6c\u4e3a\u6574\u578b\u5e76\u65b0\u5efa\u7ed3\u70b9\uff0c\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u6b64\u65f6\u6211\u4eec\u770b\u6808\u9876\u7ed3\u70b9\u6709\u6ca1\u6709\u5de6\u5b50\u8282\u70b9\uff0c"}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5b83\u4e00\u5b9a\u6ca1\u6709\u53f3\u5b50\u8282\u70b9 \uff08\u56e0\u4e3a\u5982\u679c\u4e24\u4e2a\u90fd\u6709\u4e86\uff0c\u4e00\u5b9a\u4f1a\u9047\u5230\u53f3\u62ec\u53f7\u7136\u540epop\uff09\uff0c\u5f53\u524d\u7ed3\u70b9\u5c31\u662f\u6808\u9876\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\uff0c"}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u6808\u9876\u7ed3\u70b9\u6ca1\u6709\u5de6\u5b50\u7ed3\u70b9\uff0c\u90a3\u4e48\u6b64\u7ed3\u70b9\u5c31\u662f\u5176\u5de6\u5b50\u7ed3\u70b9\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u4e4b\u540e\u8981\u5c06\u6b64\u7ed3\u70b9\u538b\u5165\u6808\u4e2d\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u904d\u5386\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u8bf4\u660e\u6808\u9876\u5143\u7d20\u7684\u5b50\u7ed3\u70b9\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86\uff0c\u5c06\u5176\u79fb\u9664\u6808"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"-------------------------------------\nnum \u6ca1\u6709\u8fdb\u5165, stk = [TreeNode()]\n-------------------------------------\n                   None       \n                    /\\           \nnum = 4, stk = [  4  None, TreeNode(4)]\n-------------------------------------\n                    None           4      \n                    / \\           /  \\     \nnum = 2,   stk = [ 4  None,     4  None,  TreeNode(2)]\n                  / \\       \n                 2   None\n-------------------------------------------------------\n                    None           4      \n                    / \\           /       \nnum = 3,   stk = [ 4  None,     2    ,  2, TreeNode(3)]\n                  /            /       / \n                 2            3       3\n                /   \n               3 \n-------------------------------------------------------\n\nmeeting ), pop the last one from the stk:\n\n         None           4      \n         / \\           /       \nstk = [ 4  None,     2    ,  2]\n       /            /       / \n      2            3       3\n     /   \n    3 \n-------------------------------------------------------\n                    None           4      \n                    / \\           /       \nnum = 1,   stk = [ 4  None,     2    ,   2]\n                  /            / \\      / \\\n                 2            3   1    3   1\n                / \\  \n               3   1 \n-------------------------------------------------------            \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def str2tree(self, s: str) -> TreeNode:\n        stk, num = [TreeNode()], ''\n        s += '('\n        i = 0\n        while i < len(s):\n            c = s[i]\n            i += 1\n            if c == ')':\n                stk.pop()\n            elif c != '(': #\u8bf4\u660e\u662f\u6570\u5b57\u6216\u662f - \u53f7\n                while i < len(s) and s[i].isdigit():\n                    c += s[i]\n                    i += 1\n                node = TreeNode(int(c))\n                if stk[-1].left:\n                    stk[-1].right = node\n                else:\n                    stk[-1].left = node\n                stk.append(node)\n        return stk[0].left          \n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);