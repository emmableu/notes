"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9234],{27742:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"Leetcode/Other/102.102 - Binary Tree Level Order Traversal","title":"102.102 - Binary Tree Level Order Traversal","description":"deque \u7684 popleft, appendleft, extendleft api \u6ce8\u610f\u62fc\u5199\u3002","source":"@site/docs/Leetcode/99.Other/102.102 - Binary Tree Level Order Traversal.md","sourceDirName":"Leetcode/99.Other","slug":"/p/5654e366-f003-4afe-b832-a647788336ad","permalink":"/notes/docs/p/5654e366-f003-4afe-b832-a647788336ad","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/102.102 - Binary Tree Level Order Traversal.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/5654e366-f003-4afe-b832-a647788336ad","slug":"/p/5654e366-f003-4afe-b832-a647788336ad"},"sidebar":"tutorialSidebar","previous":{"title":"1014.1014 - Best Sightseeing Pair - Medium","permalink":"/notes/docs/p/0aae1627-6923-46f5-bf6b-f0dde9684131"},"next":{"title":"1027.1027 - Longest Arithmetic Subsequence (Medium)","permalink":"/notes/docs/p/1dc5bd04-4725-434f-ba85-7c84295f23ae"}}');var o=t(74848),l=t(28453);const d={created_at:"2025-10-23",page_link:"/p/5654e366-f003-4afe-b832-a647788336ad",slug:"/p/5654e366-f003-4afe-b832-a647788336ad"},i=void 0,a={},s=[{value:"deque \u7684 <code>popleft</code>, <code>appendleft</code>, <code>extendleft</code> api \u6ce8\u610f\u62fc\u5199\u3002",id:"deque-\u7684-popleft-appendleft-extendleft-api-\u6ce8\u610f\u62fc\u5199",level:2},{value:"Description:",id:"description",level:2},{value:"Rough method:",id:"rough-method",level:2},{value:"\u6ce8\u610f\uff1a",id:"\u6ce8\u610f",level:2},{value:"solution",id:"solution",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"deque-\u7684-popleft-appendleft-extendleft-api-\u6ce8\u610f\u62fc\u5199",children:["deque \u7684 ",(0,o.jsx)(n.code,{children:"popleft"}),", ",(0,o.jsx)(n.code,{children:"appendleft"}),", ",(0,o.jsx)(n.code,{children:"extendleft"})," api \u6ce8\u610f\u62fc\u5199\u3002"]}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,o.jsx)(n.p,{children:"Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\nNode(1,\nNode(2,\nNode(4),\nNode(5)),\nNode(3,\nNode(6),\nNode(7)))"}),"\n",(0,o.jsx)(n.p,{children:"Given binary tree"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[3,9,20,null,null,15,7],\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,o.jsx)(n.p,{children:"return its level order traversal as:\n[\n[3],\n[9,20],\n[15,7]\n]"}),"\n",(0,o.jsx)(n.h2,{id:"rough-method",children:"Rough method:"}),"\n",(0,o.jsx)(n.p,{children:"Use a queue to save the info from the traversal.\nbecause each level is a inner list, every iteration is one level."}),"\n",(0,o.jsx)(n.h2,{id:"\u6ce8\u610f",children:"\u6ce8\u610f\uff1a"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Don't forget the starting condition (if not root)."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"solution",children:"solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import deque        \n\nclass Solution:        \n    def levelOrder(self, root):\n        if not root:\n            return []\n        q = deque([root])\n        res = []\n        while q:\n            cur_res = []\n            q_len = len(q)\n            for _ in range(q_len):\n                node = q.popleft()\n                cur_res.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(cur_res)\n        return res\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var r=t(96540);const o={},l=r.createContext(o);function d(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);