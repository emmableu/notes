"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[764],{16274:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Leetcode/DFS/133.133 - Clone Graph - Medium","title":"133.133 - Clone Graph - Medium","description":"\\"\\"\\"","source":"@site/docs/Leetcode/04.DFS/133.133 - Clone Graph - Medium.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/f8060567-63e2-4828-a8b0-f627fb586493","permalink":"/notes/docs/p/f8060567-63e2-4828-a8b0-f627fb586493","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/133.133 - Clone Graph - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/f8060567-63e2-4828-a8b0-f627fb586493","slug":"/p/f8060567-63e2-4828-a8b0-f627fb586493"},"sidebar":"tutorialSidebar","previous":{"title":"129.129 - Sum Root to Leaf Numbers (Medium)","permalink":"/notes/docs/p/b70e2ad9-e20b-4bab-899c-014046071008"},"next":{"title":"1376.1376 - Time Needed to Inform All Employees - Medium","permalink":"/notes/docs/p/fccb7917-562b-43cd-9b98-e7070d823357"}}');var r=o(74848),s=o(28453);const d={created_at:"2025-10-23",page_link:"/p/f8060567-63e2-4828-a8b0-f627fb586493",slug:"/p/f8060567-63e2-4828-a8b0-f627fb586493"},i=void 0,c={},a=[];function l(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'### code\n```python\n"""\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n"""\nclass Solution:\n    def cloneGraph(self, node):\n        lookup = {}\n        def dfs(node):\n            if not node: # \u540e\u5e8f\u904d\u5386\u7684branch\u7ec8\u6b62\u6761\u4ef6\n                return \n            if node in lookup: # \u540e\u5e8f\u904d\u5386\u7684\u6b63\u5e38return\n                return lookup[node]\n            clone = Node(node.val, [])\n            lookup[node] = clone\n            for n in node.neighbors:\n                clone.neighbors.append(dfs(n))\n            return clone\n        return dfs(node)\n'})})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var t=o(96540);const r={},s=t.createContext(r);function d(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);