"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6033],{20666:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Leetcode/DFS/339.339 - Nested List Weight Sum (Medium)","title":"339.339 - Nested List Weight Sum (Medium)","description":"LC link","source":"@site/docs/Leetcode/04.DFS/339.339 - Nested List Weight Sum (Medium).md","sourceDirName":"Leetcode/04.DFS","slug":"/p/d766a93d-5c65-45f3-8c3f-5b6883e7c9b3","permalink":"/notes/docs/p/d766a93d-5c65-45f3-8c3f-5b6883e7c9b3","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/339.339 - Nested List Weight Sum (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/d766a93d-5c65-45f3-8c3f-5b6883e7c9b3","slug":"/p/d766a93d-5c65-45f3-8c3f-5b6883e7c9b3"},"sidebar":"tutorialSidebar","previous":{"title":"329.329 - Longest Increasing Path in a Matrix - Hard","permalink":"/notes/docs/p/ad846348-acdb-4bb8-a36d-11819c06bb2f"},"next":{"title":"366.366 - Find Leaves of Binary Tree - Medium","permalink":"/notes/docs/p/5da9e8dc-b11e-4168-b956-2d78c6630d5c"}}');var i=n(74848),d=n(28453);const r={created_at:"2025-10-23",page_link:"/p/d766a93d-5c65-45f3-8c3f-5b6883e7c9b3",slug:"/p/d766a93d-5c65-45f3-8c3f-5b6883e7c9b3"},l=void 0,o={},a=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/nested-list-weight-sum/",children:"LC link"})}),"\n",(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(t.p,{children:"You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists."}),"\n",(0,i.jsxs)(t.p,{children:["The depth of an integer is the number of lists that it is inside of. For example, the nested list ",(0,i.jsx)(t.code,{children:"[1,[2,2],[[3],2],1]"})," has each integer's value set to its depth."]}),"\n",(0,i.jsxs)(t.p,{children:["Return the sum of each integer in ",(0,i.jsx)(t.code,{children:"nestedList"})," multiplied by its depth."]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Example 1:\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: 10\nExplanation: Four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.\n\nExample 2:\nInput: nestedList = [1,[4,[6]]]\nOutput: 27\nExplanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.\n\nExample 3:\nInput: nestedList = [0]\nOutput: 0\n"})}),"\n",(0,i.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class Solution:\n    def depthSum(self, nestedList: List[NestedInteger]) -> int:\n        res = 0\n        def dfs(depth, ele):\n            nonlocal res\n            if ele.isInteger():\n                res += ele.getInteger() * depth\n                return\n            for child in ele.getList():\n                dfs(depth + 1, child)\n        for ele in nestedList:\n            dfs(1, ele)\n        return res\n# """\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# """\n#class NestedInteger:\n#    def __init__(self, value=None):\n#        """\n#        If value is not specified, initializes an empty list.\n#        Otherwise initializes a single integer equal to value.\n#        """\n#\n#    def isInteger(self):\n#        """\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        """\n#\n#    def add(self, elem):\n#        """\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n#        :rtype void\n#        """\n#\n#    def setInteger(self, value):\n#        """\n#        Set this NestedInteger to hold a single integer equal to value.\n#        :rtype void\n#        """\n#\n#    def getInteger(self):\n#        """\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        """\n#\n#    def getList(self):\n#        """\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        """\n'})})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(96540);const i={},d=s.createContext(i);function r(e){const t=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);