"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7162],{21935:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/Other/637.637 - Average of Levels in Binary Tree (Easy)","title":"637.637 - Average of Levels in Binary Tree (Easy)","description":"LC link","source":"@site/docs/Leetcode/99.Other/637.637 - Average of Levels in Binary Tree (Easy).md","sourceDirName":"Leetcode/99.Other","slug":"/p/abdb3e21-7235-4596-8b56-a2cf17a24223","permalink":"/notes/docs/p/abdb3e21-7235-4596-8b56-a2cf17a24223","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/637.637 - Average of Levels in Binary Tree (Easy).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/abdb3e21-7235-4596-8b56-a2cf17a24223","slug":"/p/abdb3e21-7235-4596-8b56-a2cf17a24223"},"sidebar":"tutorialSidebar","previous":{"title":"636.636 - Exclusive Time of Functions - Medium","permalink":"/notes/docs/p/2630d930-c54b-4632-9b6b-a863131e0fd0"},"next":{"title":"64.64 - Minimum Path Sum - Medium","permalink":"/notes/docs/p/ae0422df-cda8-45f5-a2ee-d899d3942a0a"}}');var s=t(74848),a=t(28453);const o={created_at:"2025-10-23",page_link:"/p/abdb3e21-7235-4596-8b56-a2cf17a24223",slug:"/p/abdb3e21-7235-4596-8b56-a2cf17a24223"},i=void 0,l={},c=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/average-of-levels-in-binary-tree/",children:"LC link"})}),"\n",(0,s.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811, \u8fd4\u56de\u4e00\u4e2a\u7531\u6bcf\u5c42\u8282\u70b9\u5e73\u5747\u503c\u7ec4\u6210\u7684\u6570\u7ec4\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\xa0"}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b 1\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u8f93\u5165\uff1a\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\u8f93\u51fa\uff1a[3, 14.5, 11]\n\u89e3\u91ca\uff1a\n\u7b2c 0 \u5c42\u7684\u5e73\u5747\u503c\u662f 3 ,  \u7b2c1\u5c42\u662f 14.5 , \u7b2c2\u5c42\u662f 11 \u3002\u56e0\u6b64\u8fd4\u56de [3, 14.5, 11] \u3002\n"})}),"\n",(0,s.jsx)(n.p,{children:"Constraints:"}),"\n",(0,s.jsx)(n.p,{children:"\u8282\u70b9\u503c\u7684\u8303\u56f4\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import deque\nclass Solution:\n    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:\n        q = deque([root])\n        res = []\n        level_n, level_sum = 0, 0\n        while q:\n            size = len(q)\n            for _ in range(size):\n                node = q.popleft()\n                level_n += 1\n                level_sum += node.val\n                if node.left: q.append(node.left)\n                if node.right: q.append(node.right)\n                \n            res.append(level_sum/level_n)\n            level_n, level_sum = 0, 0\n        return res\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(96540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);