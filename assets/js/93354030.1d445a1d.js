"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9694],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(96540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},96032:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Leetcode/DFS/863.863 - All Nodes Distance K in Binary Tree (Medium)","title":"863.863 - All Nodes Distance K in Binary Tree (Medium)","description":"Description","source":"@site/docs/Leetcode/04.DFS/863.863 - All Nodes Distance K in Binary Tree (Medium).md","sourceDirName":"Leetcode/04.DFS","slug":"/p/0682c370-65b8-4155-a0a4-001439c53835","permalink":"/notes/docs/p/0682c370-65b8-4155-a0a4-001439c53835","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/863.863 - All Nodes Distance K in Binary Tree (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/0682c370-65b8-4155-a0a4-001439c53835","slug":"/p/0682c370-65b8-4155-a0a4-001439c53835"},"sidebar":"tutorialSidebar","previous":{"title":"827.827 - Making A Large Island - Hard","permalink":"/notes/docs/p/da1058f5-1a24-4b75-80b0-41016eac2687"},"next":{"title":"934.934 - Shortest Bridge - Medium","permalink":"/notes/docs/p/5870142d-451f-4062-8ed9-e4b16c6a6964"}}');var a=t(74848),i=t(28453);const o={created_at:"2025-10-23",page_link:"/p/0682c370-65b8-4155-a0a4-001439c53835",slug:"/p/0682c370-65b8-4155-a0a4-001439c53835"},s=void 0,l={},d=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node."}),"\n",(0,a.jsx)(n.p,{children:"You can return the answer in any order."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Example 1:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\nOutput: [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\n\nExample 2:\nInput: root = [1], target = 1, k = 3\nOutput: []\n"})}),"\n",(0,a.jsx)(n.p,{children:"constraints:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"All the values Node.val are unique."}),"\n",(0,a.jsx)(n.li,{children:"target is the value of one of the nodes in the tree."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsx)(n.p,{children:"\u628a\u6811\u8f6c\u5316\u6210\u56fe"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def distanceK(self, root, target, k):\n        graph = defaultdict(list)\n        def build_graph(root, graph):\n            if not root:\n                return None\n            left = build_graph(root.left, graph)\n            right = build_graph(root.right, graph)\n            if left:\n                graph[root.val].append(left)\n                graph[left].append(root.val)\n            if right:\n                graph[root.val].append(right)\n                graph[right].append(root.val)               \n            return root.val\n\n        build_graph(root, graph)\n        res = []\n        def dfs(res, vis, ele, k):\n            vis.add(ele) \n            #\u6709\u4e9b\u6a21\u7248\u4f1a\u628avis.add()\u5199\u5728dfs\u4e4b\u524d(\u63d2\u5165\u572827-28\u884c\uff09\uff0c\n            #\u4f46\u662f\u5199\u5728\u8fd9\u91cc\u66f4\u597d\u7406\u89e3\uff0c\u76f8\u5f53\u4e8e\u62d3\u6251\u6392\u5e8f\u91cc\u9762\u7684visiting\n            if k == 0:\n                res.append(ele)\n                return\n            for child in graph[ele]:\n                if child not in vis:\n                    dfs(res, vis, child, k-1)\n\n            \n        dfs(res, set(), target.val, k)\n        return res\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);