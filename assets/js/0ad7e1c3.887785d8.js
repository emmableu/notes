"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9625],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(96540);const c={},a=s.createContext(c);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},78445:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Leetcode/Find All Anagrams in a String","title":"Find All Anagrams in a String","description":"","source":"@site/docs/Leetcode/438. Find All Anagrams in a String.md","sourceDirName":"Leetcode","slug":"/p/6a95b0dd-0832-40be-a77e-ad1768428c2f","permalink":"/notes/docs/p/6a95b0dd-0832-40be-a77e-ad1768428c2f","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/438. Find All Anagrams in a String.md","tags":[],"version":"current","sidebarPosition":438,"frontMatter":{"created_at":"2025-10-23","page_link":"/p/6a95b0dd-0832-40be-a77e-ad1768428c2f","slug":"/p/6a95b0dd-0832-40be-a77e-ad1768428c2f"},"sidebar":"tutorialSidebar","previous":{"title":"Reverse Linked List","permalink":"/notes/docs/p/7507e16b-25d5-4c3a-b654-68f2386eea19"},"next":{"title":"Knight Probability in Chessboard","permalink":"/notes/docs/p/ddd65953-1b9a-428e-9594-6126c34e1706"}}');var c=t(74848),a=t(28453);const i={created_at:"2025-10-23",page_link:"/p/6a95b0dd-0832-40be-a77e-ad1768428c2f",slug:"/p/6a95b0dd-0832-40be-a77e-ad1768428c2f"},r=void 0,o={},d=[];function l(e){const n={code:"code",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def __init__(self):\n        chars = 'abcdefghijklmnopqrstuvwxyz'\n        self.itoc = list(chars)\n        self.ctoi = {c:i for i, c in enumerate(self.itoc)}\n        \n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        check = [0 for _ in range(len(self.itoc))]\n        for c in p:\n            check[self.ctoi[c]] += 1\n        res = []\n        l, r = -1, -1 # left open, right close  \u5de6\u5f00\u53f3\u95ed\n        while r < len(s) - 1:\n            r += 1\n            c = s[r]\n            check[self.ctoi[c]] -= 1\n            while check[self.ctoi[c]] < 0:\n                l += 1\n                check[self.ctoi[s[l]]] += 1\n            if l != r and sum(check) == 0:\n                res.append(l + 1)\n        return res\n\n\n        \n"})})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);