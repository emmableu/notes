"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9279],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(96540);const r={},c=s.createContext(r);function o(e){const t=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:t},e.children)}},31887:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Leetcode/Other/642.642 - Design Search Autocomplete System - Hard","title":"642.642 - Design Search Autocomplete System - Hard","description":"\u6ce8\u610f\uff1a","source":"@site/docs/Leetcode/99.Other/642.642 - Design Search Autocomplete System - Hard.md","sourceDirName":"Leetcode/99.Other","slug":"/p/8fefa4c4-c707-4089-9ad6-224c02a36db1","permalink":"/notes/docs/p/8fefa4c4-c707-4089-9ad6-224c02a36db1","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/642.642 - Design Search Autocomplete System - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/8fefa4c4-c707-4089-9ad6-224c02a36db1","slug":"/p/8fefa4c4-c707-4089-9ad6-224c02a36db1"},"sidebar":"tutorialSidebar","previous":{"title":"64.64 - Minimum Path Sum - Medium","permalink":"/notes/docs/p/ae0422df-cda8-45f5-a2ee-d899d3942a0a"},"next":{"title":"646.646 - Maximum Length of Pair Chain","permalink":"/notes/docs/p/6c761704-297f-488b-8d78-5d1ff13a62aa"}}');var r=n(74848),c=n(28453);const o={created_at:"2025-10-23",page_link:"/p/8fefa4c4-c707-4089-9ad6-224c02a36db1",slug:"/p/8fefa4c4-c707-4089-9ad6-224c02a36db1"},i=void 0,a={},l=[];function d(e){const t={code:"code",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208121340199.png",alt:""}),"\n",(0,r.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208121341845.png",alt:""})]}),"\n",(0,r.jsx)(t.p,{children:"\u6ce8\u610f\uff1a"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"ord(' ') = 32, ord('a') = 97"}),"\n",(0,r.jsx)(t.li,{children:"\u4e00\u4e2a\u4e0d\u5230 len = 3 \u7684array \u5199 a[:3] \u8fd9\u6837\u4e0d\u4f1a\u62a5\u9519\u3002"}),"\n",(0,r.jsxs)(t.li,{children:["\u7a7a\u5b57\u7b26 ",(0,r.jsx)(t.code,{children:'" "'})," \u53ef\u4ee5\u4f5c\u4e3adict \u7684key\uff0c \u4e0d\u4f1a\u62a5\u9519\u3002"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:">>> a = [0, 1]\n>>> a[:3]\n[0, 1]\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'class AutocompleteSystem:\n\n\tdef __init__(self, sentences: List[str], times: List[int]):\n\t\tself.root = TrieNode()\n\t\tfor s, time in zip(sentences, times):\n\t\t\tself.put(s, time)\n\t\tself.cur_query = []\n\t\tself.cur_node = self.root\n\n\tdef put(self, s:str, time: int) -> None:\n\t\tp = self.root\n\t\tfor ch in s:\n\t\t\tif not p.children.get(ch):\n\t\t\t\tp.children[ch] = TrieNode()\n\t\t\tp = p.children[ch]\n\t\tp.val = time\n\n\tdef _dfs_get_keys(self, node, cur, res):\n\t\tif not node:\n\t\t\treturn\n\t\tif node.val != 0:\n\t\t\tres.append(("".join(cur), node.val))\n\t\tfor k, v in node.children.items():\n\t\t\tcur.append(k)\n\t\t\tself._dfs_get_keys(v, cur, res)\n\t\t\tcur.pop()\n\t\n\tdef input(self, c: str) -> List[str]:\n\t\tif c == "#":\n\t\t\tself.cur_node.val += 1\n\t\t\tself.cur_node = self.root\n\t\t\tself.cur_query = []\n\t\t\treturn []\n\t\tself.cur_query.append(c)\n\t\tif not self.cur_node.children.get(c):\n\t\t\tself.cur_node.children[c] = TrieNode()\n\t\t\tself.cur_node = self.cur_node.children[c] \n\t\t\treturn []\n\t\tself.cur_node = self.cur_node.children[c] \n\t\tres = []\n\t\tself._dfs_get_keys(self.cur_node, self.cur_query, res)\n\t\tprint("------- input: ", c)\n\t\tprint(res)\n\t\tres.sort(key = lambda ele: (-ele[1], ele[0]))\n\t\tprint(res)\n\t\treturn [ele[0] for ele in res[:3]]\n\nclass TrieNode:\n\tdef __init__(self):\n\t\tself.val = 0\n\t\tself.children = {}\n\n# Your AutocompleteSystem object will be instantiated and called as such:\n# obj = AutocompleteSystem(sentences, times)\n# param_1 = obj.input(c)\n'})})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);