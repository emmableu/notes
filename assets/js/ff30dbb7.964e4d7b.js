"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7213],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var a=n(96540);const o={},i=a.createContext(o);function r(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:t},e.children)}},65943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Leetcode/Other/1854.1854 - Maximum Population Year - Easy","title":"1854.1854 - Maximum Population Year - Easy","description":"add tag: line sweep","source":"@site/docs/Leetcode/99.Other/1854.1854 - Maximum Population Year - Easy.md","sourceDirName":"Leetcode/99.Other","slug":"/p/9408710d-5035-4ec1-a0ae-fd1677a51e83","permalink":"/notes/docs/p/9408710d-5035-4ec1-a0ae-fd1677a51e83","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1854.1854 - Maximum Population Year - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/9408710d-5035-4ec1-a0ae-fd1677a51e83","slug":"/p/9408710d-5035-4ec1-a0ae-fd1677a51e83"},"sidebar":"tutorialSidebar","previous":{"title":"1762.1762 - Buildings With an Ocean View (Medium)","permalink":"/notes/docs/p/2e5d2e46-6474-4fac-bc30-79c99de1b5fa"},"next":{"title":"1868.1868 - Product of Two Run-Length Encoded Arrays (Medium)","permalink":"/notes/docs/p/06ebf483-dcfb-4ced-81a2-1fa1e71205f4"}}');var o=n(74848),i=n(28453);const r={created_at:"2025-10-23",page_link:"/p/9408710d-5035-4ec1-a0ae-fd1677a51e83",slug:"/p/9408710d-5035-4ec1-a0ae-fd1677a51e83"},s=void 0,p={},c=[{value:"Solution (O(n))",id:"solution-on",level:2}];function l(e){const t={a:"a",br:"br",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"add tag: line sweep"}),"\n",(0,o.jsx)(t.p,{children:"tags: [Array, Counting]"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.cn/problems/maximum-population-year/",children:"LC link"})}),"\n",(0,o.jsx)(t.img,{width:"693",alt:"image",src:"https://user-images.githubusercontent.com/41789327/179913043-f78e0b3f-789c-4361-a529-e04747003564.png"}),"\n",(0,o.jsxs)(t.p,{children:["Here we are given birth & death year of persons.",(0,o.jsx)(t.br,{}),"\nImagine this as a line , when a person born , population of that year +1 and when he expires population decreases by 1.",(0,o.jsx)(t.br,{}),"\n",(0,o.jsx)(t.img,{width:"648",alt:"image",src:"https://user-images.githubusercontent.com/41789327/179913576-b69c6846-0eaa-407a-90fe-d69968393225.png"}),"\nPlot the population year on a number line.",(0,o.jsx)(t.br,{}),"\nWhen a person is born increment by +1 and when he expire decrement by -1 .",(0,o.jsx)(t.br,{}),"\nScan from left and accumulate the population, everytime check if current population is greater than global max , if yes update population count and year both.",(0,o.jsx)(t.br,{}),"\nThis scanning from left to right is line sweep."]}),"\n",(0,o.jsx)(t.h2,{id:"solution-on",children:"Solution (O(n))"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"class Solution:\n\tdef maximumPopulation(self, logs):\n\t\tpopulation = [0] * 2051\n\t\tfor log in logs:\n\t\t\tpopulation[log[0]] += 1\n\t\t\tpopulation[log[1]] -= 1\n\t\t# \u4ee5\u4e0a\u662f\u5f97\u5230\u6bcf\u5e74\u7684delta\n\t\tmax_pop = [0, 0]\n\t\tfor i in range(1950, 2051):\n\t\t\tpopulation[i] += population[i - 1]\n\t\t\tif population[i] > max_pop[0]:\n\t\t\t\tmax_pop = [population[i], i]\n\t\treturn max_pop[1]\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);