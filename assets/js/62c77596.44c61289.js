"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2448],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(96540);const c={},o=t.createContext(c);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),t.createElement(o.Provider,{value:n},e.children)}},35089:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Leetcode/Other/224.224 - Basic Calculator - Hard","title":"224.224 - Basic Calculator - Hard","description":"solution: \u53cc\u6808","source":"@site/docs/Leetcode/99.Other/224.224 - Basic Calculator - Hard.md","sourceDirName":"Leetcode/99.Other","slug":"/p/91a1e32c-6e6e-49c7-84f7-f196b0f24c1b","permalink":"/notes/docs/p/91a1e32c-6e6e-49c7-84f7-f196b0f24c1b","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/224.224 - Basic Calculator - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/91a1e32c-6e6e-49c7-84f7-f196b0f24c1b","slug":"/p/91a1e32c-6e6e-49c7-84f7-f196b0f24c1b"},"sidebar":"tutorialSidebar","previous":{"title":"2235.2235 - Add Two Integers - Easy","permalink":"/notes/docs/p/62e0c048-ac73-4bc1-a4f8-91a46f414f8c"},"next":{"title":"226.226 - Invert Binary Tree - Easy","permalink":"/notes/docs/p/8771bb93-0f01-476a-93ed-44d6a4d84a02"}}');var c=s(74848),o=s(28453);const a={created_at:"2025-10-23",page_link:"/p/91a1e32c-6e6e-49c7-84f7-f196b0f24c1b",slug:"/p/91a1e32c-6e6e-49c7-84f7-f196b0f24c1b"},i=void 0,r={},l=[{value:"solution: \u53cc\u6808",id:"solution-\u53cc\u6808",level:2}];function p(e){const n={code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/224-0.png",alt:""})}),"\n",(0,c.jsx)(n.h2,{id:"solution-\u53cc\u6808",children:"solution: \u53cc\u6808"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/224-1.png",alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def calculate(self, s):\n        s = "(" + s.replace(" ", "").replace("(-", "(0-") + ")"\n        ops, nums = [], []\n        i = 0\n        while i < len(s):\n            c = s[i]\n            i += 1\n            if c.isdigit():\n                while i < len(s) and s[i].isdigit():\n                    c += s[i]\n                    i += 1\n                nums.append(int(c))\n            elif c == "(":\n                ops.append(c)\n            elif c == ")":\n                while ops and ops[-1] != "(":\n                    self.calc(nums, ops)\n                ops.pop() # \u5168\u90fd\u8ba1\u7b97\u5b8c\u540e\uff0cpop\u51fa\u5de6\u62ec\u53f7\n            elif c in "+-":\n                # \u8981\u628aops\u91cc\u9762\u6709\u7684,\u5728\uff08\u540e\u9762\u7684\u5148\u7b97\u4e86\n                while ops and ops[-1] != "(":\n                    self.calc(nums, ops)\n                ops.append(c)\n        return nums[0]\n\n\n    def calc(self, nums, ops):\n        op, y, x = ops.pop(), nums.pop(), nums.pop() if nums else 0\n        if op == "+":\n            res = x + y\n        elif op == "-":\n            res = x - y\n        nums.append(res)\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(p,{...e})}):p(e)}}}]);