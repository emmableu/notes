"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5024],{4883:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Leetcode/Other/1650.1650 - Lowest Common Ancestor of a Binary Tree III (Medium)","title":"1650.1650 - Lowest Common Ancestor of a Binary Tree III (Medium)","description":"LC link","source":"@site/docs/Leetcode/99.Other/1650.1650 - Lowest Common Ancestor of a Binary Tree III (Medium).md","sourceDirName":"Leetcode/99.Other","slug":"/p/dec89f6b-39ac-4b75-ab52-f9208b11d0ab","permalink":"/notes/docs/p/dec89f6b-39ac-4b75-ab52-f9208b11d0ab","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1650.1650 - Lowest Common Ancestor of a Binary Tree III (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/dec89f6b-39ac-4b75-ab52-f9208b11d0ab","slug":"/p/dec89f6b-39ac-4b75-ab52-f9208b11d0ab"},"sidebar":"tutorialSidebar","previous":{"title":"1644.1644 - Lowest Common Ancestor of a Binary Tree II (Medium)","permalink":"/notes/docs/p/cba4f4d7-8684-47f8-a59e-0e946aaae325"},"next":{"title":"1699.1699 - Number of Calls Between Two Persons (Medium)","permalink":"/notes/docs/p/a99dd339-9800-44d6-a059-630050115e58"}}');var r=o(74848),s=o(28453);const i={created_at:"2025-10-23",page_link:"/p/dec89f6b-39ac-4b75-ab52-f9208b11d0ab",slug:"/p/dec89f6b-39ac-4b75-ab52-f9208b11d0ab"},a=void 0,d={},l=[{value:"\u548c 236 \u533a\u522b\uff1a",id:"\u548c-236-\u533a\u522b",level:2},{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solutions (both are O(n), 1 is preferred)",id:"solutions-both-are-on-1-is-preferred",level:2},{value:"Solution 1 (preferred)",id:"solution-1-preferred",level:3},{value:"Solution 2 (in case requested)",id:"solution-2-in-case-requested",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii",children:"LC link"})}),"\n",(0,r.jsx)(n.h2,{id:"\u548c-236-\u533a\u522b",children:"\u548c 236 \u533a\u522b\uff1a"}),"\n",(0,r.jsxs)(n.p,{children:["\u8fd9\u4e2a\u6709\u5411\u4e0a\u7684",(0,r.jsx)(n.code,{children:"parent"}),"\u6307\u9488\uff0c 236 \u53ea\u6709\u6807\u51c6\u7684",(0,r.jsx)(n.code,{children:"left"}),",",(0,r.jsx)(n.code,{children:"right"}),"\u6307\u9488\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,r.jsx)(n.p,{children:"Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA)."}),"\n",(0,r.jsx)(n.p,{children:"Each node will have a reference to its parent node. The definition for Node is below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"class Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:'According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)."'}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"solutions-both-are-on-1-is-preferred",children:"Solutions (both are O(n), 1 is preferred)"}),"\n",(0,r.jsx)(n.h3,{id:"solution-1-preferred",children:"Solution 1 (preferred)"}),"\n",(0,r.jsx)(n.p,{children:"\u5230\u5934\u4ee5\u540e\u53bb\u53e6\u4e00\u8fb9\u91cd\u6765\u6cd5"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1 ------o---    1 + 2:  ------o-----o---\n2     --o---    2 + 1:  --o---------o--- \n"})}),"\n",(0,r.jsx)(n.p,{children:"o \u4e4b\u540e\u7684\u957f\u5ea6 (o---) \u76f8\u7b49, \u6240\u4ee5\u4e24\u4e2apointer\u6700\u7ec8\u4f1ameet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':\n        a, b = p, q\n        while a != b: #\u6ce8\u610f\u5faa\u73af\u505c\u6b62\u6761\u4ef6\n            a = a.parent if a.parent else q\n            b = b.parent if b.parent else p\n        return a        \n"})}),"\n",(0,r.jsx)(n.h3,{id:"solution-2-in-case-requested",children:"Solution 2 (in case requested)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\"\"\"\nclass Solution:\n    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':\n        path = set()\n        while p:\n            path.add(p)\n            p = p.parent \n        while q not in path:\n            q = q.parent \n        return q\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(96540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);