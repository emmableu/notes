"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8047],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(96540);const l={},i=o.createContext(l);function r(e){const t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),o.createElement(i.Provider,{value:t},e.children)}},42633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"Leetcode/DFS/114.114 - Flatten Binary Tree to Linked List (Medium)","title":"114.114 - Flatten Binary Tree to Linked List (Medium)","description":"leetcode link","source":"@site/docs/Leetcode/04.DFS/114.114 - Flatten Binary Tree to Linked List (Medium).md","sourceDirName":"Leetcode/04.DFS","slug":"/p/27802d20-713f-4587-9118-3dd72b253fe8","permalink":"/notes/docs/p/27802d20-713f-4587-9118-3dd72b253fe8","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/114.114 - Flatten Binary Tree to Linked List (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/27802d20-713f-4587-9118-3dd72b253fe8","slug":"/p/27802d20-713f-4587-9118-3dd72b253fe8"},"sidebar":"tutorialSidebar","previous":{"title":"1110.1110 - Delete Nodes And Return Forest - Medium","permalink":"/notes/docs/p/e4b19794-660e-408e-ae6d-4b553bc8f7c4"},"next":{"title":"129.129 - Sum Root to Leaf Numbers (Medium)","permalink":"/notes/docs/p/b70e2ad9-e20b-4bab-899c-014046071008"}}');var l=n(74848),i=n(28453);const r={created_at:"2025-10-23",page_link:"/p/27802d20-713f-4587-9118-3dd72b253fe8",slug:"/p/27802d20-713f-4587-9118-3dd72b253fe8"},s=void 0,d={},a=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution (\u9012\u5f52)",id:"solution-\u9012\u5f52",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.a,{href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/",children:"leetcode link"}),"\n",(0,l.jsx)(t.a,{href:"https://labuladong.gitbook.io/algo/mu-lu-ye/er-cha-shu-xi-lie-1",children:"good solution link"})]}),"\n",(0,l.jsx)(t.h2,{id:"description",children:"Description:"}),"\n",(0,l.jsx)(t.p,{children:'Given the root of a binary tree, flatten the tree into a "linked list":'}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:'The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.'}),"\n",(0,l.jsx)(t.li,{children:'The "linked list" should be in the same order as a pre-order traversal of the binary tree.'}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"Example 1:\nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n\nExample 2:\nInput: root = []\nOutput: []\n\nExample 3:\nInput: root = [0]\nOutput: [0]\n"})}),"\n",(0,l.jsx)(t.h2,{id:"solution-\u9012\u5f52",children:"Solution (\u9012\u5f52)"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsx)(t.li,{children:"\u5c06 root \u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u62c9\u5e73\u3002"}),"\n",(0,l.jsx)(t.li,{children:"\u5c06 root \u7684\u53f3\u5b50\u6811\u63a5\u5230\u5de6\u5b50\u6811\u4e0b\u65b9\uff0c\u7136\u540e\u5c06\u6574\u4e2a\u5de6\u5b50\u6811\u4f5c\u4e3a\u53f3\u5b50\u6811\u3002"}),"\n"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def flatten(self, root):\n        if not root: \n            return None\n        self.flatten(root.left)\n        self.flatten(root.right)\n\n        # \u540e\u5e8f\u904d\u5386\u4f4d\u7f6e\n        # 1\uff0c \u5de6\u53f3\u5b50\u6811\u5df2\u7ecf\u88ab\u62c9\u5e73\u6210\u94fe\u8868\n        left = root.left\n        right = root.right\n\n        # 2. \u628a\u5de6\u5b50\u6811\u4f5c\u4e3a\u53f3\u5b50\u6811\n        root.left = None\n        root.right = left\n\n        # 3. \u628a\u539f\u5148\u7684\u53f3\u5b50\u6811\u63a5\u5230\u5f53\u524d\u53f3\u5b50\u6811\u7684\u672b\u7aef\n        p = root\n        while p.right:\n            p = p.right \n        p.right = right\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);