"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9880],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},89953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/Other/900.900 - RLE Iterator - Medium","title":"900.900 - RLE Iterator - Medium","description":"tags: [Array, Design, Counting, Iterator]","source":"@site/docs/Leetcode/99.Other/900.900 - RLE Iterator - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/2f72f3cd-03a1-4213-ae1b-1e6bc8a704db","permalink":"/notes/docs/p/2f72f3cd-03a1-4213-ae1b-1e6bc8a704db","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/900.900 - RLE Iterator - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/2f72f3cd-03a1-4213-ae1b-1e6bc8a704db","slug":"/p/2f72f3cd-03a1-4213-ae1b-1e6bc8a704db"},"sidebar":"tutorialSidebar","previous":{"title":"896.896 - Monotonic Array (Easy)","permalink":"/notes/docs/p/6dfe3717-daa1-4ee2-b7e6-75538dabe385"},"next":{"title":"918.918 - Maximum Sum Circular Subarray - Medium","permalink":"/notes/docs/p/f13385dd-7786-46bf-9fcb-a5a8a2746ea7"}}');var a=n(74848),s=n(28453);const i={created_at:"2025-10-23",page_link:"/p/2f72f3cd-03a1-4213-ae1b-1e6bc8a704db",slug:"/p/2f72f3cd-03a1-4213-ae1b-1e6bc8a704db"},o=void 0,d={},c=[];function l(e){const t={a:"a",code:"code",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"tags: [Array, Design, Counting, Iterator]"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.cn/problems/rle-iterator/",children:"LC Link"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208101541449.png",alt:""})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class RLEIterator:\n\tdef __init__(self, encoding: List[int]):\n\t\tself.arr = encoding\n\t\tself.idx = 0 # [3,8,0,9,2,5]: \u5bf9\u5e94 idx = [0, 1, 2, 3, 4, 5]\n\t\t\n\tdef next(self, n: int) -> int:\n\t\tif self.idx >= len(self.arr): # \u6ce8\u610f\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u4e86\n\t\t\treturn -1\n\t\tarr_idx = self.arr[self.idx] \n\t\twhile arr_idx < n:\n\t\t\tself.arr[self.idx] = 0\n\t\t\tself.idx += 2\n\t\t\tif self.idx >= len(self.arr): # \u6ce8\u610f\u8fd9\u4e00\u6b65\u4e0d\u8981\u5fd8\u4e86\n\t\t\t\treturn -1\n\t\t\tarr_idx += self.arr[self.idx] \n\t\t\t\n\t\tself.arr[self.idx] = arr_idx - n\n\t\t\n\t\treturn self.arr[self.idx + 1]\n"})})]})}function f(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);