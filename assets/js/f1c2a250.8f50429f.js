"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7241],{24399:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Leetcode/Other/545.545 - Boundary of Binary Tree - Medium","title":"545.545 - Boundary of Binary Tree - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/545.545 - Boundary of Binary Tree - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/36250b62-a0ac-42ba-956d-55aa9e167782","permalink":"/notes/docs/p/36250b62-a0ac-42ba-956d-55aa9e167782","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/545.545 - Boundary of Binary Tree - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/36250b62-a0ac-42ba-956d-55aa9e167782","slug":"/p/36250b62-a0ac-42ba-956d-55aa9e167782"},"sidebar":"tutorialSidebar","previous":{"title":"543.543 - Diameter of Binary Tree - Easy","permalink":"/notes/docs/p/7bcd10c8-5bc7-4df0-bed8-87bc45e0b02a"},"next":{"title":"548.548 - Split Array with Equal Sum (Hard)","permalink":"/notes/docs/p/be6ecbd4-8247-47c2-b395-2f416eeeef0d"}}');var r=t(74848),d=t(28453);const a={created_at:"2025-10-23",page_link:"/p/36250b62-a0ac-42ba-956d-55aa9e167782",slug:"/p/36250b62-a0ac-42ba-956d-55aa9e167782"},s=void 0,i={},l=[{value:"Solution:",id:"solution",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/boundary-of-binary-tree/",children:"LC link"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/545-0.png",alt:""}),"\n",(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/545-1.png",alt:""})]}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution:"}),"\n",(0,r.jsx)(n.p,{children:"\u4e09\u4e2a\u65b9\u5411(left, leaves, right) \u6309\u987a\u5e8f\u505adfs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dfs_left"}),": \u524d\u5e8f\u904d\u5386"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dfs_leaves"}),": \u4e2d\u5e8f\u904d\u5386"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dfs_right"}),": \u540e\u5e8f\u904d\u5386"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution(object):\n    def boundaryOfBinaryTree(self, root):\n        def dfs_left(node):\n            if not node or not node.left and not node.right:\n                return\n            boundary.append(node.val)\n            if node.left:\n                dfs_left(node.left)\n            else:\n                dfs_left(node.right)\n\n        def dfs_leaves(node):\n            if not node:\n                return\n            dfs_leaves(node.left)\n            if node != root and not node.left and not node.right:\n                boundary.append(node.val)\n            dfs_leaves(node.right)\n\n        def dfs_right(node):\n            if not node or not node.left and not node.right:\n                return\n            if node.right:\n                dfs_right(node.right)\n            else:\n                dfs_right(node.left)\n            boundary.append(node.val)\n\n        if not root:\n            return []\n        boundary = [root.val]\n        dfs_left(root.left)\n        dfs_leaves(root)\n        dfs_right(root.right)\n        return boundary\n"})})]})}function f(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(96540);const r={},d=o.createContext(r);function a(e){const n=o.useContext(d);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);