"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7138],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var a=i(96540);const t={},s=a.createContext(t);function o(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},91895:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Leetcode/DFS/721.721 - Accounts Merge - Medium","title":"721.721 - Accounts Merge - Medium","description":"LC link","source":"@site/docs/Leetcode/04.DFS/721.721 - Accounts Merge - Medium.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/f33b9608-98f7-4eee-a720-0743c231be86","permalink":"/notes/docs/p/f33b9608-98f7-4eee-a720-0743c231be86","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/721.721 - Accounts Merge - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/f33b9608-98f7-4eee-a720-0743c231be86","slug":"/p/f33b9608-98f7-4eee-a720-0743c231be86"},"sidebar":"tutorialSidebar","previous":{"title":"695.695 - Max Area of Island - Medium","permalink":"/notes/docs/p/a0665f65-c5ab-4d73-bbcd-ff88c10f6e0b"},"next":{"title":"78.78 - Subsets - Medium","permalink":"/notes/docs/p/64735d6d-9a9d-4f84-b425-3628e052503d"}}');var t=i(74848),s=i(28453);const o={created_at:"2025-10-23",page_link:"/p/f33b9608-98f7-4eee-a720-0743c231be86",slug:"/p/f33b9608-98f7-4eee-a720-0743c231be86"},r=void 0,l={},c=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Method 1: Union Find (preferred)",id:"method-1-union-find-preferred",level:2},{value:"\u672c\u9898\u7684\u5177\u4f53\u65b9\u6cd5\uff1a",id:"\u672c\u9898\u7684\u5177\u4f53\u65b9\u6cd5",level:3},{value:"\u6b63\u786esolution\uff1a",id:"\u6b63\u786esolution",level:3},{value:"solution 2: DFS (less prefered)",id:"solution-2-dfs-less-prefered",level:2},{value:"\u4e00\u4e2aunion find\u9519\u8bef\u7684solution\uff1a",id:"\u4e00\u4e2aunion-find\u9519\u8bef\u7684solution",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode-cn.com/problems/accounts-merge/",children:"LC link"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,t.jsx)(n.p,{children:"Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account."}),"\n",(0,t.jsx)(n.p,{children:"Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name."}),"\n",(0,t.jsx)(n.p,{children:"After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order."}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Example 1:\n\nInput: accounts = [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]\nOutput: [["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]\nExplanation:\nThe first and third John\'s are the same person as they have the common email "johnsmith@mail.com".\nThe second John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [[\'Mary\', \'mary@mail.com\'], [\'John\', \'johnnybravo@mail.com\'], \n[\'John\', \'john00@mail.com\', \'john_newyork@mail.com\', \'johnsmith@mail.com\']] would still be accepted.\n\nExample 2:\n\nInput: accounts = [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]\nOutput: [["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"],["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]\n'})}),"\n",(0,t.jsx)(n.p,{children:"Constraints:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"1 <= accounts.length <= 1000"}),"\n",(0,t.jsx)(n.li,{children:"2 <= accounts[i].length <= 10"}),"\n",(0,t.jsx)(n.li,{children:"1 <= accounts[i][j] <= 30"}),"\n",(0,t.jsx)(n.li,{children:"accounts[i][0] consists of English letters."}),"\n",(0,t.jsx)(n.li,{children:"accounts[i][j] (for j > 0) is a valid email."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"method-1-union-find-preferred",children:"Method 1: Union Find (preferred)"}),"\n",(0,t.jsxs)(n.p,{children:["\u53c2\u8003\uff1a",(0,t.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/c23f77",children:"\u5e76\u8336\u96c6\u6a21\u7248"})]}),"\n",(0,t.jsx)(n.h3,{id:"\u672c\u9898\u7684\u5177\u4f53\u65b9\u6cd5",children:"\u672c\u9898\u7684\u5177\u4f53\u65b9\u6cd5\uff1a"}),"\n",(0,t.jsxs)(n.p,{children:["\u4ee5 ",(0,t.jsx)(n.code,{children:"accounts = [['a', 'a@1', 'a@2'], ['a', 'a@2', 'a@3'], ['b', 'b@1']]"})," \u4e3a\u4f8b"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\u5bf9\u6240\u6709email\u8fdb\u884cunion \u64cd\u4f5c\uff1a\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u9700\u8981\u7684\u6570\u636e\u7ed3\u6784\uff1a\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u4e00\u4e2a ",(0,t.jsx)(n.code,{children:"parents"})," dict, = {}\uff0c \u6bcf\u4e2aemail\u521d\u59cb\u7684parent\u662f\u4ed6\u81ea\u5df1"]}),"\n",(0,t.jsxs)(n.li,{children:["\u4e00\u4e2a",(0,t.jsx)(n.code,{children:"email_to_name"})," dict, = {}, \u6bcf\u4e00\u4e2a\u5143\u7d20\u662femail\uff1a\u5bf9\u5e94\u7684name\uff0c \u53ea\u8bb0\u5f55\u5f53\u65f6\u7684parent\u5c31\u597d\u4e86\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u8fdb\u884c union \u4ee5\u540e\uff1a\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"parents = {'a@1':'a@1', 'a@2':'a@1', 'a@3':'a@2', 'b@1':'b@1'}"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"email_to_name = {'a@1':'a', 'a@2':'a', 'a@3':'a', 'b@1':'b'}"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u5bf9\u4e8eunion\u7684\u7ed3\u679c\u8fdb\u884caggregate\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u628a\u6240\u6709 parent \u4e00\u6837\u7684\u4e1c\u897f\u653e\u8fdb\u4e00\u4e2a ",(0,t.jsx)(n.code,{children:"tree = defaultdict(list)"}),":\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"trees = defaultdict(list)\nfor item, root in parents.items():\ntrees[find(root)].append(item)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u5f97\u5230 ",(0,t.jsx)(n.code,{children:"tree = {'a@1': ['a@1', 'a@2', 'a@3'], 'b@1': ['b@1']}"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\u518d\u6839\u636e  ",(0,t.jsx)(n.code,{children:"tree"})," \u548c ",(0,t.jsx)(n.code,{children:"email_to_name"})," \u5f97\u5230\u7ed3\u679c"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"\u6b63\u786esolution",children:"\u6b63\u786esolution\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        parents = {}\n        email_to_name = {}\n        \n        def find(email):\n            if parents[email] != email:\n                parents[email] = find(parents[email])\n            return parents[email]\n\n        def union(e1, e2):\n            #\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981union by rank: e1 is from the current list, which is smaller than the aggregate of existing lists. \n            p1, p2 = find(e1), find(e2)\n            parents[p1] = p2\n\n        for a in accounts:\n            name = a[0]\n            for email in a[1:]:\n                if email not in parents:\n                    parents[email] = a[1]\n                else:\n                    union(a[1], email) #\u8fd9\u91cc\uff0c\u5982\u679cemail\u672c\u8eab\u662fparents\u91cc\u9762\u7684\uff0c\u5c31\u628aa[1]\u52a0\u8fdb\u53bb\uff0c\u5176\u5b9e\u662f\u628a\u8fd9\u4e2aa\u91cc\u9762\u7684\u6240\u6709email\u90fd\u52a0\u4e86\u8fdb\u53bb\uff0c\u56e0\u4e3aa[1]\u662f\u4ed6\u4eec\u7684parent\n                email_to_name[email] = name\n\n        trees = defaultdict(list)\n        for item, root in parents.items():\n            trees[find(root)].append(item)\n        res = []\n        for root, email_list in trees.items():\n            cur_res = [email_to_name[root]]\n            cur_res.extend(sorted(email_list))  \n            res.append(cur_res)\n        return res\n"})}),"\n",(0,t.jsx)(n.h2,{id:"solution-2-dfs-less-prefered",children:"solution 2: DFS (less prefered)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from collections import defaultdict\n\nclass Solution:\n    def accountsMerge(self, accounts):\n        graph = self.build_graph(accounts)\n        seen = set()\n        res = []\n        for account in accounts:\n            if account[1] not in seen:\n                email_list = []\n                self.dfs(graph, seen, account[1], email_list)\n                res.append([account[0]] + sorted(email_list))            \n        return res\n            \n    def build_graph(self, accounts):\n        graph = defaultdict(list)\n        for account in accounts:\n            master = account[1]\n            for email in account[2:]:\n                graph[email].append(master)\n                graph[master].append(email)\n        return graph\n        \n    def dfs(self, graph, seen, email, email_list):\n        seen.add(email)\n        email_list.append(email)\n        for e in graph[email]:\n            if e not in seen:\n                self.dfs(graph, seen, e, email_list)     \n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u4e00\u4e2aunion-find\u9519\u8bef\u7684solution",children:"\u4e00\u4e2aunion find\u9519\u8bef\u7684solution\uff1a"}),"\n",(0,t.jsx)(n.p,{children:"\u9519\u8bef\u539f\u56e0\u6807\u6ce8\u5728\u4ee3\u7801\u4e0a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        parents = {}\n        email_to_name = {}\n        \n        def find(email):\n            if parents[email] != email:\n                parents[email] = find(parents[email])\n            return parents[email]\n\n        def union(e1, e2):\n            p1, p2 = find(e1), find(e2)\n            parents[p1] = p2\n\n        for a in accounts:\n            name = a[0]\n            for email in a[1:]:\n                parents[email] = a[1] #\u8fd9\u4e00\u884c\u9519\u4e86\uff1a\u5982\u679cemail\u5df2\u7ecf\u5728parent\u91cc\u9762\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8e\u628a\u5b83\u7684parent\u6539\u6210\u4e86\u4e00\u4e2a\u522b\u7684\u3002\n                if email in parents:\n                    union(email, a[1]) #\u8fd9\u4e00\u884c\u4e5f\u9519\u4e86\uff0c\u51fa\u4e8eunion by rank\u7684\u76ee\u7684\uff0c\u628aa[1]\u52a0\u5230email\u91cc\u9762\u4f1a\u66f4\u597d\u3002\n            email_to_name[find(a[1])] = name\n\n        trees = defaultdict(list)\n        for item, root in parents.items():\n            trees[root].append(item)\n        res = []\n        for root, email_list in trees.items():\n            cur_res = [email_to_name[root]]\n            cur_res.extend(sorted(email_list))  \n            res.append(cur_res)\n        return res        \n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);