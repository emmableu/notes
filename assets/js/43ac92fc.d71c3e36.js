"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[4468],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var i=r(96540);const s={},d=i.createContext(s);function t(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(d.Provider,{value:n},e.children)}},40949:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Leetcode/DFS/934.934 - Shortest Bridge - Medium","title":"934.934 - Shortest Bridge - Medium","description":"LC link","source":"@site/docs/Leetcode/04.DFS/934.934 - Shortest Bridge - Medium.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/5870142d-451f-4062-8ed9-e4b16c6a6964","permalink":"/notes/docs/p/5870142d-451f-4062-8ed9-e4b16c6a6964","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/934.934 - Shortest Bridge - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/5870142d-451f-4062-8ed9-e4b16c6a6964","slug":"/p/5870142d-451f-4062-8ed9-e4b16c6a6964"},"sidebar":"tutorialSidebar","previous":{"title":"863.863 - All Nodes Distance K in Binary Tree (Medium)","permalink":"/notes/docs/p/0682c370-65b8-4155-a0a4-001439c53835"},"next":{"title":"05.Dynamic Programming","permalink":"/notes/docs/category/05dynamic-programming"}}');var s=r(74848),d=r(28453);const t={created_at:"2025-10-23",page_link:"/p/5870142d-451f-4062-8ed9-e4b16c6a6964",slug:"/p/5870142d-451f-4062-8ed9-e4b16c6a6964"},l=void 0,c={},o=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/shortest-bridge/",children:"LC link"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["In a given 2D binary array ",(0,s.jsx)(n.code,{children:"grid"}),", there are two islands.  (An island is a 4-directionally connected group of 1s not connected to any other 1s.)"]}),"\n",(0,s.jsxs)(n.p,{children:["Now, we may change ",(0,s.jsx)(n.code,{children:"0"}),"s to ",(0,s.jsx)(n.code,{children:"1"}),"s so as to connect the two islands together to form 1 island."]}),"\n",(0,s.jsxs)(n.p,{children:["Return the smallest number of ",(0,s.jsx)(n.code,{children:"0"}),"s that must be flipped.  (It is guaranteed that the answer is at least 1.)"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Example 1:\nInput: grid = [[0,1],[1,0]]\nOutput: 1\n\nExample 2:\nInput: grid = [[0,1,0],[0,0,0],[0,0,1]]\nOutput: 2\n\nExample 3:\nInput: grid = [[1,1,1,1,1],\n               [1,0,0,0,1],\n               [1,0,1,0,1],\n               [1,0,0,0,1],\n               [1,1,1,1,1]]\nOutput: 1\n"})}),"\n",(0,s.jsx)(n.p,{children:"Constraints:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"2 <= grid.length == grid[0].length <= 100"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"grid[i][j] == 0 or grid[i][j] == 1"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.p,{children:"\u6574\u4f53\u601d\u8def\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["DFS\u627e\u5230\u4e00\u4e2a\u5c9b\uff0c\u628a\u8fd9\u4e2a\u5c9b\u7684\u6240\u67091\u6807\u8bb0\u4e3a2\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u5c9b\u7684\u6240\u6709\u5750\u6807\u90fd\u52a0\u8fdbqueue\u91cc\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"def find_first"}),":\u627e\u5230\u7b2c\u4e00\u4e2a1\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5355\u72ec\u5199\u51fd\u6570\u662f\u56e0\u4e3a\u5426\u5219\u7684\u8bddnested for\u5f88\u96bebreak"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"def dfs"}),": \u7528\u7684\u5c9b\u5c7f\u95ee\u9898\u6a21\u7248\u65b9\u6cd5\uff0c\u627e\u5230\u7684\u6807\u8bb0\u4e3a2"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["BFS\uff0c\u7136\u540e\u5728\u6bcf\u5708\u7684BFS\u4e2dstep + 1\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"step"}),"\u521d\u59cb\u5316\u4e3a0\uff0c \u5bf9\u6bcf\u4e00\u5c42bfs\u7684\u4e0b\u4e00\u5c42\u8fdb\u884c\u5224\u65ad\u65f6\uff1a\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u5982\u679c ",(0,s.jsx)(n.code,{children:"grid[x][y] == 2"})," \u5c31\u8df3\u8fc7"]}),"\n",(0,s.jsxs)(n.li,{children:["\u5982\u679c ",(0,s.jsx)(n.code,{children:"grid[x][y] == 1"})," \u5c31\u76f4\u63a5\u8fd4\u56destep"]}),"\n",(0,s.jsxs)(n.li,{children:["\u4e0d\u7136\u7684\u8bdd\u5c31\u653e\u5230q\u91cc\u9762\uff0c\u5e76\u4e14",(0,s.jsx)(n.code,{children:"grid[x][y]"}),"\u4e5f\u6807\u8bb0\u4e3a2\uff0c\u6ce8\u610f\u67d3\u8272\u4f4d\u7f6e"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\u5728\u5f53\u524d\u8fd9\u4e00\u5708\u7ed3\u675f\u7684\u65f6\u5019\uff0c",(0,s.jsx)(n.code,{children:"step += 1"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import deque\nclass Solution:\n    def shortestBridge(self, grid):\n        self.q = deque()\n        firstr,firstc = self.find_first(grid)\n        self.dfs(grid,firstr,firstc)\n        step = 0\n        while self.q:\n            size = len(self.q)\n            for _ in range(size):\n                r,c = self.q.popleft()\n                for x, y in [(r-1,c), (r+1,c), (r,c-1), (r,c+1)]:\n                    if self.in_area(grid,x,y) and grid[x][y] != 2:\n                        if grid[x][y] == 1: return step\n                        grid[x][y] = 2 #\u67d3\u8272\u4f4d\u7f6e\u5fc5\u987b\u5728\u8fd9\u91cc\uff0c\u800c\u4e0d\u662f\u5728popleft\u4e4b\u540e\n                        self.q.append((x,y))\n            step += 1\n        \n    def find_first(self, grid):\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 1:\n                    return r,c\n\n\n    def dfs(self, grid, r, c):\n        if not self.in_area(grid,r,c):\n            return\n        if grid[r][c] != 1:\n            return\n        grid[r][c] = 2\n        self.q.append((r, c))\n        self.dfs(grid, r-1, c)\n        self.dfs(grid, r+1, c)\n        self.dfs(grid, r, c-1)\n        self.dfs(grid, r, c+1)\n    \n    def in_area(self, grid, r, c):\n        return 0 <= r < len(grid) and 0 <= c < len(grid[0])\n"})})]})}function f(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);