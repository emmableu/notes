"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8900],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var d=r(96540);const s={},t=d.createContext(s);function i(e){const n=d.useContext(t);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),d.createElement(t.Provider,{value:n},e.children)}},38822:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"Leetcode/Other/126.126 - Word Ladder II (Hard)","title":"126.126 - Word Ladder II (Hard)","description":"LC link","source":"@site/docs/Leetcode/99.Other/126.126 - Word Ladder II (Hard).md","sourceDirName":"Leetcode/99.Other","slug":"/p/8ca93ecc-051f-4992-b59f-d0d70c3df6b9","permalink":"/notes/docs/p/8ca93ecc-051f-4992-b59f-d0d70c3df6b9","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/126.126 - Word Ladder II (Hard).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/8ca93ecc-051f-4992-b59f-d0d70c3df6b9","slug":"/p/8ca93ecc-051f-4992-b59f-d0d70c3df6b9"},"sidebar":"tutorialSidebar","previous":{"title":"125.125 - Valid Palindrome - Easy","permalink":"/notes/docs/p/3b966a29-dddc-43d1-bf90-d8b94e7e7413"},"next":{"title":"1302.1302 - Deepest Leaves Sum - Medium","permalink":"/notes/docs/p/ce4a52b8-a3cd-48b2-8d78-64b0d2dc04d6"}}');var s=r(74848),t=r(28453);const i={created_at:"2025-10-23",page_link:"/p/8ca93ecc-051f-4992-b59f-d0d70c3df6b9",slug:"/p/8ca93ecc-051f-4992-b59f-d0d70c3df6b9"},c=void 0,l={},o=[{value:"Solution:",id:"solution",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/word-ladder-ii/",children:"LC link"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/126-0.png",alt:""})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u5148\u7528\u53cc\u5411bfs\u5efa\u56fe\u5e76\u4e14\u5f97\u5230\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u957f\u5ea6"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/8b354b/",children:"\u53cc\u5411bfs\u6a21\u7248"})}),"\n",(0,s.jsxs)(n.li,{children:["\u548c\u6a21\u7248\u65b9\u6cd5\u7684\u4e3b\u8981\u4e0d\u540c\u70b9\uff1a\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u30101\u3011vis.add() \u7684\u4f4d\u7f6e\u8981\u53d8\u5316\u5230\u4ece \u628acur\u4ece q1\u91cc\u9762\u62ff\u51fa\u6765\u7684\u65f6\u5019\u518dadd\u5230vis \uff08\u800c\u4e0d\u662f\u653e\u8fdb\u53bb\u7684\u65f6\u5019add\uff09\uff0c"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u4e5f\u5c31\u662f\u653e\u5728\u7528 ",(0,s.jsx)(n.code,{children:"for cur in q1"}),"\u8fd9\u91cc"]}),"\n",(0,s.jsx)(n.li,{children:"\u56e0\u4e3a\u8981\u4fdd\u8bc1 {x:z, y:z} \u8fd9\u6837\u7684graph \u80fd\u6b63\u5e38\u5730\u88ab\u627e\u51fa\u6765"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u4e3a\u4e86\u548c\u4e0a\u8ff0\u53d8\u5316consistent\uff0c vis \u521d\u59cb\u5316\u662f\u4e5f\u5e94\u8be5\u521d\u59cb\u5316\u4e3aempty set"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["\u30102\u3011\u4e3a\u4e86\u80fd\u591f\u628a\u6240\u6709\u7684\u5143\u7d20\u90fd\u653e\u8fdbgraph\u91cc\u9762\uff0c\u68c0\u67e5 ",(0,s.jsx)(n.code,{children:"if cur in q2: return graph, step + 1"}),"  \u4e5f\u5fc5\u987b\u653e\u5728\u628acur\u4ece q1\u91cc\u9762\u62ff\u51fa\u6765\u7684\u65f6\u5019 \uff08\u800c\u4e0d\u662f\u653e\u8fdb\u53bb\u7684\u65f6\u5019\uff09"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u4e5f\u5c31\u662f\u653e\u5728\u7528 ",(0,s.jsx)(n.code,{children:"for cur in q1"}),"\u8fd9\u91cc"]}),"\n",(0,s.jsx)(n.li,{children:"\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1\u80fd\u5efa\u7acb\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\uff0c\u5982\u679c\u8fc7\u65e9return\uff0c\u522b\u7684\u7b54\u6848\u7684\u56fe\u5c31\u5efa\u4e0d\u51fa\u6765\u4e86"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u4e3a\u4e86\u548c\u8fd9\u4e2aconsistent\uff0c step += 1\u7684\u4f4d\u7f6e\u4e5f\u8981\u76f8\u5e94\u6539\u53d8"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u518d\u7528 dfs \u5f97\u5230\u6700\u540e\u6709\u51e0\u4e2a\u5e8f\u5217\uff0c\u8981\u8bb0\u5f97\u7684\u51e0\u4e2a\u526a\u679d\u64cd\u4f5c\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u5982\u679cstep \u5df2\u7ecf\u5c0f\u4e8e 0\uff0c \u76f4\u63a5return"}),"\n",(0,s.jsxs)(n.li,{children:["\u5982\u679cstep = 0\uff0c\u68c0\u67e5\u662f\u5426\u5230\u4e86\u7ec8\u70b9\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u5982\u679c\u5230\u4e86\u7ec8\u70b9\uff0c res.append(cur_path)\uff0c\u518dreturn"}),"\n",(0,s.jsx)(n.li,{children:"\u5982\u679c\u6ca1\u5230\u7ec8\u70b9, \u76f4\u63a5return"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from collections import defaultdict\n\nclass Solution:\n    def findLadders(self, begin_word, end_word, wordList):\n        word_set = set(wordList)\n        if end_word not in word_set: return []\n        graph, step = self.bfs(begin_word, end_word, word_set)\n        res = []\n        self.dfs(graph, res, [begin_word], begin_word, end_word, step - 1)\n        return res\n        \n    def bfs(self, begin_word, end_word, word_set):\n        q1, q2 = {begin_word}, {end_word}\n        vis = set()\n        step = 0\n        is_reverse = False\n        graph = defaultdict(set)\n        while q1 and q2:\n            if len(q1) > len(q2):\n                q2, q1, is_reverse = q1, q2, not is_reverse\n            temp = set()            \n            for cur in q1:\n                if cur in q2:\n                    return graph, step + 1\n                vis.add(cur)\n                for new in self.generate_new(cur, word_set):\n                    if new in vis:\n                        continue\n                    if is_reverse:\n                        graph[new].add(cur)\n                    else:\n                        graph[cur].add(new)\n                    temp.add(new)\n            step += 1\n            q1 = temp\n        return graph, step + 1\n    \n    \n    def dfs(self, graph, res, cur_path, word, end_word, step):\n        if step < 0:\n            return\n        if step == 0:\n            if word == end_word:\n                res.append(cur_path)\n            return\n        for child_word in graph[word]:\n            self.dfs(graph, res, cur_path + [child_word], child_word, end_word, step - 1) \n                \n                \n    def generate_new(self, cur, word_set):\n        for i in range(len(cur)):\n            for c in "abcdefghijklmnopqrstuvwxyz":\n                l = list(cur)\n                l[i] = c\n                new = "".join(l)\n                if new != cur and new in word_set:\n                    yield new\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);