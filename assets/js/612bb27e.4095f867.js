"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7840],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(96540);const s={},d=t.createContext(s);function a(e){const n=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(d.Provider,{value:n},e.children)}},37873:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Leetcode/Other/1424.1424 - Diagonal Traverse II (Medium)","title":"1424.1424 - Diagonal Traverse II (Medium)","description":"LC link","source":"@site/docs/Leetcode/99.Other/1424.1424 - Diagonal Traverse II (Medium).md","sourceDirName":"Leetcode/99.Other","slug":"/p/5d0e8ceb-9c36-44bd-a6a0-b004b1a343b7","permalink":"/notes/docs/p/5d0e8ceb-9c36-44bd-a6a0-b004b1a343b7","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1424.1424 - Diagonal Traverse II (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/5d0e8ceb-9c36-44bd-a6a0-b004b1a343b7","slug":"/p/5d0e8ceb-9c36-44bd-a6a0-b004b1a343b7"},"sidebar":"tutorialSidebar","previous":{"title":"1382.1382 - Balance a Binary Search Tree (Medium)","permalink":"/notes/docs/p/28830c82-eff4-4bf0-9242-ec0cc41a60a8"},"next":{"title":"144.144 - Binary Tree Preorder Traversal - Easy","permalink":"/notes/docs/p/4cbd6c3d-926b-4ea3-93b2-7edd075e254d"}}');var s=r(74848),d=r(28453);const a={created_at:"2025-10-23",page_link:"/p/5d0e8ceb-9c36-44bd-a6a0-b004b1a343b7",slug:"/p/5d0e8ceb-9c36-44bd-a6a0-b004b1a343b7"},o=void 0,i={},c=[{value:"Solution",id:"solution",level:2},{value:"1. \u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4record\u6765\u4fdd\u7559\u5f53\u524d\u7684\u904d\u5386\u7684\u90e8\u5206 (preferred)",id:"1-\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4record\u6765\u4fdd\u7559\u5f53\u524d\u7684\u904d\u5386\u7684\u90e8\u5206-preferred",level:3},{value:"2. hashmap (not preferred)",id:"2-hashmap-not-preferred",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/diagonal-traverse-ii/",children:"LC link"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/1424-0.png",alt:""})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.h3,{id:"1-\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4record\u6765\u4fdd\u7559\u5f53\u524d\u7684\u904d\u5386\u7684\u90e8\u5206-preferred",children:"1. \u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4record\u6765\u4fdd\u7559\u5f53\u524d\u7684\u904d\u5386\u7684\u90e8\u5206 (preferred)"}),"\n",(0,s.jsx)(n.p,{children:"\u4ee5"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nums = [[1,2,3],\n        [4,5],\n        [7,8,9]]\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u4e3a\u4f8b,\u5728\u4e0b\u9762\u7b2c9\u884crecord"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[[1]]\n[[1], [2]]\n[[1], [2], [3]]\n[[1], [2, 4], [3]]\n[[1], [2, 4], [3, 5]]\n[[1], [2, 4], [3, 5, 7]]\n[[1], [2, 4], [3, 5, 7], [8]]\n[[1], [2, 4], [3, 5, 7], [8], [9]]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:\n        record = []\n        for i in range(len(nums)):\n            for j in range(len(nums[i])):\n                if i + j >= len(record):\n                    record.append([])\n                record[i + j].append(nums[i][j])\n                # print(record)                \n        res = []\n        for sub in record:\n            res += sub[::-1]\n        return res\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-hashmap-not-preferred",children:"2. hashmap (not preferred)"}),"\n",(0,s.jsxs)(n.p,{children:["\u4ee5",(0,s.jsx)(n.code,{children:"nums = [[1,2,3],[4,5],[7,8,9]]"})," \u4e3a\u4f8b"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:\n        d = collections.defaultdict(list)\n        for row in range(len(nums) - 1, -1, -1):  # \u5012\u53d9\u904d\u5386\u9632\u6b62\u53cd\u8f6c\n            for col in range(len(nums[row]) - 1, -1, -1):  # \u8fd9\u91cc\u60f3\u600e\u4e48\u641e\u90fd\u884c\n                d[row + col].append(nums[row][col])\n        res = []\n        # d = {4: [9], 3: [8], 2: [7, 5, 3], 1: [4, 2], 0: [1]}\n        for idx in sorted(d):  # \u5bf9 key \u8fdb\u884c\u6392\u5e8f\n            res.extend(d[idx])\n        return res\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);