"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5150],{28453:(n,e,t)=>{t.d(e,{R:()=>d,x:()=>o});var r=t(96540);const i={},a=r.createContext(i);function d(n){const e=r.useContext(a);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:d(n.components),r.createElement(a.Provider,{value:e},n.children)}},35031:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/DFS/329.329 - Longest Increasing Path in a Matrix - Hard","title":"329.329 - Longest Increasing Path in a Matrix - Hard","description":"LC link","source":"@site/docs/Leetcode/04.DFS/329.329 - Longest Increasing Path in a Matrix - Hard.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/ad846348-acdb-4bb8-a36d-11819c06bb2f","permalink":"/notes/docs/p/ad846348-acdb-4bb8-a36d-11819c06bb2f","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/329.329 - Longest Increasing Path in a Matrix - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/ad846348-acdb-4bb8-a36d-11819c06bb2f","slug":"/p/ad846348-acdb-4bb8-a36d-11819c06bb2f"},"sidebar":"tutorialSidebar","previous":{"title":"301.301 - Remove Invalid Parentheses (Hard)","permalink":"/notes/docs/p/91f4002a-263c-4657-960b-76cab4c89198"},"next":{"title":"339.339 - Nested List Weight Sum (Medium)","permalink":"/notes/docs/p/d766a93d-5c65-45f3-8c3f-5b6883e7c9b3"}}');var i=t(74848),a=t(28453);const d={created_at:"2025-10-23",page_link:"/p/ad846348-acdb-4bb8-a36d-11819c06bb2f",slug:"/p/ad846348-acdb-4bb8-a36d-11819c06bb2f"},o=void 0,s={},c=[{value:"\u7c7b\u4f3c\u9898",id:"\u7c7b\u4f3c\u9898",level:2},{value:"Solution (without memoization, not optimal)",id:"solution-without-memoization-not-optimal",level:2},{value:"good solution (with memoization)",id:"good-solution-with-memoization",level:2}];function l(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/longest-increasing-path-in-a-matrix/",children:"LC link"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/329-0.png",alt:""}),"\n",(0,i.jsx)(e.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/329-1.png",alt:""})]}),"\n",(0,i.jsx)(e.h2,{id:"\u7c7b\u4f3c\u9898",children:"\u7c7b\u4f3c\u9898"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"https://emmableu.github.io/blog/pages/9a6733",children:"max area of island solution:"})})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        max_area = 0\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 1:\n                    max_area = max(max_area, self.dfs(grid, r, c))\n        return max_area\n        \n        \n    def dfs(self, grid, r, c):\n        if not self.in_area(grid, r, c):\n            return 0\n        if grid[r][c] != 1:\n            return 0\n        grid[r][c] = 2\n        lt = self.dfs(grid, r-1, c)\n        rt = self.dfs(grid, r+1, c)\n        up = self.dfs(grid, r, c-1)\n        lo = self.dfs(grid, r, c+1)\n        return 1 + lt + rt + up + lo\n\n\n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n\n"})}),"\n",(0,i.jsx)(e.h2,{id:"solution-without-memoization-not-optimal",children:"Solution (without memoization, not optimal)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"class Solution:\n\tdef longestIncreasingPath(self, grid):\n\t\tmax_len = 0\n\t\tfor r in range(len(grid)):\n\t\t\tfor c in range(len(grid[0])):\n\t\t\t\tmax_len = max(max_len, self.dfs(grid, r, c, -1))\n\t\treturn max_len\n\n\tdef dfs(self, grid, r, c, prev):\n\t\tif not self.in_area(grid, r, c):\n\t\t\treturn 0\n\t\tif grid[r][c] <= prev:\n\t\t\treturn 0\n\t\treturn 1 + max(\n\t\t\tself.dfs(grid, r - 1, c, grid[r][c]),\n\t\t\tself.dfs(grid, r + 1, c, grid[r][c]),\n\t\t\tself.dfs(grid, r, c - 1, grid[r][c]),\n\t\t\tself.dfs(grid, r, c + 1, grid[r][c])\n\t\t)\n\n\tdef in_area(self, grid, r, c):\n\t\treturn 0 <= r < len(grid) and 0 <= c < len(grid[0])\n"})}),"\n",(0,i.jsx)(e.h2,{id:"good-solution-with-memoization",children:"good solution (with memoization)"}),"\n",(0,i.jsx)(e.p,{children:"\u521b\u5efa\u4e00\u4e2a\u65b0\u77e9\u9635 memo\uff0c\u6bcf\u4e00\u4e2a\u683c\u5b50 (i,j) \u8868\u793a\u5728 matrix \u4e0a\u8d70\u5230\u683c\u5b50 (i,j)\uff0c\u6700\u957f\u7684\u9012\u589e\u8def\u5f84\u957f\u5ea6"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"\u4e4b\u524d\u8d70\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u5b83\u7684\u524d\u9762\u80af\u5b9a\u8fd8\u6709\u70b9\uff0c\u6240\u4ee5\u4e4b\u524d\u8d70\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u7684\u603b\u957f\u5ea6\u80af\u5b9a\u6bd4\u73b0\u5728\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u8d70\u7684\u65f6\u5019\u603b\u957f\u5ea6\u8981\u957f"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"class Solution:\n\tdef longestIncreasingPath(self, grid):\n\t\tmax_len = 0\n\t\tmemo = [[0 for j in range(len(grid[0]))] for i in range(len(grid))]\n\t\tfor r in range(len(grid)):\n\t\t\tfor c in range(len(grid[0])):\n\t\t\t\tmax_len = max(max_len, self.dfs(grid, r, c, -1, memo))\n\t\treturn max_len\n\n\tdef dfs(self, grid, r, c, prev, memo):\n\t\tif not self.in_area(grid, r, c):\n\t\t\treturn 0\n\t\tif grid[r][c] <= prev:\n\t\t\treturn 0\n\t\tif memo[r][c]:\n\t\t\treturn memo[r][c]\n\t\tcur_len = 1 + max(\n\t\t\tself.dfs(grid, r - 1, c, grid[r][c], memo),\n\t\t\tself.dfs(grid, r + 1, c, grid[r][c], memo),\n\t\t\tself.dfs(grid, r, c - 1, grid[r][c], memo),\n\t\t\tself.dfs(grid, r, c + 1, grid[r][c], memo)\n\t\t)\n\t\tmemo[r][c] = cur_len \n\t\treturn cur_len\n\n\tdef in_area(self, grid, r, c):\n\t\treturn 0 <= r < len(grid) and 0 <= c < len(grid[0])\n"})})]})}function g(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}}}]);