"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8493],{10368:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>o,frontMatter:()=>i,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"Leetcode/DFS/694.694 - Number of Distinct Islands (Medium)","title":"694.694 - Number of Distinct Islands (Medium)","description":"LC link","source":"@site/docs/Leetcode/04.DFS/694.694 - Number of Distinct Islands (Medium).md","sourceDirName":"Leetcode/04.DFS","slug":"/p/348511ca-d31d-42cd-94e3-24ff7b9f55ac","permalink":"/notes/docs/p/348511ca-d31d-42cd-94e3-24ff7b9f55ac","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/694.694 - Number of Distinct Islands (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/348511ca-d31d-42cd-94e3-24ff7b9f55ac","slug":"/p/348511ca-d31d-42cd-94e3-24ff7b9f55ac"},"sidebar":"tutorialSidebar","previous":{"title":"652.652 - Find Duplicate Subtrees - Medium","permalink":"/notes/docs/p/eeecc54e-b4a9-4608-a7cf-9bebca7d2778"},"next":{"title":"695.695 - Max Area of Island - Medium","permalink":"/notes/docs/p/a0665f65-c5ab-4d73-bbcd-ff88c10f6e0b"}}');var s=r(74848),t=r(28453);const i={created_at:"2025-10-23",page_link:"/p/348511ca-d31d-42cd-94e3-24ff7b9f55ac",slug:"/p/348511ca-d31d-42cd-94e3-24ff7b9f55ac"},c=void 0,a={},l=[{value:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248:",id:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248",level:2},{value:"Solution",id:"solution",level:2}];function f(e){const n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-distinct-islands/",children:"LC link"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/694-0.png",alt:""})}),"\n",(0,s.jsx)(n.h2,{id:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248",children:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def func(self, grid: List[List[str]]) -> int:\n        # \u9898\u76ee\u8981\u6c42\u7684function\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == "1":\n                    # \u9898\u76ee\u8981\u6c42\u7684\u4e1c\u897f\n                    self.dfs(grid, r, c)\n        return #\u9898\u76ee\u8981\u6c42\u7684function\n        \n    def dfs(self, grid, r, c):\n        # base case\uff1a\u5982\u679c\u5750\u6807\u8d85\u51fa\u7f51\u683c\uff0c\u76f4\u63a5\u8fd4\u56de\n        if not self.in_area(grid, r, c):\n            return\n        if grid[r][c] != "1":\n            return \n        grid[r][c] = "2" #\u6807\u8bb0\u4ee5\u9632\u6b62\u91cd\u590dvisit\n        self.dfs(grid, r-1, c)\n        self.dfs(grid, r+1, c)\n        self.dfs(grid, r, c-1)\n        self.dfs(grid, r, c+1)\n        \n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n'})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.p,{children:"\u5982\u679cdfs\u7684\u8def\u5f84\u662f\u4e00\u6837\u7684\uff0c\u4e24\u4e2a\u56fe\u5f62\u5c31\u662f\u4e00\u6837\u7684"}),"\n",(0,s.jsxs)(n.p,{children:["\u4f46\u662f\uff0c\u5fc5\u987b\u5728dfs\u7684\u6700\u540e\u52a0\u4e00\u4e2abacktrack\u7684path (",(0,s.jsx)(n.code,{children:'self.path += "b"'}),")\uff0c\u4e0d\u7136\uff0c\u4ee5\u4e0b\u4e24\u4e2a\u88ab\u8bb0\u5f55\u7684path\u4f1a\u4e00\u6837\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"     * eg:              1 1 1   and    1 1 0\n     *                  0 1 0          0 1 1\n     * with b:          rdbr           rdr\n     * without b:       rdr            rdr\n     * */\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def numDistinctIslands(self, grid):\n        self.path = \"\"\n        island_set = set()\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 1:\n                    self.dfs(grid, r, c, 'o') # o means origin\uff0c\u76f4\u63a5\"\"\u4e5f\u80fd\u901a\u8fc7\n                    island_set.add(self.path)\n                    self.path = \"\"\n        return len(island_set)\n\n    def dfs(self, grid, r, c, direction):\n        if not self.in_area(grid, r, c):\n            return \n        if grid[r][c] != 1:\n            return \n        grid[r][c] = 2\n        self.path += direction #\u6ce8\u610f\u4e0d\u80fd\u7528self.path.append()\uff0cstr\u4e0d\u652f\u6301append\n        self.dfs(grid, r-1, c, 'l') # left\n        self.dfs(grid, r+1, c, 'r') # right\n        self.dfs(grid, r, c-1, 'u') # up\n        self.dfs(grid, r, c+1, 'd') # down\n        self.path += \"b\" #means backtracking\n\n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n"})})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var d=r(96540);const s={},t=d.createContext(s);function i(e){const n=d.useContext(t);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),d.createElement(t.Provider,{value:n},e.children)}}}]);