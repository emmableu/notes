"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3570],{6024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"Leetcode/Other/2034.2034 - Stock Price Fluctuation - Medium","title":"2034.2034 - Stock Price Fluctuation - Medium","description":"tags: [Hash Table, Design, Heap (Priority Queue), Data Stream, Ordered Set]","source":"@site/docs/Leetcode/99.Other/2034.2034 - Stock Price Fluctuation - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/d7113803-cad1-46f7-994d-c96b4f8560c6","permalink":"/notes/docs/p/d7113803-cad1-46f7-994d-c96b4f8560c6","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/2034.2034 - Stock Price Fluctuation - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/d7113803-cad1-46f7-994d-c96b4f8560c6","slug":"/p/d7113803-cad1-46f7-994d-c96b4f8560c6"},"sidebar":"tutorialSidebar","previous":{"title":"202.202 - Happy Number - Easy","permalink":"/notes/docs/p/b6a988de-bd00-4cb4-bdad-6d448cd31274"},"next":{"title":"206.206 - Reverse Linked List - Easy","permalink":"/notes/docs/p/c0c1f143-f3a5-4374-b6ee-9a5a0b5b3598"}}');var r=n(74848),c=n(28453);const s={created_at:"2025-10-23",page_link:"/p/d7113803-cad1-46f7-994d-c96b4f8560c6",slug:"/p/d7113803-cad1-46f7-994d-c96b4f8560c6"},a=void 0,p={},m=[{value:"\u601d\u8def",id:"\u601d\u8def",level:2},{value:"solution",id:"solution",level:2}];function l(e){const t={code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"tags: [Hash Table, Design, Heap (Priority Queue), Data Stream, Ordered Set]"}),"\n",(0,r.jsx)(t.img,{width:"857",alt:"Screen Shot 2022-07-17 at 12 28 39 AM",src:"https://user-images.githubusercontent.com/41789327/179388531-84ca57b5-93f4-43b7-bb1c-299c7a1fcde8.png"}),"\n",(0,r.jsx)(t.h2,{id:"\u601d\u8def",children:"\u601d\u8def"}),"\n",(0,r.jsx)(t.p,{children:"\u8981\u7528\u52304\u4e2a\u6570\u636e\u7ed3\u6784\uff1a"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"\u4e00\u4e2amax heap \u548c\u4e00\u4e2a min heap\uff0c\u91cc\u9762\u7684\u5143\u7d20\u662f \uff08price \uff08\u6216\u8005-price\uff09\uff0ctimestamp\uff09"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"\u4e00\u4e2atime_to_price\uff0c \u662f\u4e00\u4e2adictionary, \u8bb0\u5f55\u6700\u8fd1\u8fdb\u53bb\u7684\u662f\u4ec0\u4e48\u65f6\u95f4\uff0c\u5bf9\u5e94\u7684\u662f\u4ec0\u4e48\u4ef7\u683c\u3002"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u56e0\u4e3a\u8fd9\u4e2a\u8981\u6839\u636e\u7684\u6700\u8fd1\u7684\u65f6\u5019update\uff0c\u6240\u4ee5\u8981\u7528\u5230dictionary"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["\u4e00\u4e2acurrent_time, \u8bb0\u5f55\u5230\u76ee\u524d\u4e3a\u6b62\u6700\u5927\u7684timestamp\u662f\u4ec0\u4e48\u65f6\u95f4\uff0ccall ",(0,r.jsx)(t.code,{children:"current"})," \u7684\u65f6\u5019\u7528\u8fd9\u4e2acurrent_time\u6765\u5f97\u5230\u6700\u8fd1\u7684\u65f6\u95f4\u5bf9\u5e94\u7684\u4ef7\u683c\u662f\u591a\u5c11\uff08\u7528\u5230time_to_price\uff09"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"update\u7684\u65f6\u5019\uff1a"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"    def update(self, timestamp: int, price: int) -> None:\n        heapq.heappush(self.min_heap, (price, timestamp))\n        heapq.heappush(self.max_heap, (-price, timestamp))\n        self.time_to_price[timestamp] = price\n        self.current_time = max(timestamp, self.current_time)\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\u8bfb\u53d6\u6700\u5927\u5143\u7d20\u7684\u65f6\u5019\uff1a\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u53ef\u80fd\u4f1a\u5b58\u5728\u9519\u8bef\u7684\u6570\u636e\uff0c\u6bd4\u5982 \uff081\uff0c 150\uff09\uff0c \u518d \uff081\uff0c 100\uff09\uff0c \u8fd9\u6837\u62ff\u7684\u8bdd\u4f1a\u62ff\u5230150\u8fd9\u4e2aprice\uff0c\u4f46\u6211\u4eec\u8981\u7684\u662f\u6700\u65b0\u7684price 100\uff0c \u6240\u4ee5\u8981\u548ctime_to_price\u8fd9\u4e2adictionary \u6bd4\u5bf9\uff0c\u4e00\u76f4\u53d6\u5230\u4e00\u6837\u7684\u4e3a\u6b62"}),"\n",(0,r.jsx)(t.li,{children:"\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u8fdb\u53bb\u7684\u65f6\u5019\u662f \uff081\uff0c 100\uff09\uff0c \u518d \uff081\uff0c 150\uff09\uff0c \u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\u53d6\u5230150\u5c31\u7ed3\u675f\u4e86\u3002\u4f46\u662f\uff081\uff0c100\uff09 \u8fd9\u4e2a\u8fd8\u662f\u7559\u5728heap\u91cc\u9762\uff0c\u8fd9\u4e2a\u5176\u5b9e\u6ca1\u6709\u5173\u5fc3\uff0c\u56e0\u4e3a\u5047\u8bbe\u672a\u6765\u67d0\u4e00\u6b21\u53d6\u5230\u4e86 \uff081\uff0c100\uff09\uff0c\u901a\u8fc7\u8fd9\u4e2atime_to_price\u7684dict\u8fd8\u662f\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u662f\u4e0d\u5bf9\u7684\u3002"}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"\u53d6\u5b8c\u4e86\u4ee5\u540e\u52a1\u5fc5\u8bb0\u5f97\u518dheappush \u56de\u53bb"})}),"\n",(0,r.jsx)(t.li,{children:"\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff1a \u4ee5maximum \u4e3a\u4f8b\uff1a"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"    def maximum(self) -> int:\n        currPrice, timestamp = heappop(self.maxHeap)\n\t\t\n\t\t#If the price from the heap doesn't match the price the timestamp indicates, keep popping from the heap\n        while -currPrice != self.timestamps[timestamp]:\n            currPrice, timestamp = heappop(self.maxHeap)\n            \n        heappush(self.maxHeap, (currPrice, timestamp))\n        return -currPrice\n"})}),"\n",(0,r.jsx)(t.h2,{id:"solution",children:"solution"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class StockPrice:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n        self.current_time = -1\n        self.time_to_price = {}\n\n    def update(self, timestamp: int, price: int) -> None:\n        heapq.heappush(self.min_heap, (price, timestamp))\n        heapq.heappush(self.max_heap, (-price, timestamp))\n        self.time_to_price[timestamp] = price\n        self.current_time = max(timestamp, self.current_time)\n\n    def current(self) -> int:\n        return self.time_to_price[self.current_time]\n\n    def maximum(self) -> int:\n        cur_price, timestamp = heapq.heappop(self.max_heap)\n        while - cur_price != self.time_to_price[timestamp]:\n            cur_price, timestamp = heapq.heappop(self.max_heap)\n        heapq.heappush(self.max_heap, (cur_price, timestamp))\n        return - cur_price\n\n    def minimum(self) -> int:\n        cur_price, timestamp = heapq.heappop(self.min_heap)\n        while cur_price != self.time_to_price[timestamp]:\n            cur_price, timestamp = heapq.heappop(self.min_heap)\n        heapq.heappush(self.min_heap, (cur_price, timestamp))\n        return cur_price\n\n\n\n# Your StockPrice object will be instantiated and called as such:\n# obj = StockPrice()\n# obj.update(timestamp,price)\n# param_2 = obj.current()\n# param_3 = obj.maximum()\n# param_4 = obj.minimum()\n"})})]})}function d(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(96540);const r={},c=i.createContext(r);function s(e){const t=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(c.Provider,{value:t},e.children)}}}]);