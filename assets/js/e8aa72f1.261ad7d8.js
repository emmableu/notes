"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1542],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var i=r(96540);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},61009:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Leetcode/Other/269.269 - Alien Dictionary - Hard","title":"269.269 - Alien Dictionary - Hard","description":"LC link","source":"@site/docs/Leetcode/99.Other/269.269 - Alien Dictionary - Hard.md","sourceDirName":"Leetcode/99.Other","slug":"/p/38b9d851-99e1-45dd-9031-84415fa1b8d3","permalink":"/notes/docs/p/38b9d851-99e1-45dd-9031-84415fa1b8d3","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/269.269 - Alien Dictionary - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/38b9d851-99e1-45dd-9031-84415fa1b8d3","slug":"/p/38b9d851-99e1-45dd-9031-84415fa1b8d3"},"sidebar":"tutorialSidebar","previous":{"title":"267.267 - Palindrome Permutation II - Medium","permalink":"/notes/docs/p/bce08b51-07cc-4080-96bf-b96063e8f2d2"},"next":{"title":"270.270 - Closest Binary Search Tree Value (Easy)","permalink":"/notes/docs/p/bfbe4655-bc9d-4180-8c1a-6af13711e128"}}');var t=r(74848),s=r(28453);const l={created_at:"2025-10-23",page_link:"/p/38b9d851-99e1-45dd-9031-84415fa1b8d3",slug:"/p/38b9d851-99e1-45dd-9031-84415fa1b8d3"},d=void 0,a={},o=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/alien-dictionary/",children:"LC link"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/alien-dictionary/discuss/70173/Python-Solution-with-Detailed-Explanation",children:"explanation"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you."}),"\n",(0,t.jsx)(n.p,{children:"You are given a list of strings words from the alien language's dictionary, where the strings in words are sorted lexicographically by the rules of this new language."}),"\n",(0,t.jsx)(n.p,{children:'Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language\'s rules. If there is no solution, return "". If there are multiple solutions, return any of them.'}),"\n",(0,t.jsx)(n.p,{children:"A string s is lexicographically smaller than a string t if at the first letter where they differ, the letter in s comes before the letter in t in the alien language. If the first min(s.length, t.length) letters are the same, then s is smaller if and only if s.length < t.length."}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Example 1:\nInput: words = ["wrt","wrf","er","ett","rftt"]\nOutput: "wertf"\n\nExample 2:\nInput: words = ["z","x"]\nOutput: "zx"\n\nExample 3:\nInput: words = ["z","x","z"]\nOutput: ""\nExplanation: The order is invalid, so return "".\n'})}),"\n",(0,t.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u4f20\u7edfdfs\u53ea\u6709\u4e00\u4e2avisited\u72b6\u6001"}),"\n",(0,t.jsxs)(n.li,{children:["\u62d3\u6251dfs\u6709\u4e24\u4e2a\u72b6\u6001\uff1a ",(0,t.jsx)(n.code,{children:"visited"})," and ",(0,t.jsx)(n.code,{children:"visiting"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u78b0\u5230visited\uff1aok\uff1b \u78b0\u5230  ",(0,t.jsx)(n.code,{children:"visiting"}),": \u8bf4\u660e\u6709\u73af\uff0c\u8fd4\u56defalse\u3002\n\u5c06\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u8fdb\u884c\u53cd\u8f6c\uff0c\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\u4e3a\u4ec0\u4e48\u8981\u53cd\u8f6c\uff1a\u56e0\u4e3a\u540e\u7eed\u904d\u5386\u65f6\uff0c\u5148append \u5230\u6570\u7ec4\u91cc\u9762\u53bb\u7684\u662fleaf node"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"zip"})," API \u53c2\u8003 ",(0,t.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/leetcode953",children:"verifying alien dictionary"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u5224\u65advalid word order \u53ef\u4ee5\u53c2\u8003",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/verifying-an-alien-dictionary/discuss/1149916/Python-short-solution-explained",children:"\u8fd9\u4e2a\u6a21\u7248"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\u672c\u9898\u96be\u70b9\uff1a\u5efa\u56fe\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u6bcf\u4e2aword\u7684\u6bcf\u4e2achar\u5bf9\u5e94 dict\u91cc\u9762\u7684key"}),"\n",(0,t.jsx)(n.li,{children:"\u5bf9\u4e8e\u6bcf\u4e2akey\uff0c\u5982\u679c\u786e\u5b9a\u67d0\u4e2achar\u5728\u5b57\u5178\u91cc\u9762\u4ed6\u7684\u540e\u9762\uff0c\u5c31\u628a\u90a3\u4e2achar\u4f5c\u4e3a\u8fd9\u4e2akey\u7684\u4e00\u4e2achildren"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["\u6bd4\u5982\uff0c\u5bf9\u4e8e input ",(0,t.jsx)(n.code,{children:'["wrt","wrf","er","ett","rftt"]'}),",\u5f97\u5230\u7684\u56fe\u4e3a\n",(0,t.jsx)(n.code,{children:"{'w': {'e'}, 'r': {'t'}, 't': {'f'}, 'f': set(), 'e': {'r'}}"})]}),"\n",(0,t.jsx)(n.p,{children:"\u5177\u4f53\u89c1\u4ee3\u7801\u4e2d\u7684\u6ce8\u91ca"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def alienOrder(self, words):\n        graph = {}\n        # build graph\n        for w in words:\n            for char in w:\n                graph[char] = set()\n        for w1, w2 in zip(words, words[1:]):\n            if w1.startswith(w2) and w1 != w2:\n                return "" #"abc","ab"\u662finvalid\uff0c\u76f4\u63a5\u8fd4\u56de\n            # \u4f8b\u5982\u5f53 w1 = \'wrtm\', w2 = \'wrfq\', \u5219\u904d\u5386\u8fc7\u7a0b\u4e2dc1,c2\u4f9d\u6b21\u4e3a\n            # (w,w), (r,r) (t,f), t != f, \u5f97\u5230t\u5728f\u524d\u9762\uff0c\u6240\u4ee5\u5f80graph\u4e2d\n            # \u52a0\u5165 t: {f}, \u7136\u540e\u5269\u4e0b\u7684\u987a\u5e8f\u5c31\u4e0d\u80fd\u4fdd\u8bc1\u4e86\uff0c\u6240\u4ee5break\n            for c1, c2 in zip(w1, w2):\n                if c1 != c2:\n                    graph[c1].add(c2)\n                    break\n        \n        print(graph)\n        # dfs\n        vis = [0] * 26\n        res = []\n\n        def dfs(res, vis, c):\n            if vis[order(c)] == 2:\n                return True\n            if vis[order(c)] == 1:\n                return False\n            vis[order(c)] = 1\n            for child in graph[c]:\n                is_valid = dfs(res, vis, child)\n                if not is_valid:\n                    return False\n            vis[order(c)] = 2\n            res.append(c)\n            return True\n\n        def order(c):\n            return ord(c) - ord(\'a\')\n        \n        for k in graph:\n            if vis[order(k)] == 0:\n                is_valid = dfs(res, vis, k)\n                if not is_valid:\n                    return ""\n\n        return "".join(res[::-1]) \n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);