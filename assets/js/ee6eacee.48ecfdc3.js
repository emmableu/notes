"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1884],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var l=t(96540);const a={},s=l.createContext(a);function i(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),l.createElement(s.Provider,{value:n},e.children)}},45214:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"Leetcode/Other/146.146 - LRU Cache - Medium","title":"146.146 - LRU Cache - Medium","description":"Description:","source":"@site/docs/Leetcode/99.Other/146.146 - LRU Cache - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/abc7a83f-7200-4c7f-a23e-ff491c8b4206","permalink":"/notes/docs/p/abc7a83f-7200-4c7f-a23e-ff491c8b4206","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/146.146 - LRU Cache - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/abc7a83f-7200-4c7f-a23e-ff491c8b4206","slug":"/p/abc7a83f-7200-4c7f-a23e-ff491c8b4206"},"sidebar":"tutorialSidebar","previous":{"title":"145.145 - Binary Tree Postorder Traversal","permalink":"/notes/docs/p/14514f2b-e352-4322-b2fd-92ec95188c56"},"next":{"title":"1460.1460 - Make Two Arrays Equal by Reversing Sub-arrays (Easy)","permalink":"/notes/docs/p/66bd7780-8a5b-4252-a478-77fc3ab88317"}}');var a=t(74848),s=t(28453);const i={created_at:"2025-10-23",page_link:"/p/abc7a83f-7200-4c7f-a23e-ff491c8b4206",slug:"/p/abc7a83f-7200-4c7f-a23e-ff491c8b4206"},c=void 0,d={},o=[{value:"Description:",id:"description",level:2},{value:"Example",id:"example",level:2},{value:"Method",id:"method",level:2},{value:"Implementation",id:"implementation",level:2}];function r(e){const n={br:"br",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,a.jsx)(n.p,{children:"Design a data structure that follows the constraints of a Least Recently Used (LRU) cache."}),"\n",(0,a.jsx)(n.p,{children:"Implement the LRUCache class:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"LRUCache(int capacity) Initialize the LRU cache with positive size capacity."}),"\n",(0,a.jsx)(n.li,{children:"int get(int key) Return the value of the key if the key exists, otherwise return -1."}),"\n",(0,a.jsx)(n.li,{children:"void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The functions ",(0,a.jsx)(n.code,{children:"get"})," and ",(0,a.jsx)(n.code,{children:"put"})," must each run in O(1) average time complexity."]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'Input\n["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n'})}),"\n",(0,a.jsx)(n.h2,{id:"method",children:"Method"}),"\n",(0,a.jsx)(n.p,{children:"\u8981\u652f\u6301\u7684operation (\u90fd\u662fo(1))\uff1a"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"\u540e\u8fdb\u7684\u653e\u5728head/front"}),"\n",(0,a.jsx)(n.li,{children:"\u628a\u67d0\u4e2a\u5143\u7d20\u63d0\u5230front"}),"\n",(0,a.jsx)(n.li,{children:"\u5220\u9664\u5c3e\u90e8\u7684\u5143\u7d20"}),"\n",(0,a.jsx)(n.li,{children:"\u83b7\u5f97\u67d0\u4e2akey\u5bf9\u5e94\u7684value"}),"\n",(0,a.jsx)(n.li,{children:"\u4fdd\u6301\u4e00\u5b9a\u7684\u957f\u5ea6"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["\u540c\u65f6\u6ee1\u8db31,2\u548c3: linked list",(0,a.jsx)(n.br,{}),"\n\u6ee1\u8db34: map/dictionary, len(dict) is O(1) operation, so 5 is O(1) by default as well.",(0,a.jsx)(n.br,{}),"\n\u5177\u4f53\u89c1implementation\uff0cadd\u548cput\u7684\u4f5c\u7528\u5199\u5728\u6ce8\u91ca\u4e0a"]}),"\n",(0,a.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class Node:\n    def __init__(self, key, val, prev = None, next = None):\n        self.key = key\n        self.val = val\n        self.prev = prev\n        self.next = next\n    \n    \nclass LRUCache:\n    def __init__(self, capacity):\n        self.head = Node(None, None)\n        self.tail = Node(None, None)\n        self.head.next = self.tail\n        self.tail.next = self.head\n        self.d = {} # key:Node\n        self.capacity = capacity\n        \n    def _add(self, node):\n        # \u628anode\u653e\u5728 head\u7684\u4e0b\u4e00\u4e2a\n        n = self.head.next\n        self.head.next = node\n        node.next = n\n        n.prev = node\n        node.prev = self.head\n        \n    def _remove(self, node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n        \n    def get(self, key):\n        node = self.d.get(key)\n        if node == None:\n            return -1\n        self._remove(node)    \n        self._add(node)\n        return node.val   """don\'t forget to return here"""\n        \n        \n    def put(self, key, val):\n        # \u628a\u4ea7\u751f\u65b0\u7684node\uff0c\u653e\u5728head\u7684\u4e0b\u4e00\u4e2a\uff0c\u5e76\u4e14\u52a0\u5165self.d\n        # \u5982\u679c\u6709\u4e86\u8981\u5148\u5220\u53bb\uff0c\u56e0\u4e3a\u65b0\u8fdb\u53bb\u7684\u8981\u63d2\u5165\u5728head.next\n        # \u5982\u679ccapacity\u6ee1\u4e86\uff0c\u5c31\u5220\u53bb\u6700\u540e\u4e00\u4e2a\uff0c\u5e76\u628a\u6700\u540e\u4e00\u4e2a\u4eceself.d\u91cc\u9762\u53bb\u6389\n        if key in self.d:\n            self._remove(self.d[key])\n        node = Node(key, val)\n        self._add(node)\n        self.d[key] = node\n        if len(self.d) == self.capacity + 1:\n            last_ele = self.tail.prev\n            self._remove(last_ele)\n            del self.d[last_ele.key]\n                \n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}}}]);