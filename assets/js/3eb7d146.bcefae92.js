"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[4685],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var s=n(96540);const a={},c=s.createContext(a);function r(e){const t=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(c.Provider,{value:t},e.children)}},95588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"Leetcode/Other/46.46 - Permutations - Medium","title":"46.46 - Permutations - Medium","description":"tags: [Array, Backtracking]","source":"@site/docs/Leetcode/99.Other/46.46 - Permutations - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/cf2d2cde-b4a3-4a7e-a183-9c77f113da17","permalink":"/notes/docs/p/cf2d2cde-b4a3-4a7e-a183-9c77f113da17","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/46.46 - Permutations - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/cf2d2cde-b4a3-4a7e-a183-9c77f113da17","slug":"/p/cf2d2cde-b4a3-4a7e-a183-9c77f113da17"},"sidebar":"tutorialSidebar","previous":{"title":"444.444 - Sequence Reconstruction - Medium","permalink":"/notes/docs/p/e43ee8c3-697c-4143-b6f4-3325718f4734"},"next":{"title":"477.477 - Total Hamming Distance (Medium)","permalink":"/notes/docs/p/91e8bd4a-48ca-4192-a44d-b60f59d3e22a"}}');var a=n(74848),c=n(28453);const r={created_at:"2025-10-23",page_link:"/p/cf2d2cde-b4a3-4a7e-a183-9c77f113da17",slug:"/p/cf2d2cde-b4a3-4a7e-a183-9c77f113da17"},d=void 0,o={},i=[];function u(e){const t={a:"a",code:"code",img:"img",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"tags: [Array, Backtracking]"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.cn/problems/permutations/",children:"LC Link"})}),"\n",(0,a.jsx)(t.img,{width:"676",alt:"image",src:"https://user-images.githubusercontent.com/41789327/180926451-275f0424-22a4-4108-b144-54d73e685a2f.png"}),"\n",(0,a.jsx)(t.p,{children:"\u5177\u4f53\u89e3\u91ca\u89c1 backtracking \u6a21\u7248"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"import copy\nclass Solution:\n\tdef permute(self, nums):\n\t\tres = []\n\t\tused = [False] * len(nums)\n\t\tself.dfs(nums, [], used, res)\n\t\treturn res\n\n\tdef dfs(self, nums, path, used, res):\n\t\tif len(path) == len(nums):\n\t\t\tres.append(copy.deepcopy(path))\n\t\t\treturn\n\t\tfor i in range(len(nums)):\n\t\t\tif not used[i]:\n\t\t\t\tpath.append(nums[i])\n\t\t\t\tused[i] = True\n\t\t\t\t# \u8fdb\u5165\u4e0b\u4e00\u5c42\u51b3\u7b56\u6811\n\t\t\t\tself.dfs(nums, path, used, res)\n\t\t\t\t# \u53d6\u6d88\u9009\u62e9\n\t\t\t\tpath.pop()\n\t\t\t\tused[i] = False\n"})})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);