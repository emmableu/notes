"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9800],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(96540);const a={},d=s.createContext(a);function i(e){const t=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(d.Provider,{value:t},e.children)}},40731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"Leetcode/DFS/652.652 - Find Duplicate Subtrees - Medium","title":"652.652 - Find Duplicate Subtrees - Medium","description":"tags: [Hash Table, Tree, Depth-First Search, Binary Tree]","source":"@site/docs/Leetcode/04.DFS/652.652 - Find Duplicate Subtrees - Medium.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/eeecc54e-b4a9-4608-a7cf-9bebca7d2778","permalink":"/notes/docs/p/eeecc54e-b4a9-4608-a7cf-9bebca7d2778","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/652.652 - Find Duplicate Subtrees - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/eeecc54e-b4a9-4608-a7cf-9bebca7d2778","slug":"/p/eeecc54e-b4a9-4608-a7cf-9bebca7d2778"},"sidebar":"tutorialSidebar","previous":{"title":"552.552 - Student Attendance Record II - Hard","permalink":"/notes/docs/p/7ed1dc15-ac0e-4b99-ba14-8fa0dc752be0"},"next":{"title":"694.694 - Number of Distinct Islands (Medium)","permalink":"/notes/docs/p/348511ca-d31d-42cd-94e3-24ff7b9f55ac"}}');var a=n(74848),d=n(28453);const i={created_at:"2025-10-23",page_link:"/p/eeecc54e-b4a9-4608-a7cf-9bebca7d2778",slug:"/p/eeecc54e-b4a9-4608-a7cf-9bebca7d2778"},c=void 0,r={},o=[];function l(e){const t={code:"code",img:"img",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"tags: [Hash Table, Tree, Depth-First Search, Binary Tree]"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208102054926.png",alt:""}),"\n",(0,a.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208102055880.png",alt:""})]}),"\n",(0,a.jsx)(t.p,{children:"\u6ce8\u610f \u4e0d\u80fd\u7528 inorder \u6765\u505ahash\uff0c\u56e0\u4e3ainorder can create same serialization for symmetric trees."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n\tdef findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:\n\t\tdup_dict = {}\n\t\tnode_set = set()\n\t\tself.dfs_find_duplicate(root, node_set, dup_dict)\n\t\treturn dup_dict.values()\n\t\t\n\tdef dfs_find_duplicate(self, node, node_set, dup_dict):\n\t\tleft_hash, right_hash = "", ""\n\t\tif node.left:\n\t\t\tleft_hash = self.dfs_find_duplicate(node.left, node_set, dup_dict)\n\t\tif node.right:\n\t\t\tright_hash = self.dfs_find_duplicate(node.right, node_set, dup_dict)\n\t\tnode_hash = f"{node.val}l{left_hash}r{right_hash}"\n\t\tif node_hash not in dup_dict:\n\t\t\tif node_hash in node_set:\n\t\t\t\tdup_dict[node_hash] = node\n\t\t\telse:\n\t\t\t\tnode_set.add(node_hash)\n\t\treturn node_hash\n'})})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);