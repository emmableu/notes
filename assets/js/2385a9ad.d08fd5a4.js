"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9770],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var t=i(96540);const s={},a=t.createContext(s);function l(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(a.Provider,{value:n},e.children)}},63969:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Leetcode/Other/1762.1762 - Buildings With an Ocean View (Medium)","title":"1762.1762 - Buildings With an Ocean View (Medium)","description":"Description:","source":"@site/docs/Leetcode/99.Other/1762.1762 - Buildings With an Ocean View (Medium).md","sourceDirName":"Leetcode/99.Other","slug":"/p/2e5d2e46-6474-4fac-bc30-79c99de1b5fa","permalink":"/notes/docs/p/2e5d2e46-6474-4fac-bc30-79c99de1b5fa","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1762.1762 - Buildings With an Ocean View (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/2e5d2e46-6474-4fac-bc30-79c99de1b5fa","slug":"/p/2e5d2e46-6474-4fac-bc30-79c99de1b5fa"},"sidebar":"tutorialSidebar","previous":{"title":"1757.1757 - Recyclable and Low Fat Products (Easy)","permalink":"/notes/docs/p/2ebb105e-aae1-428a-aa3f-c375897c6388"},"next":{"title":"1854.1854 - Maximum Population Year - Easy","permalink":"/notes/docs/p/9408710d-5035-4ec1-a0ae-fd1677a51e83"}}');var s=i(74848),a=i(28453);const l={created_at:"2025-10-23",page_link:"/p/2e5d2e46-6474-4fac-bc30-79c99de1b5fa",slug:"/p/2e5d2e46-6474-4fac-bc30-79c99de1b5fa"},d=void 0,c={},o=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Method:",id:"method",level:2},{value:"My solution",id:"my-solution",level:2}];function r(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,s.jsx)(n.p,{children:"There are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line."}),"\n",(0,s.jsx)(n.p,{children:"The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height."}),"\n",(0,s.jsx)(n.p,{children:"Return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Example 1:\n\nInput: heights = [4,2,3,1]\nOutput: [0,2,3]\nExplanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.\nExample 2:\n\nInput: heights = [4,3,2,1]\nOutput: [0,1,2,3]\nExplanation: All the buildings have an ocean view.\nExample 3:\n\nInput: heights = [1,3,2,4]\nOutput: [3]\nExplanation: Only building 3 has an ocean view.\nExample 4:\n\nInput: heights = [2,2,2,2]\nOutput: [3]\nExplanation: Buildings cannot see the ocean if there are buildings of the same height to its right.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"method",children:"Method:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u5bf9\u4e8e\u6bd4\u5982",(0,s.jsx)(n.code,{children:"[4,2,3,1]"}),"\u8fd9\u4e2a\u6570\u7ec4\uff0c\u5148\u5728res\u91cc\u9762\u653e",(0,s.jsx)(n.code,{children:"[3]"}),", 3\u662findex\uff0c\u4ee3\u8868\u6570\u5b571"]}),"\n",(0,s.jsxs)(n.li,{children:["\u7136\u540e\u4ece\u53f3\u5f80\u5de6\uff0c\u6bd4res\u7684\u5f53\u524d\u5012\u6570\u7b2c\u4e00\u4e2a\u5927\u5c31\u653e\u8fdb\u53bb\uff0c\u6240\u4ee5\u653e\u6210 ",(0,s.jsx)(n.code,{children:"[3,2,0]"})," \u8868\u793a ",(0,s.jsx)(n.code,{children:"[1,3,4]"})]}),"\n",(0,s.jsxs)(n.li,{children:["reverse, \u53d8\u6210 ",(0,s.jsx)(n.code,{children:"[0, 2, 3]"}),"\u8868\u793a ",(0,s.jsx)(n.code,{children:"[4,3,1]"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"my-solution",children:"My solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findBuildings(self, heights):\n        res = [len(heights)-1]\n        for i in range(len(heights)-2, -1, -1):\n            if heights[i] > heights[res[-1]]:\n                res.append(i)\n        return res[::-1]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}}}]);