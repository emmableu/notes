"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(96540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},73394:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Leetcode/Other/977.977 - Squares of a Sorted Array - Easy","title":"977.977 - Squares of a Sorted Array - Easy","description":"Description:","source":"@site/docs/Leetcode/99.Other/977.977 - Squares of a Sorted Array - Easy.md","sourceDirName":"Leetcode/99.Other","slug":"/p/3bb4048a-b246-4515-bf8c-5892bdfb4039","permalink":"/notes/docs/p/3bb4048a-b246-4515-bf8c-5892bdfb4039","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/977.977 - Squares of a Sorted Array - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/3bb4048a-b246-4515-bf8c-5892bdfb4039","slug":"/p/3bb4048a-b246-4515-bf8c-5892bdfb4039"},"sidebar":"tutorialSidebar","previous":{"title":"973.973 - K Closest Points to Origin - Medium","permalink":"/notes/docs/p/5e39533c-1dcd-4c36-85ef-f0adb0a70417"},"next":{"title":"983.983 - Minimum Cost For Tickets (Medium)","permalink":"/notes/docs/p/95831f09-cf3b-4e23-8a6c-ada2ec5d72d7"}}');var s=r(74848),i=r(28453);const o={created_at:"2025-10-23",page_link:"/p/3bb4048a-b246-4515-bf8c-5892bdfb4039",slug:"/p/3bb4048a-b246-4515-bf8c-5892bdfb4039"},a=void 0,l={},c=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Constraints:",id:"constraints",level:2},{value:"Solution",id:"solution",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,s.jsx)(n.p,{children:"Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Example 1:\n\nInput: nums = [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExplanation: After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n\nExample 2:\n\nInput: nums = [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"1 <= nums.length <= 104"}),"\n",(0,s.jsx)(n.li,{children:"-104 <= nums[i] <= 104"}),"\n",(0,s.jsx)(n.li,{children:"nums is sorted in non-decreasing order."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.p,{children:"start off by initializing a list with all 0s."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def sortedSquares(self, nums):\n        n = len(nums)\n        res = [0]*n\n        l, r, marker = 0, n-1, n-1\n        while l <= r:\n            if abs(nums[l]) > abs(nums[r]):\n                res[marker] = nums[l]*nums[l]\n                l += 1\n            else:\n                res[marker] = nums[r]*nums[r]\n                r -= 1\n            marker -= 1\n        return res\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);