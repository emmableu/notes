"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[4527],{12317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/Other/67.67 - Add Binary (Easy)","title":"67.67 - Add Binary (Easy)","description":"LC link","source":"@site/docs/Leetcode/99.Other/67.67 - Add Binary (Easy).md","sourceDirName":"Leetcode/99.Other","slug":"/p/09d7e655-94ba-44ed-895e-29ff1db68841","permalink":"/notes/docs/p/09d7e655-94ba-44ed-895e-29ff1db68841","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/67.67 - Add Binary (Easy).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/09d7e655-94ba-44ed-895e-29ff1db68841","slug":"/p/09d7e655-94ba-44ed-895e-29ff1db68841"},"sidebar":"tutorialSidebar","previous":{"title":"661.661 - Image Smoother (Easy)","permalink":"/notes/docs/p/5e3d5012-ec26-4068-99f1-acb5d905234b"},"next":{"title":"670.670 - Maximum Swap (Medium)","permalink":"/notes/docs/p/f349abf9-3c9b-4ea6-bc54-021e5e7c28d5"}}');var i=t(74848),s=t(28453);const a={created_at:"2025-10-23",page_link:"/p/09d7e655-94ba-44ed-895e-29ff1db68841",slug:"/p/09d7e655-94ba-44ed-895e-29ff1db68841"},d=void 0,o={},c=[{value:"Description:",id:"description",level:2},{value:"Method",id:"method",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/add-binary/",children:"LC link"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,i.jsx)(n.p,{children:"Given two binary strings a and b, return their sum as a binary string."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Example 1:\n\nInput: a = "11", b = "1"\nOutput: "100"\n\nExample 2:\n\nInput: a = "1010", b = "1011"\nOutput: "10101"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Constraints:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 <= a.length, b.length <= 104"}),"\n",(0,i.jsx)(n.li,{children:"a and b consist only of '0' or '1' characters."}),"\n",(0,i.jsx)(n.li,{children:"Each string does not contain leading zeros except for the zero itself."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"method",children:"Method"}),"\n",(0,i.jsx)(n.p,{children:"directly adding one character at a time."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def addBinary(self, num1, num2):\n        i1, i2 = len(num1)-1, len(num2)-1\n        carry = 0\n        res = []\n        while i1 >= 0 or i2 >= 0 or carry > 0:\n            a = int(num1[i1]) if i1 >= 0 else 0\n            b = int(num2[i2]) if i2 >= 0 else 0\n            s = a + b + carry \n            cur, carry = s%2, s//2\n            res.append(cur)\n            i1 -= 1\n            i2 -= 1\n        return "".join([str(ele) for ele in res[::-1]]) \n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);