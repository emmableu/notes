"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7784],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(96540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},89289:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Leetcode/Other/124.124 - Binary Tree Maximum Path Sum - Hard","title":"124.124 - Binary Tree Maximum Path Sum - Hard","description":"leetcode link","source":"@site/docs/Leetcode/99.Other/124.124 - Binary Tree Maximum Path Sum - Hard.md","sourceDirName":"Leetcode/99.Other","slug":"/p/ee21661f-55eb-4483-83f8-601e42b661c0","permalink":"/notes/docs/p/ee21661f-55eb-4483-83f8-601e42b661c0","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/124.124 - Binary Tree Maximum Path Sum - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/ee21661f-55eb-4483-83f8-601e42b661c0","slug":"/p/ee21661f-55eb-4483-83f8-601e42b661c0"},"sidebar":"tutorialSidebar","previous":{"title":"1235.1235 - Maximum Profit in Job Scheduling","permalink":"/notes/docs/p/b5606537-4f86-447e-bfc6-c55a249dc753"},"next":{"title":"125.125 - Valid Palindrome - Easy","permalink":"/notes/docs/p/3b966a29-dddc-43d1-bf90-d8b94e7e7413"}}');var a=t(74848),i=t(28453);const r={created_at:"2025-10-23",page_link:"/p/ee21661f-55eb-4483-83f8-601e42b661c0",slug:"/p/ee21661f-55eb-4483-83f8-601e42b661c0"},s=void 0,l={},d=[{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:2},{value:"Solution: \u9012\u5f52",id:"solution-\u9012\u5f52",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-maximum-path-sum/submissions/",children:"leetcode link"}),"\n",(0,a.jsx)(n.a,{href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/solution/shou-hui-tu-jie-hen-you-ya-de-yi-dao-dfsti-by-hyj8/",children:"explanation"})]}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root."}),"\n",(0,a.jsx)(n.p,{children:"The path sum of a path is the sum of the node's values in the path."}),"\n",(0,a.jsx)(n.p,{children:"Given the root of a binary tree, return the maximum path sum of any path."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n"})}),"\n",(0,a.jsx)(n.p,{children:"Constraints:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The number of nodes in the tree is in the range [1, 3 * 104]."}),"\n",(0,a.jsx)(n.li,{children:"-1000 <= Node.val <= 1000"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"solution-\u9012\u5f52",children:"Solution: \u9012\u5f52"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u6ce8\u610f\uff1a"}),"\n"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"inner_max"}),": \u4f5c\u4e3a\u5b50\u6811\uff0c\u6bcf\u6b21\u8981\u8ba1\u7b97\u5305\u62ec\u5f53\u524d\u8282\u70b9\u5728\u5185\u7684\u6700\u5927\u548c\uff0c\u8fd9\u4e2a\u6700\u5927\u548c\u53ea\u80fd\u9009\u62e9\u5de6\u8fb9\u6216\u53f3\u8fb9,\u8fd9\u4e2ainnermax\u53ef\u4ee5\u5728\u6bcf\u4e2adfs\u4e2d\u76f4\u63a5\u8fd4\u56de"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"global_max"}),": \u8ba1\u7b97",(0,a.jsx)(n.code,{children:"global_max"}),"\u65f6\uff0c\u5b50\u6811\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u5219\u90fd\u8981\u8003\u8651"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maxPathSum(self, root):\n        global_max = -float('inf')\n        def dfs(node):\n            nonlocal global_max\n            if not node:\n                return 0\n            left = max(dfs(node.left), 0)\n            right = max(dfs(node.right), 0)\n            inner_max = node.val + max(left, right)\n            global_max = max(global_max, node.val + left + right)\n            return inner_max\n        dfs(root)\n        return global_max    \n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);