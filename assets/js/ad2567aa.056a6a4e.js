"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2436],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>m});var a=t(96540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function m(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}},29909:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Leetcode/Other/918.918 - Maximum Sum Circular Subarray - Medium","title":"918.918 - Maximum Sum Circular Subarray - Medium","description":"tags: [Array, Divide and Conquer, Dynamic Programming, Queue, Monotonic Queue]","source":"@site/docs/Leetcode/99.Other/918.918 - Maximum Sum Circular Subarray - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/f13385dd-7786-46bf-9fcb-a5a8a2746ea7","permalink":"/notes/docs/p/f13385dd-7786-46bf-9fcb-a5a8a2746ea7","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/918.918 - Maximum Sum Circular Subarray - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/f13385dd-7786-46bf-9fcb-a5a8a2746ea7","slug":"/p/f13385dd-7786-46bf-9fcb-a5a8a2746ea7"},"sidebar":"tutorialSidebar","previous":{"title":"900.900 - RLE Iterator - Medium","permalink":"/notes/docs/p/2f72f3cd-03a1-4213-ae1b-1e6bc8a704db"},"next":{"title":"919.919 - Complete Binary Tree Inserter (Medium)","permalink":"/notes/docs/p/fd4b229a-4611-4e47-8b03-b1489200208d"}}');var r=t(74848),i=t(28453);const s={created_at:"2025-10-23",page_link:"/p/f13385dd-7786-46bf-9fcb-a5a8a2746ea7",slug:"/p/f13385dd-7786-46bf-9fcb-a5a8a2746ea7"},m=void 0,u={},c=[];function o(e){const n={code:"code",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"tags: [Array, Divide and Conquer, Dynamic Programming, Queue, Monotonic Queue]"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208181523098.png",alt:""}),"\n",(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208181524269.png",alt:""})]}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u9898\u4e00\u5171\u6709\u4e24\u79cd\u60c5\u51b5\uff08\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6bd453\u9898\u591a\u4e86\u4e00\u79cd\u6700\u5927\u5b50\u6570\u7ec4\u548c\u662f\u9996\u5c3e\u8fde\u63a5\u7684\u60c5\u51b5\uff09\n\u4e0b\u9762\u7684\u8fd9\u4e2a\u5b50\u6570\u7ec4\u6307\u6700\u5927\u548c\u7684\u5b50\u6570\u7ec4"}),"\n",(0,r.jsx)(n.p,{children:"\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u8fd9\u4e2a\u5b50\u6570\u7ec4\u4e0d\u662f\u73af\u72b6\u7684\uff0c\u5c31\u662f\u8bf4\u9996\u5c3e\u4e0d\u76f8\u8fde\u3002\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u8fd9\u4e2a\u5b50\u6570\u7ec4\u4e00\u90e8\u5206\u5728\u9996\u90e8\uff0c\u4e00\u90e8\u5206\u5728\u5c3e\u90e8\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u7b2c\u4e8c\u79cd\u60c5\u51b5\u8f6c\u6362\u6210\u7b2c\u4e00\u79cd\u60c5\u51b5\n\u5982\u4e0b\u56fe\uff1a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208181614682.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\u8fd9\u6700\u5927\u7684\u73af\u5f62\u5b50\u6570\u7ec4\u548c = max(\u6700\u5927\u5b50\u6570\u7ec4\u548c\uff0c\u6570\u7ec4\u603b\u548c-\u6700\u5c0f\u5b50\u6570\u7ec4\u548c)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u6781\u7aef\u60c5\u51b5"}),"\uff1a\u5982\u679c\u8bf4\u8fd9\u6570\u7ec4\u7684\u6240\u6709\u6570\u90fd\u662f\u8d1f\u6570 (e..g, [-1,  -2, -3])\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u516c\u5f0f\u8fd8\u9700\u8981\u53d8\u4e00\u4e0b\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\uff0c"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5bf9\u4e8e\u4e0a\u9762\u7684\u7b2c\u4e00\u79cd\u60c5\u51b5 case 1, max subarray \u7684sum\u4f1a\u7b49\u4e8e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c ([-1])"}),"\n",(0,r.jsx)(n.li,{children:"\u800c\u5bf9\u4e8c\u79cd\u60c5\u51b5\uff0c min_subarray \u4f1a\u5f97\u5230\u6574\u4e2a\u6570\u7ec4 ([-1,  -2, -3])\uff0c\u6240\u4ee5\u5269\u4e0b\u7684max subarray \u957f\u5ea6\u4e3a0\u3002\u4f46\u662fmax subarray \u957f\u5ea6\u4e0d\u80fd\u662f0."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"\u6240\u4ee5\u591a\u52a0\u4e00\u4e2acase\uff0c\u5224\u65ad\u6700\u5927\u5b50\u6570\u7ec4\u548c\u662f\u5426\u5c0f\u4e8e0\uff0c\u5c0f\u4e8e0\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5maxSubArray"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n\tdef maxSubarraySumCircular(self, nums: List[int]) -> int:\n\t\tglobal_max, cur_max = -float('inf'), 0\n\t\tglobal_min, cur_min = float('inf'), 0\n\t\t\n\t\tfor num in nums:\n\t\t\tcur_max = max(num, cur_max + num)\n\t\t\tglobal_max = max(global_max, cur_max)\n\t\t\t\n\t\t\tcur_min = min(num, cur_min + num)\n\t\t\tglobal_min = min(global_min, cur_min)\n\t\t\n\t\tif global_max >= 0:\n\t\t\treturn max(global_max, sum(nums) - global_min)\n\t\telse:\n\t\t\treturn global_max\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);