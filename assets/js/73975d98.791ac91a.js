"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5253],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(96540);const o={},c=t.createContext(o);function a(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(c.Provider,{value:n},e.children)}},81254:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Leetcode/Other/94.94 - Binary Tree Inorder Traversal","title":"94.94 - Binary Tree Inorder Traversal","description":"leetcode link","source":"@site/docs/Leetcode/99.Other/94.94 - Binary Tree Inorder Traversal.md","sourceDirName":"Leetcode/99.Other","slug":"/p/d0c804ce-48d8-4995-a375-a1e1cf0288d8","permalink":"/notes/docs/p/d0c804ce-48d8-4995-a375-a1e1cf0288d8","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/94.94 - Binary Tree Inorder Traversal.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/d0c804ce-48d8-4995-a375-a1e1cf0288d8","slug":"/p/d0c804ce-48d8-4995-a375-a1e1cf0288d8"},"sidebar":"tutorialSidebar","previous":{"title":"939.939 - Minimum Area Rectangle - Medium","permalink":"/notes/docs/p/e9e06530-6c6a-4627-b1ab-2281707422e1"},"next":{"title":"953.953 - Verifying an Alien Dictionary (Easy)","permalink":"/notes/docs/p/9f804dd3-3a93-44b3-be2d-9777b24a268a"}}');var o=r(74848),c=r(28453);const a={created_at:"2025-10-23",page_link:"/p/d0c804ce-48d8-4995-a375-a1e1cf0288d8",slug:"/p/d0c804ce-48d8-4995-a375-a1e1cf0288d8"},s=void 0,i={},d=[{value:"Description:",id:"description",level:2},{value:"Solution",id:"solution",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-inorder-traversal/",children:"leetcode link"}),"\n",(0,o.jsx)(n.a,{href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/python3-er-cha-shu-suo-you-bian-li-mo-ban-ji-zhi-s/",children:"good solution link"})]}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,o.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de\u5b83\u7684 \u4e2d\u5e8f \u904d\u5386\u3002"}),"\n",(0,o.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]: \n        res = []\n        stack = []\n        cur = root\n        # \u4e2d\u5e8f\uff0c\u6a21\u677f\uff1a\u5148\u7528\u6307\u9488\u627e\u5230\u6bcf\u9897\u5b50\u6811\u7684\u6700\u5de6\u4e0b\u89d2\uff0c\u7136\u540e\u8fdb\u884c\u8fdb\u51fa\u6808\u64cd\u4f5c\n        while stack or cur:\n            while cur:\n                stack.append(cur)\n                cur = cur.left\n            cur = stack.pop()\n            res.append(cur.val)\n            cur = cur.right\n        return res      \n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);