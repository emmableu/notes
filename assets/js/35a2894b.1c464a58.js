"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9873],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var t=r(96540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},72026:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Leetcode/DFS/DFS - Tree \u6a21\u7248","title":"DFS - Tree \u6a21\u7248","description":"\u76f8\u5173\u9898","source":"@site/docs/Leetcode/04.DFS/05.DFS - Tree \u6a21\u7248.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/0d1e7a2a-ae0b-4955-9509-d8a10ea6221f","permalink":"/notes/docs/p/0d1e7a2a-ae0b-4955-9509-d8a10ea6221f","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/05.DFS - Tree \u6a21\u7248.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"created_at":"2025-10-23","page_link":"/p/0d1e7a2a-ae0b-4955-9509-d8a10ea6221f","slug":"/p/0d1e7a2a-ae0b-4955-9509-d8a10ea6221f"},"sidebar":"tutorialSidebar","previous":{"title":"04.DFS","permalink":"/notes/docs/category/04dfs"},"next":{"title":"DFS - Backtracking \u6a21\u7248","permalink":"/notes/docs/p/a98e4af7-a3ea-446d-b330-fefde19c0fa1"}}');var s=r(74848),i=r(28453);const l={created_at:"2025-10-23",page_link:"/p/0d1e7a2a-ae0b-4955-9509-d8a10ea6221f",slug:"/p/0d1e7a2a-ae0b-4955-9509-d8a10ea6221f"},o=void 0,d={},a=[{value:"\u76f8\u5173\u9898",id:"\u76f8\u5173\u9898",level:2},{value:"merge sort (\u540e\u5e8f\u904d\u5386) \u7c7b\u4f3c\u9898\uff1a",id:"merge-sort-\u540e\u5e8f\u904d\u5386-\u7c7b\u4f3c\u9898",level:3},{value:"quick sort(\u524d\u5e8f\u904d\u5386)\u7c7b\u4f3c\u9898",id:"quick-sort\u524d\u5e8f\u904d\u5386\u7c7b\u4f3c\u9898",level:3},{value:"DFS - Tree \u9898\u76ee\u6c47\u603b",id:"dfs---tree-\u9898\u76ee\u6c47\u603b",level:3},{value:"0. Basic Template",id:"0-basic-template",level:2},{value:"1.  pre &amp; post order",id:"1--pre--post-order",level:2},{value:"\u524d\u5e8f\u4f4d\u7f6e\uff1a",id:"\u524d\u5e8f\u4f4d\u7f6e",level:3},{value:"\u540e\u5e8f\u904d\u5386\uff1a",id:"\u540e\u5e8f\u904d\u5386",level:3},{value:"2.  Traverse v.s. Divide&amp;Conquer",id:"2--traverse-vs-divideconquer",level:2},{value:"Example: max depth of binary tree",id:"example-max-depth-of-binary-tree",level:3},{value:"traverse solution:",id:"traverse-solution",level:3},{value:"Divide&amp;Conquer solution:",id:"divideconquer-solution",level:3},{value:"144 - Binary Tree Pre-Order Traversal",id:"144---binary-tree-pre-order-traversal",level:3},{value:"Traversal Solution",id:"traversal-solution",level:4},{value:"Divide &amp; Conquer Solution",id:"divide--conquer-solution",level:4},{value:"\u540e\u5e8f\u4f4d\u7f6e\u7684\u7279\u6b8a\u4e4b\u5904 Special Points of Post-Order Traversal",id:"\u540e\u5e8f\u4f4d\u7f6e\u7684\u7279\u6b8a\u4e4b\u5904-special-points-of-post-order-traversal",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\u76f8\u5173\u9898",children:"\u76f8\u5173\u9898"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/blog/tags/?tag=dfs",children:"dfs tag"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"merge-sort-\u540e\u5e8f\u904d\u5386-\u7c7b\u4f3c\u9898",children:"merge sort (\u540e\u5e8f\u904d\u5386) \u7c7b\u4f3c\u9898\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/5d7c1e/#%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF",children:"\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/2a07fa/",children:"162 - 315 - Count of Smaller Numbers After Self - Hard"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/f23829/",children:"278 - 23-Merge k Sorted Lists"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"quick-sort\u524d\u5e8f\u904d\u5386\u7c7b\u4f3c\u9898",children:"quick sort(\u524d\u5e8f\u904d\u5386)\u7c7b\u4f3c\u9898"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"kth largest"}),"\n",(0,s.jsx)(n.li,{children:"\u4e00\u822cin place \u4fee\u6539tree \u90fd\u8981\u7528\u5230\u524d\u5e8f\u904d\u5386\uff0c\u6bd4\u5982 invert binary tree, \u8fd8\u6709 remove node and return forest"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dfs---tree-\u9898\u76ee\u6c47\u603b",children:"DFS - Tree \u9898\u76ee\u6c47\u603b"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/3f3a6a/",children:"2096 - Step-By-Step Directions From a Binary Tree Node to Another"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/e75aac/",children:"366 - Find Leaves of Binary Tree"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/pages/11c420/",children:"1376 - Time Needed to Inform All Employees"})," (\u5efa\u56fe\u6bd4\u8f83tricky)"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/738d09/",children:"652 - Find Duplicate Subtrees"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/febfc1/",children:"089 - 549 - Binary Tree Longest Consecutive Sequence II - Medium"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/891221/",children:"126 - 1110-Delete Nodes And Return Forest"})}),"\n",(0,s.jsxs)(n.li,{children:["Serialize and deserialize:\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/b948a3/",children:"282 - 297-Serialize and Deserialize Binary Tree"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/pages/2e33f2/",children:"082 - 428 - Serialize and Deserialize N-ary Tree - Hard"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"understanding-tree-problems",children:"Understanding Tree Problems"}),"\n",(0,s.jsx)(n.h2,{id:"0-basic-template",children:"0. Basic Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def traverse(node: TreeNode):\n\tif node == leaf node:\n\t\treturn\n\t# preorder position\n\ttraverse(node.left)\n\t#mid-order position\n\ttraverse(node.right)\n\t#post-order position\n"})}),"\n",(0,s.jsx)(n.h2,{id:"1--pre--post-order",children:"1.  pre & post order"}),"\n",(0,s.jsx)(n.h3,{id:"\u524d\u5e8f\u4f4d\u7f6e",children:"\u524d\u5e8f\u4f4d\u7f6e\uff1a"}),"\n",(0,s.jsx)(n.p,{children:"example 1: \u987a\u5e8f\u6253\u5370"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def dfs(nums, i):  \n    if i == len(nums):  \n        return  \n    print(nums[i])  \n    dfs(nums, i + 1)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["example 2: quick sort\n",(0,s.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/792a7c/",children:"https://emmableu.github.io/blog/pages/792a7c/"}),"\n\u5feb\u901f\u6392\u5e8f\u7684\u903b\u8f91\u662f\uff0c\u82e5\u8981\u5bf9\xa0",(0,s.jsx)(n.code,{children:"nums[lo..hi]"}),"\xa0\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u5148\u627e\u4e00\u4e2a\u5206\u754c\u70b9\xa0",(0,s.jsx)(n.code,{children:"p"}),"\uff0c\u901a\u8fc7\u4ea4\u6362\u5143\u7d20\u4f7f\u5f97\xa0",(0,s.jsx)(n.code,{children:"nums[lo..p-1]"}),"\xa0\u90fd\u5c0f\u4e8e\u7b49\u4e8e\xa0",(0,s.jsx)(n.code,{children:"nums[p]"}),"\uff0c\u4e14\xa0",(0,s.jsx)(n.code,{children:"nums[p+1..hi]"}),"\xa0\u90fd\u5927\u4e8e\xa0",(0,s.jsx)(n.code,{children:"nums[p]"}),"\uff0c\u7136\u540e\u9012\u5f52\u5730\u53bb\xa0",(0,s.jsx)(n.code,{children:"nums[lo..p-1]"}),"\xa0\u548c\xa0",(0,s.jsx)(n.code,{children:"nums[p+1..hi]"}),"\xa0\u4e2d\u5bfb\u627e\u65b0\u7684\u5206\u754c\u70b9\uff0c\u6700\u540e\u6574\u4e2a\u6570\u7ec4\u5c31\u88ab\u6392\u5e8f\u4e86\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u5feb\u901f\u6392\u5e8f\u7684\u4ee3\u7801\u6846\u67b6\u5982\u4e0b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def quick_sort(nums:List, lo:int, hi:int):\n    # p = partition(...) \u524d\u5e8f\u4f4d\u7f6e\uff0c\u4fdd\u8bc1p\u524d\u9762\u90fd\u6bd4nums[p]\u5c0f,p\u540e\u9762\u90fd\u6bd4nums[p]\u5927\n    quick_sort(nums, lo, p - 1)\n    quick_sort(nums, p + 1, hi)\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u5148\u6784\u9020\u5206\u754c\u70b9\uff0c\u7136\u540e\u53bb\u5de6\u53f3\u5b50\u6570\u7ec4\u6784\u9020\u5206\u754c\u70b9\uff0c\u4f60\u770b\u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u5417\uff1f"}),"\n",(0,s.jsx)(n.h3,{id:"\u540e\u5e8f\u904d\u5386",children:"\u540e\u5e8f\u904d\u5386\uff1a"}),"\n",(0,s.jsx)(n.p,{children:"example 1: \u5012\u5e8f\u6253\u5370"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"def dfs(nums, i):\n\tif i == len(nums):\n\t\treturn\n\tdfs(nums, i + 1)\n\tprint(nums[i])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["example 2: merge sort\n",(0,s.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/792a7c/",children:"https://emmableu.github.io/blog/pages/792a7c/"}),"\n\u518d\u8bf4\u8bf4\u5f52\u5e76\u6392\u5e8f\u7684\u903b\u8f91\uff0c\u82e5\u8981\u5bf9\xa0",(0,s.jsx)(n.code,{children:"nums[lo..hi]"}),"\xa0\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u5148\u5bf9\xa0",(0,s.jsx)(n.code,{children:"nums[lo..mid]"}),"\xa0\u6392\u5e8f\uff0c\u518d\u5bf9\xa0",(0,s.jsx)(n.code,{children:"nums[mid+1..hi]"}),"\xa0\u6392\u5e8f\uff0c\u6700\u540e\u628a\u8fd9\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u6570\u7ec4\u5408\u5e76\uff0c\u6574\u4e2a\u6570\u7ec4\u5c31\u6392\u597d\u5e8f\u4e86\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u5f52\u5e76\u6392\u5e8f\u7684\u4ee3\u7801\u6846\u67b6\u5982\u4e0b\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def merge_sort(nums, lo, hi):\n\tmid = (lo + hi) // 2\n\tmerge_sort(nums, lo, mid)\n\tmerge_sort(nums, mid+1, hi)\n\t# \u540e\u5e8f\u4f4d\u7f6e\uff1a\u5408\u5e76\n\tmerge(nums, lo, mid, hi)\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u8bf7\u5206\u6790\uff0c\u540e\u5e8f\u904d\u5386\u6709\u4ec0\u4e48\u7279\u6b8a\u4e4b\u5904\uff1f"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"it has a return value that can come back to the root"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u8bf7\u5206\u6790\uff0c\u4e3a\u4ec0\u4e48\u591a\u53c9\u6811\u6ca1\u6709\u4e2d\u5e8f\u904d\u5386\uff1f"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"\u4e2d\u5e8fis between pre and post order"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u524d\u4e2d\u540e\u5e8f\u662f\u904d\u5386\u4e8c\u53c9\u6811\u8fc7\u7a0b\u4e2d\u5904\u7406\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u4e09\u4e2a\u7279\u6b8a\u65f6\u95f4\u70b9"}),"\uff1a"]}),"\n",(0,s.jsx)(n.p,{children:"\u524d\u5e8f\u4f4d\u7f6e\u7684\u4ee3\u7801\u5728\u521a\u521a\u8fdb\u5165\u4e00\u4e2a\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u65f6\u5019\u6267\u884c\uff1b"}),"\n",(0,s.jsx)(n.p,{children:"\u540e\u5e8f\u4f4d\u7f6e\u7684\u4ee3\u7801\u5728\u5c06\u8981\u79bb\u5f00\u4e00\u4e2a\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u65f6\u5019\u6267\u884c\uff1b"}),"\n",(0,s.jsx)(n.p,{children:"\u4e2d\u5e8f\u4f4d\u7f6e\u7684\u4ee3\u7801\u5728\u4e00\u4e2a\u4e8c\u53c9\u6811\u8282\u70b9\u5de6\u5b50\u6811\u90fd\u904d\u5386\u5b8c\uff0c\u5373\u5c06\u5f00\u59cb\u904d\u5386\u53f3\u5b50\u6811\u7684\u65f6\u5019\u6267\u884c\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"2--traverse-vs-divideconquer",children:"2.  Traverse v.s. Divide&Conquer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"traverse: \u4f20\u53c2, and/or make operation (e.g., add 1) at pre-order position"}),"\n",(0,s.jsxs)(n.li,{children:["divide&conquer: \u4f20\u503c\uff0cmake operation (e.g., add 1) at post-order position.\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u540e\u5e8f\u4f4d\u7f6e\uff0c\u505adivide&conquer\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5229\u7528\u8fd4\u56de\u503c\uff0c\u8ba9\u6211\u4eec\u5728\u5904\u7406\u5f53\u524dnode\u7684\u65f6\u5019\u77e5\u9053children\u7684\u4fe1\u606f"}),"\n",(0,s.jsx)(n.li,{children:"divide&conquer\u7684\u65f6\u5019\uff0c\u662f\u628a\u95ee\u9898\u62c6\u6210\u5b50\u95ee\u9898\uff0ce.g., max_depth of a tree \u53ef\u4ee5\u5229\u7528\u5b50\u6570\u7684\u6700\u5927\u6df1\u5ea6\u8fd4\u56deroot\u7684\u6700\u5927\u6df1\u5ea6\u3002"}),"\n",(0,s.jsx)(n.li,{children:"divide&conquer \u7ecf\u5e38\u4e0d\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\uff0c\u76f4\u63a5\u7528\u9898\u7ed9\u51fd\u6570\u5c31\u80fd\u89e3\u9898"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-max-depth-of-binary-tree",children:"Example: max depth of binary tree"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/",children:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202506050013577.png",alt:""})}),"\n",(0,s.jsx)(n.h3,{id:"traverse-solution",children:"traverse solution:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        return self.dfs(root, 0)\n        \n    def dfs(self, node: Optional[TreeNode], cur_depth: int) -> int:\n        if node is None:\n            return cur_depth\n        left_depth = self.dfs(node.left, cur_depth + 1)\n        right_depth = self.dfs(node.right, cur_depth + 1)\n        return max(left_depth, right_depth)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"divideconquer-solution",children:"Divide&Conquer solution:"}),"\n",(0,s.jsx)(n.p,{children:"\u5229\u7528\u5b50\u6570\u7684\u6700\u5927\u6df1\u5ea6\u8fd4\u56deroot\u7684\u6700\u5927\u6df1\u5ea6"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        left_max_depth = self.maxDepth(root.left)\n        right_max_depth = self.maxDepth(root.right)\n        return max(left_max_depth, right_max_depth) + 1\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u533a\u522b\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"traverse \u662f+1 \u4eceroot\u5f80leaf\u4f20\u5bfc"}),"\n",(0,s.jsx)(n.li,{children:"divide&conquer\u662f+1 \u4eceleaf\u5f80root\u4f20\u5bfc"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"144---binary-tree-pre-order-traversal",children:"144 - Binary Tree Pre-Order Traversal"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-preorder-traversal/description/",children:"https://leetcode.com/problems/binary-tree-preorder-traversal/description/"})}),"\n",(0,s.jsx)(n.h4,{id:"traversal-solution",children:"Traversal Solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        res = []\n        self.dfs(root, res)\n        return res \n    def dfs(self, node, res):\n        if node is None:\n            return\n        res.append(node.val)\n        self.dfs(node.left, res)\n        self.dfs(node.right, res)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"divide--conquer-solution",children:"Divide & Conquer Solution"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u7ed3\u679c = \u6839\u8282\u70b9 + \u5de6\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u7ed3\u679c + \u53f3\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u7ed3\u679c"}),"\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'"""\n            1\n        /       \\\n      2           3\n     / \\\n    4   5\n[1,2,4,5,3]\ne.g., 2,4,5 -> root, left, right\n1, (2, 4, 5), 3 -> root, left, right\ni.e., for each subtree, it is always root, left, right\n"""\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        if root is None:\n            return []\n        left = self.preorderTraversal(root.left)\n        right = self.preorderTraversal(root.right)\n        return [root.val] + left + right\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\u540e\u5e8f\u4f4d\u7f6e\u7684\u7279\u6b8a\u4e4b\u5904-special-points-of-post-order-traversal",children:"\u540e\u5e8f\u4f4d\u7f6e\u7684\u7279\u6b8a\u4e4b\u5904 Special Points of Post-Order Traversal"}),"\n",(0,s.jsx)(n.p,{children:"\u524d\u5e8f\u4f4d\u7f6e\u7684\u4ee3\u7801\u53ea\u80fd\u4ece\u51fd\u6570\u53c2\u6570\u4e2d\u83b7\u53d6\u7236\u8282\u70b9\u4f20\u9012\u6765\u7684\u6570\u636e\uff0c\u800c\u540e\u5e8f\u4f4d\u7f6e\u7684\u4ee3\u7801\u4e0d\u4ec5\u53ef\u4ee5\u83b7\u53d6\u53c2\u6570\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u83b7\u53d6\u5230\u5b50\u6811\u901a\u8fc7\u51fd\u6570\u8fd4\u56de\u503c\u4f20\u9012\u56de\u6765\u7684\u6570\u636e\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4e3e\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u73b0\u5728\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6211\u95ee\u4f60\u4e24\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff1a\n1\u3001\u5982\u679c\u628a\u6839\u8282\u70b9\u770b\u505a\u7b2c 1 \u5c42\uff0c\u5982\u4f55\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u6240\u5728\u7684\u5c42\u6570\uff1f\ne.g.,"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\t\t\t1\n\t\t/       \\\n\t  2          5\n\t / \\\n\t3   4\n"})}),"\n",(0,s.jsxs)(n.p,{children:["return: ",(0,s.jsx)(n.code,{children:"{0:1, 2:1, 3:2, 4:2, 5:1}"})]}),"\n",(0,s.jsx)(n.p,{children:"2\u3001\u5982\u4f55\u6253\u5370\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u5404\u6709\u591a\u5c11\u8282\u70b9\uff1f\ne.g.,"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\t\t\t1\n\t\t/       \\\n\t  2          5\n\t / \\\n\t3   4\n"})}),"\n",(0,s.jsxs)(n.p,{children:["return: ",(0,s.jsx)(n.code,{children:"{1: 4, 2: 2, 3: 0, 4: 0, 5: 0}"})]}),"\n",(0,s.jsx)(n.p,{children:"\u7b2c\u4e00\u4e2a\u95ee\u9898\u53ef\u4ee5\u8fd9\u6837\u5199\u4ee3\u7801\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def node_to_level(root: TreeNode):\n\tres = {}\n\tself.dfs(root, 0, res)\n\treturn res \n\t\ndef dfs(node: Optional[TreeNode], level: int, res: dict):\n\tif node is None:\n\t\treturn\n\tres[node.val] = level \n\tself.dfs(node.left, level + 1, res)\n\tself.dfs(node.right, level + 1, res)\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ef\u4ee5\u8fd9\u6837\u5199\u4ee3\u7801\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def node_to_count(root: TreeNode):  \n    res = {}  \n  \n    def dfs(node: TreeNode): #total, including root itself.  \n       if node is None:  \n          return 0  \n       left_cnt = dfs(node.left)  \n       right_cnt = dfs(node.right)  \n       res[node.val] = left_cnt + right_cnt  \n       return left_cnt + right_cnt + 1  \n  \n    dfs(root)  \n  \n    return res\ns```\n\n\n\u603b\u7ed3\uff1a\n1. \u524d\u5e8f\u4f4d\u7f6e\uff1a\u4f20\u53c2\n2. \u540e\u5e8f\u4f4d\u7f6e\uff1a\u8fd4\u56de\u4f20\u503c\uff0c \u8fd8\u53ef\u4ee5\u7528global variable update\u4e00\u4e2a\u503c\uff0c\u6bd4\u5982\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\n\n\n## Another problem using postorder position\n## 543 - Diameter of Binary Tree\n[LC link](https://leetcode.com/problems/diameter-of-binary-tree/)\n[explanation](https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/hot-100-9er-cha-shu-de-zhi-jing-python3-di-gui-ye-/)\n### \u7c7b\u4f3c\u9898\uff1a[n\u53c9\u6811\u5468\u957f](https://emmableu.github.io/blog/pages/430475)\n\n\n### Description:\nGiven the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.\n\nExample 1\n"})}),"\n",(0,s.jsx)(n.p,{children:"Input: root = [1,2,3,4,5]\n1\n- 2\n- 4\n- 5\n- 3\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3]."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Example 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"input: root = [1,2]\noutput: 1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n\u89e3\u51b3\u8fd9\u9898\u7684\u5173\u952e\u5728\u4e8e\uff0c**\u6bcf\u4e00\u6761\u4e8c\u53c9\u6811\u7684\u300c\u76f4\u5f84\u300d\u957f\u5ea6\uff0c\u5c31\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\u4e4b\u548c**\u3002\n\nroot\u7684diameter = max(root.left\u7684\u6df1\u5ea6, root.right\u7684\u6df1\u5ea6\uff09+ 1\n\u5148\u7b97vertex\n\u6240\u4ee5\nnode = none: \u6df1\u5ea6= 0\n\u6ca1\u6709left \u548c right\u7684node\uff1a\u6df1\u5ea6=1\n\u540e\u9762\u7b97length\u7528\u7684\u662fedge\uff0c\u6240\u4ee5\u4f1a\u6bd4vertex\u6570\u91cf\u5c111\n\n\u4f46\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2anode\uff0c\u90fd\u8981\u989d\u5916keep\u4e00\u4e2amax_len\uff0c\n\u56e0\u4e3a\n![](https://raw.githubusercontent.com/emmableu/image/master/202506062052854.png)\n\n\u5b83\u7684\u6700\u957f\u76f4\u5f84\u662f 3\uff0c\u5373\xa0`[4,2,1,3]`\xa0\u6216\u8005\xa0`[5,2,1,3]`\xa0\u8fd9\u4e24\u6761\u300c\u76f4\u5f84\u300d\u7684\u957f\u5ea6\u3002\n\n\n## Method\n\n- `max_len`: global \u7684 max diameter\n- dfs \u8981return\uff1a\u4ee5\u5f53\u524droot\u4e3aroot\uff0c\u5de6\uff0c\u53f3path\u4e2d\u957f\u7684\u90a3\u6761\n\n## My solution\n```python\nclass Solution:\n\n    def __init__(self):\n        self.max_len = 0\n\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        self.dfs(root)\n        return self.max_len\n\n    def dfs(self, node: Optional[TreeNode]) -> int: # get the maxlen len of *vertex* between left and right\n        if node is None:\n            return 0\n        left = self.dfs(node.left)\n        right = self.dfs(node.right)\n        self.max_len = max(self.max_len, left + right)\n        return max(left, right) + 1\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);