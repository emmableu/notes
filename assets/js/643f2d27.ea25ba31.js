"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6585],{28453:(t,n,e)=>{e.d(n,{R:()=>l,x:()=>s});var i=e(96540);const r={},a=i.createContext(r);function l(t){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof t?t(n):{...n,...t}},[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:l(t.components),i.createElement(a.Provider,{value:n},t.children)}},52348:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Leetcode/BFS/1284.1284 - Minimum Number of Flips to Convert Binary Matrix to Zero Matrix - Hard","title":"1284.1284 - Minimum Number of Flips to Convert Binary Matrix to Zero Matrix - Hard","description":"tags: [Array, Bit Manipulation, Breadth-First Search, Matrix]","source":"@site/docs/Leetcode/01.BFS/1284.1284 - Minimum Number of Flips to Convert Binary Matrix to Zero Matrix - Hard.md","sourceDirName":"Leetcode/01.BFS","slug":"/p/ac591e43-ceff-49cc-b091-f865af1df4df","permalink":"/notes/docs/p/ac591e43-ceff-49cc-b091-f865af1df4df","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/01.BFS/1284.1284 - Minimum Number of Flips to Convert Binary Matrix to Zero Matrix - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/ac591e43-ceff-49cc-b091-f865af1df4df","slug":"/p/ac591e43-ceff-49cc-b091-f865af1df4df"},"sidebar":"tutorialSidebar","previous":{"title":"127.127 - Word Ladder - Hard","permalink":"/notes/docs/p/16b6dcd6-b2ee-4b46-af58-0406c9321b4d"},"next":{"title":"1293.1293 - Shortest Path in a Grid with Obstacles Elimination - Hard","permalink":"/notes/docs/p/20691be8-2380-4c54-b056-0c3d053a1c08"}}');var r=e(74848),a=e(28453);const l={created_at:"2025-10-23",page_link:"/p/ac591e43-ceff-49cc-b091-f865af1df4df",slug:"/p/ac591e43-ceff-49cc-b091-f865af1df4df"},s=void 0,c={},o=[{value:"\u9898\u9762\u89e3\u91ca",id:"\u9898\u9762\u89e3\u91ca",level:2},{value:"\u4f4d\u8fd0\u7b97\u516c\u5f0f",id:"\u4f4d\u8fd0\u7b97\u516c\u5f0f",level:2},{value:"\u4e3a\u4ec0\u4e48\u7528BFS: \u56e0\u4e3a\u8fd9\u4e2a\u662f\u641c\u7d22\u95ee\u9898 + \u6c42\u4ea7\u751f\u6700\u5c11\u641c\u7d22\u7684\u65b9\u6cd5",id:"\u4e3a\u4ec0\u4e48\u7528bfs-\u56e0\u4e3a\u8fd9\u4e2a\u662f\u641c\u7d22\u95ee\u9898--\u6c42\u4ea7\u751f\u6700\u5c11\u641c\u7d22\u7684\u65b9\u6cd5",level:2},{value:"\u53cc\u5411BFS:",id:"\u53cc\u5411bfs",level:2}];function d(t){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"tags: [Array, Bit Manipulation, Breadth-First Search, Matrix]"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.cn/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/",children:"LC Link"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208130005689.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"\u9898\u9762\u89e3\u91ca",children:"\u9898\u9762\u89e3\u91ca"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208130017865.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u4f60\u7ffb\u8f6c\u4e86\u4e0a\u56fe(1,1)\u4f4d\u7f6e\uff0c\u90a3\u5b83\u548c\u65c1\u8fb9\u56db\u4e2a\u90fd\u8981\u7ffb\u8f6c\uff0c1\u53d80,0\u53d81"}),"\n",(0,r.jsx)(n.h2,{id:"\u4f4d\u8fd0\u7b97\u516c\u5f0f",children:"\u4f4d\u8fd0\u7b97\u516c\u5f0f"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\u628avalue\u7684index\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c",(0,r.jsx)(n.code,{children:"value |= 1 << index"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:">>> a = 0b000\n>>> a |= 1 << 2\n>>> bin(a)\n'0b100'  \n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["\u628avalue\u7684index\u4f4d\u53d6\u53cd\uff0c",(0,r.jsx)(n.code,{children:"value ^= 1 << index"}),"\n\u5177\u4f53\u89c1 ",(0,r.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/9b57bd/#%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-xor",children:"\u5f02\u6216\u8fd0\u7b97"}),"  - \u4e0e1\u76f8\u5f02\u53d6\u53cd\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:">>> a = 0b111\n>>> a ^= 1 << 2\n>>> bin(a)\n'0b11' # \uff08\u5176\u5b9e\u4e5f\u5c31\u662f 0b011), \u7ffb\u8f6c\u4e86\u4ece\u540e\u5f80\u524d\u7b2c\u4e8c\u4f4d\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u800c\u4e14\uff0c ",(0,r.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/9b57bd/#%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-xor",children:"\u5f02\u6216\u8fd0\u7b97"}),"  - \u4e0e0\u76f8\u5f02\uff0c\u503c\u4e0d\u53d8\u3002\n3. \u5224\u65advalue\u7684idx\u4f4d\u662f\u5426\u662f1: ",(0,r.jsx)(n.code,{children:"a >> idx & 1 == 1"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"a = 0b1010\na >> 0 & 1\nOut[16]: 0\n\na >> 1 & 1\nOut[17]: 1\n\na >> 2 & 1\nOut[18]: 0\n\na >> 3 & 1\nOut[19]: 1\n\na >> 4 & 1\nOut[20]: 0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u4e3a\u4ec0\u4e48\u7528bfs-\u56e0\u4e3a\u8fd9\u4e2a\u662f\u641c\u7d22\u95ee\u9898--\u6c42\u4ea7\u751f\u6700\u5c11\u641c\u7d22\u7684\u65b9\u6cd5",children:"\u4e3a\u4ec0\u4e48\u7528BFS: \u56e0\u4e3a\u8fd9\u4e2a\u662f\u641c\u7d22\u95ee\u9898 + \u6c42\u4ea7\u751f\u6700\u5c11\u641c\u7d22\u7684\u65b9\u6cd5"}),"\n",(0,r.jsx)(n.p,{children:"\u6ce8\u610f\u662f\u53cd\u8f6c\u76f8\u90bb\u5355\u5143\u683c\uff0c\u4e0d\u662f\u540c\u884c\u548c\u540c\u5217\u7684\u6240\u6709\u5143\u7d20"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from collections import deque\nclass Solution:\n\tdef minFlips(self, mat: List[List[int]]) -> int:\n\t\tm, n = len(mat), len(mat[0])\n\t\tflat = "".join(["".join([str(ele) for ele in row]) for row in mat])\n\t\tflat = int(flat, base = 2)\n\t\tif flat == 0:\n\t\t\treturn 0\n\t\tstep = 0\n\t\tq = deque([flat])\n\t\tvis = {flat}\n\t\twhile q:\n\t\t\tstep += 1\n\t\t\tsize = len(q)\n\t\t\tfor _ in range(size):\n\t\t\t\tprev_flipped = q.popleft()\n\t\t\t\tfor r in range(m):\n\t\t\t\t\tfor c in range(n):\n\t\t\t\t\t\tflipped = self.flip(prev_flipped, r, c, m, n)\n\t\t\t\t\t\tif flipped == 0:\n\t\t\t\t\t\t\treturn step\n\t\t\t\t\t\tif flipped not in vis:\n\t\t\t\t\t\t\tq.append(flipped)\n\t\t\t\t\t\t\tvis.add(flipped)\n\t\treturn -1\n\n\tdef flip(self, flat, r, c, m, n):\n\t\tfor x, y in (r, c), (r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1):\n\t\t\tif 0 <= x < m and 0 <= y < n:\n\t\t\t\tflat ^= 1 << m * n - 1 - (x * n + y)\n\t\treturn flat\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\u53cc\u5411bfs",children:"\u53cc\u5411BFS:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Solution:\n\tdef minFlips(self, mat: List[List[int]]) -> int:\n\t\tm, n = len(mat), len(mat[0])\n\t\tflat = "".join(["".join([str(ele) for ele in row]) for row in mat])\n\t\tflat = int(flat, base = 2)\n\t\tstep = 0\n\t\tif flat == 0:\n\t\t\treturn step\n\t\tq1, q2 = set([flat]), set([0])\n\t\tvis = {flat}\n\t\twhile q1 and q2: \n\t\t\t# ^\u4e3a\u4ec0\u4e48\u662fand \u4e0d\u662for\uff1a \u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u7a7a\u4e86\uff0c\u90a3\u4e48\u4e24\u8fb9\u4e0d\u53ef\u80fd\u91cd\u5408\u4e86\uff0c\n\t\t\t# \u4e5f\u5c31\u662f\u8bf4\u67d0\u4e00\u4e2a\u65b9\u5411\u7684\u641c\u7d22\u5df2\u7ecf\u7ed3\u675f\u4e86\u3002\n\t\t\tif len(q2) < len(q1):\n\t\t\t\tq1, q2 = q2, q1\n\t\t\tstep += 1\n\t\t\ttemp = set()\n\t\t\tfor prev_flipped in q1:\n\t\t\t\tfor r in range(m):\n\t\t\t\t\tfor c in range(n):\n\t\t\t\t\t\tflipped = self.flip(prev_flipped, r, c, m, n)\n\t\t\t\t\t\tif flipped in q2:\n\t\t\t\t\t\t\treturn step\n\t\t\t\t\t\tif flipped not in vis:\n\t\t\t\t\t\t\tvis.add(flipped)\n\t\t\t\t\t\t\ttemp.add(flipped)\n\t\t\tq1 = temp\n\t\treturn -1\n\n\tdef flip(self, flat, r, c, m, n):\n\t\tfor x, y in (r, c), (r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1):\n\t\t\tif 0 <= x < m and 0 <= y < n:\n\t\t\t\tflat ^= 1 << m * n - 1 - (x * n + y)\n\t\treturn flat\n'})})]})}function f(t={}){const{wrapper:n}={...(0,a.R)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(d,{...t})}):d(t)}}}]);