"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2846],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(96540);const d={},s=r.createContext(d);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},69966:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/DFS/282.282 - Expression Add Operators - Hard","title":"282.282 - Expression Add Operators - Hard","description":"LC Link","source":"@site/docs/Leetcode/04.DFS/282.282 - Expression Add Operators - Hard.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/9f4bd39f-b0ec-4d31-97d2-0289deed74dd","permalink":"/notes/docs/p/9f4bd39f-b0ec-4d31-97d2-0289deed74dd","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/282.282 - Expression Add Operators - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/9f4bd39f-b0ec-4d31-97d2-0289deed74dd","slug":"/p/9f4bd39f-b0ec-4d31-97d2-0289deed74dd"},"sidebar":"tutorialSidebar","previous":{"title":"236.236 - Lowest Common Ancestor of a Binary Tree - \u53ea\u6709left right \u6307\u9488","permalink":"/notes/docs/p/9c90b124-d53b-4232-8800-bb7e4065d546"},"next":{"title":"297.297 - Serialize and Deserialize Binary Tree - Hard","permalink":"/notes/docs/p/d7066f50-63ea-4bdd-aa42-dabbe3e87f3c"}}');var d=t(74848),s=t(28453);const a={created_at:"2025-10-23",page_link:"/p/9f4bd39f-b0ec-4d31-97d2-0289deed74dd",slug:"/p/9f4bd39f-b0ec-4d31-97d2-0289deed74dd"},o=void 0,i={},c=[{value:"Solution: DFS",id:"solution-dfs",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.p,{children:(0,d.jsx)(n.a,{href:"https://leetcode.cn/problems/expression-add-operators/",children:"LC Link"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208191149068.png",alt:""})}),"\n",(0,d.jsx)(n.h2,{id:"solution-dfs",children:"Solution: DFS"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"        1                     10                105\n    +0  -0  *0          +5  -5  *5                  \n+5 -5 *5\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def addOperators(self, num: str, target: int):\n        res = []\n        self.dfs(num, target, [], res, 0, 0, 0)\n        return res  \n        \n    def dfs(self, num, target, path, res, evalt, prev, idx):\n        if idx == len(num):\n            if evalt == target:\n                res.append("".join(path))\n        \n        for i in range(idx, len(num)):\n            cur_str = num[idx: i+1]\n            if cur_str[0] == "0" and i > idx:\n                break \n            # \u6bd4\u5982\u5982\u679c\u5f97\u5230\u7684\u662f 05 \u5c31\u8df3\u51fa\u5faa\u73af\n            # \u8fd9\u662f\u56e0\u4e3a\u8fd4\u56de\u8868\u8fbe\u5f0f\u4e2d\u7684\u64cd\u4f5c\u6570\xa0**\u4e0d\u5e94\u8be5**\xa0\u5305\u542b\u524d\u5bfc\u96f6\u3002\n            # \u5149\u662f0\u4e0d\u80fdbreak\uff0c\u6bd4\u5982 1*0+5\n            cur = int(cur_str)\n            if idx == 0: #\u8fd9\u4e2acondition\u4e0d\u8981\u5fd8\u4e86\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u5176\u5b9e\u5c31\u662f0 + \u7b2c\u4e00\u4e2a\u6570\u5b57\n                self.dfs(num, target, [cur_str], res, evalt + cur, cur, i + 1)\n            else:\n                self.dfs(num, target, path + ["+" + cur_str], \n                         res, evalt + cur, cur, i+1) # +\n                self.dfs(num, target, path + ["-" + cur_str], \n                         res, evalt - cur, -cur, i+1) # - \n                self.dfs(num, target, path + ["*" + cur_str], \n                         res, evalt - prev + prev*cur, prev*cur, i+1) # *\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}}}]);