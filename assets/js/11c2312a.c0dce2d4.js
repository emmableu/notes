"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9757],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var d=r(96540);const i={},t=d.createContext(i);function s(e){const n=d.useContext(t);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),d.createElement(t.Provider,{value:n},e.children)}},79309:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"Leetcode/DFS/463.463 - Island Perimeter - Easy","title":"463.463 - Island Perimeter - Easy","description":"Description:","source":"@site/docs/Leetcode/04.DFS/463.463 - Island Perimeter - Easy.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/0430cc4b-7df3-4cfd-a52f-3d5d06cfdbb5","permalink":"/notes/docs/p/0430cc4b-7df3-4cfd-a52f-3d5d06cfdbb5","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/463.463 - Island Perimeter - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/0430cc4b-7df3-4cfd-a52f-3d5d06cfdbb5","slug":"/p/0430cc4b-7df3-4cfd-a52f-3d5d06cfdbb5"},"sidebar":"tutorialSidebar","previous":{"title":"428.428 - Serialize and Deserialize N-ary Tree - Hard","permalink":"/notes/docs/p/5fb4c94a-dbcc-4cc2-8a67-9712528fecce"},"next":{"title":"489.489 - Robot Room Cleaner - Hard","permalink":"/notes/docs/p/65c983af-4f2d-4e03-b883-d0eba724c01f"}}');var i=r(74848),t=r(28453);const s={created_at:"2025-10-23",page_link:"/p/0430cc4b-7df3-4cfd-a52f-3d5d06cfdbb5",slug:"/p/0430cc4b-7df3-4cfd-a52f-3d5d06cfdbb5"},c=void 0,l={},a=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248:",id:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248",level:2},{value:"Solution: DFS",id:"solution-dfs",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,i.jsx)(n.p,{children:"You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water."}),"\n",(0,i.jsx)(n.p,{children:"Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells)."}),"\n",(0,i.jsx)(n.p,{children:"The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Example 1:\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\nOutput: 16\nExplanation: The perimeter is the 16 yellow stripes in the image above.\n\nExample 2:\nInput: grid = [[1]]\nOutput: 4\n\nExample 3:\nInput: grid = [[1,0]]\nOutput: 4\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248",children:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248:"}),"\n",(0,i.jsxs)(n.p,{children:["\u53c2\u8003\uff08",(0,i.jsx)(n.a,{href:"https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/%EF%BC%89",children:"https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/\uff09"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def func(self, grid: List[List[str]]) -> int:\n        # \u9898\u76ee\u8981\u6c42\u7684function\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == "1":\n                    # \u9898\u76ee\u8981\u6c42\u7684\u4e1c\u897f\n                    self.dfs(grid, r, c)\n        return #\u9898\u76ee\u8981\u6c42\u7684function\n        \n    def dfs(self, grid, r, c):\n        # base case\uff1a\u5982\u679c\u5750\u6807\u8d85\u51fa\u7f51\u683c\uff0c\u76f4\u63a5\u8fd4\u56de\n        if not self.in_area(grid, r, c):\n            return\n        if grid[r][c] != "1":\n            return \n        grid[r][c] = "2" #\u6807\u8bb0\u4ee5\u9632\u6b62\u91cd\u590dvisit\n        self.dfs(grid, r-1, c)\n        self.dfs(grid, r+1, c)\n        self.dfs(grid, r, c-1)\n        self.dfs(grid, r, c+1)\n        \n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n'})}),"\n",(0,i.jsx)(n.h2,{id:"solution-dfs",children:"Solution: DFS"}),"\n",(0,i.jsxs)(n.p,{children:["\u91cd\u70b9\uff1a\u5728 dfs\u4e2d ",(0,i.jsx)(n.code,{children:"in_area"})," \u6216\u8005 ",(0,i.jsx)(n.code,{children:"grid[r][c]==0"})," \u90fd\u8bf4\u660e\u5230\u4e86\u8fb9\u754c\uff0c\u6240\u4ee5\u90fdreturn 1"]}),"\n",(0,i.jsxs)(n.p,{children:["\u6700\u540ereturn ",(0,i.jsx)(n.code,{children:"lt + rt + up + lo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 1:\n                    p = self.dfs(grid, r, c)\n                    return p\n                                \n    def dfs(self, grid, r, c):\n        if not self.in_area(grid, r, c):\n            return 1\n        if grid[r][c] == 0:\n            return 1\n        if grid[r][c] == 2:\n            return 0\n            \n        grid[r][c] = 2\n        \n        lt = self.dfs(grid, r-1, c)\n        rt = self.dfs(grid, r+1, c)\n        up = self.dfs(grid, r, c-1)\n        lo = self.dfs(grid, r, c+1)\n        return lt + rt + up + lo\n        \n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >=0 and c < len(grid[0])        \n"})})]})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);