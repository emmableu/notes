"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1415],{28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var t=n(96540);const a={},s=t.createContext(a);function i(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:r},e.children)}},40320:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Leetcode/Other/1213.1213 - Intersection of Three Sorted Arrays (Easy)","title":"1213.1213 - Intersection of Three Sorted Arrays (Easy)","description":"LC link","source":"@site/docs/Leetcode/99.Other/1213.1213 - Intersection of Three Sorted Arrays (Easy).md","sourceDirName":"Leetcode/99.Other","slug":"/p/250e8b08-97f9-4f55-9d70-6a8bbf0ea17d","permalink":"/notes/docs/p/250e8b08-97f9-4f55-9d70-6a8bbf0ea17d","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1213.1213 - Intersection of Three Sorted Arrays (Easy).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/250e8b08-97f9-4f55-9d70-6a8bbf0ea17d","slug":"/p/250e8b08-97f9-4f55-9d70-6a8bbf0ea17d"},"sidebar":"tutorialSidebar","previous":{"title":"121.121 - Best Time to Buy and Sell Stock - Easy","permalink":"/notes/docs/p/3d3587ca-11ed-4b50-8c28-3d6205bb870f"},"next":{"title":"1216.1216 - Valid Palindrome III (Hard)","permalink":"/notes/docs/p/fd4ef74f-2257-4f6e-ba21-e0963935d91c"}}');var a=n(74848),s=n(28453);const i={created_at:"2025-10-23",page_link:"/p/250e8b08-97f9-4f55-9d70-6a8bbf0ea17d",slug:"/p/250e8b08-97f9-4f55-9d70-6a8bbf0ea17d"},o=void 0,d={},c=[{value:"Solution",id:"solution",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"https://leetcode.com/problems/intersection-of-three-sorted-arrays/",children:"LC link"}),"\nGiven three integer arrays ",(0,a.jsx)(r.code,{children:"arr1"}),", ",(0,a.jsx)(r.code,{children:"arr2"})," and ",(0,a.jsx)(r.code,{children:"arr3"})," sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays."]}),"\n",(0,a.jsx)(r.p,{children:"Example 1:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]\nOutput: [1,5]\nExplanation: Only 1 and 5 appeared in the three arrays.\n"})}),"\n",(0,a.jsx)(r.p,{children:"Example 2:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]\nOutput: []\n"})}),"\n",(0,a.jsx)(r.p,{children:"Constraints:"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"1 <= arr1.length, arr2.length, arr3.length <= 1000"}),"\n",(0,a.jsx)(r.li,{children:"1 <= arr1[i], arr2[i], arr3[i] <= 2000"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsxs)(r.p,{children:["\u4e09\u6307\u9488\uff0c\u5982\u679c\u4e00\u6837\u5c31\u5f80\u4e0b\u8d70\uff0c\u5426\u5219\u5c31\u627e\u4e00\u4e2a",(0,a.jsx)(r.code,{children:"curmax"}),", \u5c0f\u4e8e",(0,a.jsx)(r.code,{children:"curmax"}),"\u7684\u76f4\u63a5\u5f80\u4e0b\u8d70\uff0c\u53ef\u4ee5\u6bd4\u8f83\u4e0b\u4e00\u4e2a"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:"class Solution:\n    def arraysIntersection(self, arr1, arr2, arr3):\n        i = j = k = 0\n        res = []\n        \n        while i < len(arr1) and j < len(arr2) and k < len(arr3):\n            if arr1[i] == arr2[j] == arr3[k]:\n                res.append(arr1[i])\n                i += 1 \n                j += 1\n                k += 1\n                continue\n            \n            curmax = max(arr1[i], arr2[j], arr3[k])\n            \n            if arr1[i] < curmax:\n                i += 1\n            \n            if arr2[j] < curmax:\n                j += 1\n                \n            if arr3[k] < curmax:\n                k += 1\n                \n        return res\n"})})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);