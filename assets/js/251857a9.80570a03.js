"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7537],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(96540);const i={},c=r.createContext(i);function o(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(c.Provider,{value:n},e.children)}},67785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>f,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Leetcode/DFS/549.549 - Binary Tree Longest Consecutive Sequence II - Medium","title":"549.549 - Binary Tree Longest Consecutive Sequence II - Medium","description":"LC Link","source":"@site/docs/Leetcode/04.DFS/549.549 - Binary Tree Longest Consecutive Sequence II - Medium.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/dec43142-ed48-4734-80a1-fb09df2be11a","permalink":"/notes/docs/p/dec43142-ed48-4734-80a1-fb09df2be11a","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/549.549 - Binary Tree Longest Consecutive Sequence II - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/dec43142-ed48-4734-80a1-fb09df2be11a","slug":"/p/dec43142-ed48-4734-80a1-fb09df2be11a"},"sidebar":"tutorialSidebar","previous":{"title":"529.529 - Minesweeper (Medium)","permalink":"/notes/docs/p/7634e63c-3e3e-4386-b28f-1fc2c251ab1c"},"next":{"title":"552.552 - Student Attendance Record II - Hard","permalink":"/notes/docs/p/7ed1dc15-ac0e-4b99-ba14-8fa0dc752be0"}}');var i=t(74848),c=t(28453);const o={created_at:"2025-10-23",page_link:"/p/dec43142-ed48-4734-80a1-fb09df2be11a",slug:"/p/dec43142-ed48-4734-80a1-fb09df2be11a"},d=void 0,s={},l=[{value:"Solution: \u540e\u5e8f\u904d\u5386",id:"solution-\u540e\u5e8f\u904d\u5386",level:2}];function a(e){const n={a:"a",br:"br",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.cn/problems/binary-tree-longest-consecutive-sequence-ii/",children:"LC Link"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208151722177.png",alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" \u964d\u5e8f\uff0c-1  2 \u5347\u5e8f\uff0c+1\n\t\t1    3\n\n2: {root: None, left: -1, right: 1}\n1: {root: +1, left: None, right: None}\n3: {root: -1, left: None, right: None}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"solution-\u540e\u5e8f\u904d\u5386",children:"Solution: \u540e\u5e8f\u904d\u5386"}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf incr \u548c decr\uff0c\u5176\u4e2d inc \u8868\u793a\u5f53\u524d\u70b9\u4e3a\u6b62\u6700\u957f\u589e\u957f\u5e8f\u5217\u7684\u957f\u5ea6\uff08\u5305\u62ec\u8be5\u70b9\u81ea\u5df1\uff09\uff0cdec \u8868\u793a\u5f53\u524d\u70b9\u4e3a\u6b62\u6700\u957f\u4e0b\u964d\u5e8f\u5217\u7684\u957f\u5ea6\uff08\u5305\u62ec\u8be5\u70b9\u81ea\u5df1\uff09\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u4f7f\u7528\u56de\u6eaf\u51fd\u6570 dfs(node)\uff0c\u5b83\u7684\u51fd\u6570\u8fd4\u56de\u503c\u4e3a [incr,decr] \u8fd9\u6837\u7684\u5f62\u5f0f\u3002\u6211\u4eec\u5c06 incr \u548c decr \u5728\u5f53\u524d\u70b9\u90fd\u521d\u59cb\u5316\u4e3a 1\u3002\u8fd9\u662f\u56e0\u4e3a\u4e00\u4e2a\u70b9\u81ea\u8eab\u603b\u80fd\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u8fde\u7eed\u4e0a\u5347\u548c\u4e0b\u964d\u5e8f\u5217\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 dfs(root.left) \u5f97\u5230\u5de6\u5b69\u5b50\u4e3a\u7ec8\u70b9\u7684\u6700\u957f\u4e0a\u5347\u6216\u8005\u4e0b\u964d\u5e8f\u5217\u3002\u5982\u679c\u5de6\u5b69\u5b50\u7684\u503c\u6bd4\u5f53\u524d\u503c\u5c0f\uff0c\u90a3\u4e48\u5de6\u5b69\u5b50\u4e0e\u5f53\u524d\u8282\u70b9\u5f62\u6210\u4e86\u4e00\u4e2a\u4e0b\u964d\u5e8f\u5217\u3002\u56e0\u6b64\uff0c\u5f53\u524d\u8282\u70b9\u7684 decr \u503c\u4e3aright_child(decr)+1\u3002",(0,i.jsx)(n.br,{}),"\n\u800c\u5982\u679c\u5de6\u5b69\u5b50\u7684\u503c\u6bd4\u5f53\u524d\u70b9\u7684\u503c\u5927\uff0c\u5de6\u5b69\u5b50\u4e0e\u5f53\u524d\u8282\u70b9\u5f62\u6210\u4e00\u4e2a\u4e0a\u5347\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u66f4\u65b0\u5f53\u524d\u70b9\u7684 incr \u503c\u4e3a left_child(incr)+1"]}),"\n",(0,i.jsx)(n.p,{children:"\u7136\u540e\uff0c\u6211\u4eec\u5bf9\u4e8e\u53f3\u5b69\u5b50\u4e5f\u505a\u540c\u6837\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u901a\u8fc7\u53d6\u5de6\u53f3\u5b69\u5b50\u5bf9\u5e94\u503c\u7684\u8f83\u5927\u503c\u5f97\u5230\u5f53\u524d\u8282\u70b9 incr \u548c decr \u7684\u503c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u63a5\u4e0b\u6765\uff0c\u5728\u6211\u4eec\u5f97\u5230\u6bcf\u4e2a\u70b9\u7684 incr \u548c decr \u7684\u503c\u4ee5\u540e\uff0c\u6211\u4eec\u66f4\u65b0\u5f53\u524d\u627e\u5230\u7684\u6700\u957f\u8fde\u7eed\u8def\u5f84\u7684\u957f\u5ea6\uff0cmaxval=max(incr+decr\u22121)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208241820581.png",alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestConsecutive(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        self.max_val = 0\n        self.dfs(root)\n        return self.max_val\n\n    def dfs(self, node):\n        # \u6ce8\u610f\u662f\u8981\u5224\u65ad\u53ea\u6709node.left,\u6216\u8005\u53ea\u6709node.right \u7684\u60c5\u51b5\n        # \u8fd9\u91cc\u628a\u4ed6\u4eec\u4e00\u5f8b\u521d\u59cb\u5316\u4e3a0\n        left_incr, right_incr, left_decr, right_decr = 0, 0, 0, 0\n        if node.left:\n            left_incr, left_decr = self.dfs(node.left)\n            if node.left.val != node.val + 1:\n                left_incr = 0\n            if node.left.val != node.val - 1:\n                left_decr = 0\n        if node.right: \n            right_incr, right_decr = self.dfs(node.right)\n            if node.right.val != node.val + 1:\n                right_incr = 0\n            if node.right.val != node.val - 1:\n                right_decr = 0\n        incr = max(left_incr, right_incr) + 1\n        decr = max(left_decr, right_decr) + 1\n        self.max_val = max(self.max_val, incr + decr - 1)\n        return incr, decr\n"})})]})}function f(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);