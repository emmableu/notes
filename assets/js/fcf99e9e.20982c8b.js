"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7461],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},68269:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Leetcode/Other/1570.1570 - Dot Product of Two Sparse Vectors - Medium","title":"1570.1570 - Dot Product of Two Sparse Vectors - Medium","description":"Description:","source":"@site/docs/Leetcode/99.Other/1570.1570 - Dot Product of Two Sparse Vectors - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/b74a8257-73d2-4d30-b0dd-ae90093a1004","permalink":"/notes/docs/p/b74a8257-73d2-4d30-b0dd-ae90093a1004","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1570.1570 - Dot Product of Two Sparse Vectors - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/b74a8257-73d2-4d30-b0dd-ae90093a1004","slug":"/p/b74a8257-73d2-4d30-b0dd-ae90093a1004"},"sidebar":"tutorialSidebar","previous":{"title":"157.157 - Read N Characters Given Read4 (Easy)","permalink":"/notes/docs/p/0f15048e-55b2-497b-a469-e63c0cae9ad0"},"next":{"title":"158.158 - Read N Characters Given read4 II - Call Multiple Times - Hard","permalink":"/notes/docs/p/eff894da-0d84-4d25-a8d3-1ac8df54dcbd"}}');var o=t(74848),i=t(28453);const r={created_at:"2025-10-23",page_link:"/p/b74a8257-73d2-4d30-b0dd-ae90093a1004",slug:"/p/b74a8257-73d2-4d30-b0dd-ae90093a1004"},d=void 0,c={},a=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Constraints:",id:"constraints",level:2},{value:"fb \u4e0d\u80fd\u63a5\u53d7\u7684hashmap\u65b9\u6cd5\uff1a",id:"fb-\u4e0d\u80fd\u63a5\u53d7\u7684hashmap\u65b9\u6cd5",level:2},{value:"\u6ce8\u610f\uff1a",id:"\u6ce8\u610f",level:2},{value:"FB \u53ef\u4ee5\u63a5\u53d7\u7684\u65b9\u6cd5 (time complexity O(n), using two pointers)",id:"fb-\u53ef\u4ee5\u63a5\u53d7\u7684\u65b9\u6cd5-time-complexity-on-using-two-pointers",level:2},{value:"code:",id:"code",level:3}];function l(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,o.jsx)(n.p,{children:"Given two sparse vectors, compute their dot product."}),"\n",(0,o.jsxs)(n.p,{children:["Implement class ",(0,o.jsx)(n.code,{children:"SparseVector"}),":"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"SparseVector(nums)"})," Initializes the object with the vector nums\n",(0,o.jsx)(n.code,{children:"dotProduct(vec)"})," Compute the dot product between the instance of SparseVector and vec\nA sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector."]}),"\n",(0,o.jsx)(n.p,{children:"Follow up: What if only one of the vectors is sparse?"}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]\nOutput: 8\nExplanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)\nv1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8\n"})}),"\n",(0,o.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),"\n",(0,o.jsx)(n.h2,{id:"fb-\u4e0d\u80fd\u63a5\u53d7\u7684hashmap\u65b9\u6cd5",children:"fb \u4e0d\u80fd\u63a5\u53d7\u7684hashmap\u65b9\u6cd5\uff1a"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class SparseVector:\n    def __init__(self, nums: List[int]):\n        self.seen = {}\n        for i, num in enumerate(nums):\n            if num != 0:\n                self.seen[i] = num\n\n\n# Return the dotProduct of two sparse vector\n    def dotProduct(self, vec: 'SparseVector') -> int:\n        product = 0;\n        for i, num1 in self.seen.items():\n            if i in vec.seen:\n                product += num1 * vec.seen[i]\n        return product\n"})}),"\n",(0,o.jsx)(n.h2,{id:"\u6ce8\u610f",children:"\u6ce8\u610f\uff1a"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"For large sparse vectors, hashing function takes up a lot of computation."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"fb-\u53ef\u4ee5\u63a5\u53d7\u7684\u65b9\u6cd5-time-complexity-on-using-two-pointers",children:"FB \u53ef\u4ee5\u63a5\u53d7\u7684\u65b9\u6cd5 (time complexity O(n), using two pointers)"}),"\n",(0,o.jsx)(n.h3,{id:"code",children:"code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class SparseVector:\n    def __init__(self, nums):\n        self.ids = [] \n        self.nums = []\n        for i, ele in enumerate(nums):\n            if ele > 0:\n                self.ids.append(i)\n                self.nums.append(ele)\n            \n    def dotProduct(self, v2):\n        i, j = 0, 0\n        res = 0\n        while i < len(self.ids) and j < len(v2.ids):\n            id1, id2 = self.ids[i], v2.ids[j]\n            if id1 == id2:\n                res += self.nums[i] * v2.nums[j]\n                i += 1 #\u5728\u591a\u6b21implementation\u4e2d\u6211\u90fd\u72af\u4e86\u6ca1\u5199\u8fd9\u4e00\u884c\u548c\u4e0b\u4e00\u884c\u7684\u9519\u8bef\n                j += 1\n            elif id1 < id2:\n                i += 1\n            else:\n                j += 1\n        return res                \n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);