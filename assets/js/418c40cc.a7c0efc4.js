"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8151],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var s=t(96540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},42108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Leetcode/Other/341.341 - Flatten Nested List Iterator - Medium","title":"341.341 - Flatten Nested List Iterator - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/341.341 - Flatten Nested List Iterator - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/db515264-89fc-4a61-a40e-641118c0c8de","permalink":"/notes/docs/p/db515264-89fc-4a61-a40e-641118c0c8de","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/341.341 - Flatten Nested List Iterator - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/db515264-89fc-4a61-a40e-641118c0c8de","slug":"/p/db515264-89fc-4a61-a40e-641118c0c8de"},"sidebar":"tutorialSidebar","previous":{"title":"34.34 - Find First and Last Position of Element in Sorted Array - Medium","permalink":"/notes/docs/p/bd7aa5bb-d0bc-4c93-af43-7b32830bebe8"},"next":{"title":"346.346 - Moving Average from Data Stream - Easy","permalink":"/notes/docs/p/a120021e-ad0c-4892-8141-b66fe24a8b8e"}}');var r=t(74848),i=t(28453);const l={created_at:"2025-10-23",page_link:"/p/db515264-89fc-4a61-a40e-641118c0c8de",slug:"/p/db515264-89fc-4a61-a40e-641118c0c8de"},d=void 0,c={},a=[{value:"Solution",id:"solution",level:2},{value:"1. \u8fed\u4ee3 + \u6808 (preferred)",id:"1-\u8fed\u4ee3--\u6808-preferred",level:3},{value:"2. \u9012\u5f52\uff0c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u63d0\u524d\u6241\u5e73\u5316 (not preferred)",id:"2-\u9012\u5f52\u5728\u6784\u9020\u51fd\u6570\u4e2d\u63d0\u524d\u6241\u5e73\u5316-not-preferred",level:3}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/flatten-nested-list-iterator/",children:"LC link"}),"\n",(0,r.jsx)(n.a,{href:"https://leetcode-cn.com/problems/flatten-nested-list-iterator/solution/fu-xue-ming-zhu-xiang-jie-ti-yi-shu-li-d-n4qa/",children:"explanation"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/341-0.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(n.p,{children:"\u60f3\u8c61\u6210\u6811\u5f62\u7ed3\u6784\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[[1, 1], 2, [1, 1]] \n    /     |    \\\n  [1, 1]  2  [1, 1] \n   / \\         / \\\n   1  1        1  1\n"})}),"\n",(0,r.jsx)(n.h3,{id:"1-\u8fed\u4ee3--\u6808-preferred",children:"1. \u8fed\u4ee3 + \u6808 (preferred)"}),"\n",(0,r.jsx)(n.p,{children:"\u7531\u4e8e\u300c\u6808\u300d\u7684\u5148\u8fdb\u540e\u51fa\u7684\u7279\u6027\uff0c\u6211\u4eec\u9700\u8981\u9006\u5e8f\u5728\u6808\u91cc\u653e\u5165\u5404\u4e2a\u5143\u7d20\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5904\u7406\u6d41\u7a0b\u5206\u4e3a\u4e24\u6b65\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u5728\u6784\u9020\u51fd\u6570\u4e2d\u5e94\u8be5\u521d\u59cb\u5316\uff0c\u628a\u5f53\u524d\u5217\u8868\u7684\u5404\u4e2a\u5143\u7d20\uff08\u4e0d\u7528\u644a\u5e73\uff09\u9006\u5e8f\u653e\u5165\u6808\u4e2d\u3002"}),"\n",(0,r.jsxs)(n.li,{children:["\u5728 ",(0,r.jsx)(n.code,{children:"hasNext()"}),"\xa0\u65b9\u6cd5\u4e2d\uff0c\u8bbf\u95ee\uff08\u4e0d\u5f39\u51fa\uff09\u6808\u9876\u5143\u7d20\uff0c\u5224\u65ad\u662f\u5426\u4e3a int\uff1a"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u5982\u679c\u662f int \u90a3\u4e48\u8bf4\u660e\u6709\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de true\uff1b\u7136\u540e ",(0,r.jsx)(n.code,{children:"next()"})," \u5c31\u4f1a\u88ab\u8c03\u7528\uff0c\u628a\u6808\u9876\u7684 int \u5f39\u51fa\uff1b"]}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u662f list \u9700\u8981\u628a\u5f53\u524d\u5217\u8868\u7684\u5404\u4e2a\u5143\u7d20\uff08\u4e0d\u7528\u644a\u5e73\uff09\u9006\u5e8f\u653e\u5165\u6808\u4e2d\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8bf4\u660e\u539f\u59cb\u7684\u5d4c\u5957\u5217\u8868\u5df2\u7ecf\u8bbf\u95ee\u7ed3\u675f\u4e86\uff0c\u8fd4\u56de false\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5047\u5982\u8f93\u5165 [1, [2,3]]\xa0\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1. \u5728\u6784\u9020\u51fd\u6570\u4e2d\uff1a\u6808\u91cc\u9762\u653e\u7684\u5e94\u8be5\u662f stack = [[2, 3], 1]\n2. \u5728\u8c03\u7528 hasNext() \u65b9\u6cd5\u65f6\uff0c\u8bbf\u95ee\u6808\u9876\u5143\u7d20\u662f 1\uff0c\u4e3a int\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de true;\n3. \u7136\u540e\u8c03\u7528 next() \u65b9\u6cd5\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20 1\uff1b\n4. \u518d\u8c03\u7528 hasNext() \u65b9\u6cd5\u65f6\uff0c\u8bbf\u95ee\u6808\u9876\u5143\u7d20\u662f [2,3]\uff0c\u4e3a list\uff0c\u90a3\u4e48\u9700\u8981\u644a\u5e73\uff0c\u7ee7\u7eed\u653e\u5230\u6808\u4e2d\u3002\n        \u5f53\u524d\u7684\u6808\u662f stack = [3, 2]\n5. \u7136\u540e\u8c03\u7528 next() \u65b9\u6cd5\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20 2\uff1b\n6. \u7136\u540e\u8c03\u7528 next() \u65b9\u6cd5\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20 3\uff1b\n7. \u518d\u8c03\u7528 hasNext() \u65b9\u6cd5\u65f6\uff0c\u6808\u4e3a\u7a7a\uff0c\u56e0\u6b64\u8fd4\u56de false\uff0c\u8fed\u4ee3\u5668\u8fd0\u884c\u7ed3\u675f\u3002\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u8fd9\u91cc\u9700\u8981\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5728 hasNext()\xa0\u65b9\u6cd5\u4e2d\u644a\u5e73 list\uff0c\u800c\u4e0d\u662f\u5728 next()\xa0\u65b9\u6cd5\u4e2d\u3002\u6bd4\u5982\u5bf9\u4e8e ",(0,r.jsx)(n.code,{children:"[[]]"}),"\u7684\u8f93\u5165\uff0c hasNext()\xa0\xa0\u65b9\u6cd5\u662f\u5224\u65ad\u5176\u4e2d\u662f\u5426\u6709 int \u5143\u7d20\u4e86\uff0c\u5219\u5fc5\u987b\u628a\u5185\u5c42\u7684 list \u644a\u5e73\u6765\u770b\uff0c\u53d1\u73b0\u662f\u7a7a\u7684\uff0c\u8fd4\u56de false\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class NestedIterator(object):\n    def __init__(self, nestedList):\n        self.stk = []\n        for i in range(len(nestedList) - 1, -1, -1):\n            self.stk.append(nestedList[i])\n\n    def next(self):\n        cur = self.stk.pop()\n        return cur.getInteger()\n\n    def hasNext(self):\n        while self.stk:\n            cur = self.stk[-1]\n            if cur.isInteger():\n                return True\n            self.stk.pop()\n            for i in range(len(cur.getList()) - 1, -1, -1):\n                self.stk.append(cur.getList()[i])\n        return False\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-\u9012\u5f52\u5728\u6784\u9020\u51fd\u6570\u4e2d\u63d0\u524d\u6241\u5e73\u5316-not-preferred",children:"2. \u9012\u5f52\uff0c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u63d0\u524d\u6241\u5e73\u5316 (not preferred)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class NestedIterator(object):\n    def dfs(self, nests):\n        for nest in nests:\n            if nest.isInteger():\n                self.queue.append(nest.getInteger())\n            else:\n                self.dfs(nest.getList())\n                    \n    def __init__(self, nestedList):\n        self.queue = collections.deque()\n        self.dfs(nestedList)\n\n    def next(self):\n        return self.queue.popleft()\n\n    def hasNext(self):\n        return len(self.queue)\n"})})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);