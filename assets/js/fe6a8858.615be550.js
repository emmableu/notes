"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2608],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var r=n(96540);const a={},s=r.createContext(a);function l(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:t},e.children)}},59959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/Other/173.173 - Binary Search Tree Iterator - Medium","title":"173.173 - Binary Search Tree Iterator - Medium","description":"leetcode link","source":"@site/docs/Leetcode/99.Other/173.173 - Binary Search Tree Iterator - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/50aaadb3-219d-409d-aa73-8280a3089658","permalink":"/notes/docs/p/50aaadb3-219d-409d-aa73-8280a3089658","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/173.173 - Binary Search Tree Iterator - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/50aaadb3-219d-409d-aa73-8280a3089658","slug":"/p/50aaadb3-219d-409d-aa73-8280a3089658"},"sidebar":"tutorialSidebar","previous":{"title":"1699.1699 - Number of Calls Between Two Persons (Medium)","permalink":"/notes/docs/p/a99dd339-9800-44d6-a059-630050115e58"},"next":{"title":"1757.1757 - Recyclable and Low Fat Products (Easy)","permalink":"/notes/docs/p/2ebb105e-aae1-428a-aa3f-c375897c6388"}}');var a=n(74848),s=n(28453);const l={created_at:"2025-10-23",page_link:"/p/50aaadb3-219d-409d-aa73-8280a3089658",slug:"/p/50aaadb3-219d-409d-aa73-8280a3089658"},i=void 0,o={},c=[{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:2},{value:"Solution: \u4e2d\u5e8f\u904d\u5386\u7684\u7b49\u4ef7\u62c6\u5206",id:"solution-\u4e2d\u5e8f\u904d\u5386\u7684\u7b49\u4ef7\u62c6\u5206",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode.com/problems/binary-search-tree-iterator/",children:"leetcode link"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://leetcode-cn.com/problems/binary-search-tree-iterator/solution/xiang-jie-ru-he-dui-die-dai-ban-de-zhong-4rxj/",children:"explanation"})}),"\n",(0,a.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(t.p,{children:"Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"BSTIterator(TreeNode root)"})," Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"boolean hasNext()"})," Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"int next()"})," Moves the pointer to the right, then returns the number at the pointer.\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called."}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'\u8f93\u5165\n["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n\u8f93\u51fa\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\n\u89e3\u91ca\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // \u8fd4\u56de 3\nbSTIterator.next();    // \u8fd4\u56de 7\nbSTIterator.hasNext(); // \u8fd4\u56de True\nbSTIterator.next();    // \u8fd4\u56de 9\nbSTIterator.hasNext(); // \u8fd4\u56de True\nbSTIterator.next();    // \u8fd4\u56de 15\nbSTIterator.hasNext(); // \u8fd4\u56de True\nbSTIterator.next();    // \u8fd4\u56de 20\nbSTIterator.hasNext(); // \u8fd4\u56de False\n'})}),"\n",(0,a.jsx)(t.h2,{id:"solution-\u4e2d\u5e8f\u904d\u5386\u7684\u7b49\u4ef7\u62c6\u5206",children:"Solution: \u4e2d\u5e8f\u904d\u5386\u7684\u7b49\u4ef7\u62c6\u5206"}),"\n",(0,a.jsx)(t.p,{children:"\u4e2d\u5e8f\u904d\u5386\u7684\u57fa\u672c\u903b\u8f91\u662f\uff1a\u5904\u7406\u5de6\u5b50\u6811 -> \u5904\u7406\u5f53\u524d\u8282\u70b9 -> \u5904\u7406\u53f3\u5b50\u6811\u3002\u5176\u4e2d\u8fed\u4ee3\u505a\u6cd5\u662f\u5229\u7528\u300c\u6808\u300d\u8fdb\u884c\u5904\u7406\uff1a"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"step 1: \u5148\u5c06\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u5de6\u5b50\u6811\u538b\u5165\u6808\uff0c\u538b\u5230\u6ca1\u6709\u4e3a\u6b62"}),"\n",(0,a.jsx)(t.li,{children:"step 2: \u5c06\u6700\u540e\u4e00\u4e2a\u538b\u5165\u7684\u8282\u70b9\u5f39\u51fa\uff08\u6808\u9876\u5143\u7d20\uff09\uff0c\u52a0\u5165\u7b54\u6848"}),"\n",(0,a.jsx)(t.li,{children:"step 3: \u5c06\u5f53\u524d\u5f39\u51fa\u7684\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u91cd\u590d\u6b65\u9aa4\u4e00"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]: \n        res = []\n        stack = []\n        cur = root\n        # \u4e2d\u5e8f\uff0c\u6a21\u677f\uff1a\u5148\u7528\u6307\u9488\u627e\u5230\u6bcf\u9897\u5b50\u6811\u7684\u6700\u5de6\u4e0b\u89d2\uff0c\u7136\u540e\u8fdb\u884c\u8fdb\u51fa\u6808\u64cd\u4f5c\n        while stack or cur:\n            # step 1\n            while cur:\n                stack.append(cur)\n                cur = cur.left\n            # step 2\n            cur = stack.pop()\n            res.append(cur.val)\n            \n            # step 3\n            cur = cur.right\n        return res      \n"})}),"\n",(0,a.jsx)(t.p,{children:"\u672c\u9898\uff1a"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"init"}),": \u628a\u6839\u8282\u70b9\u548c\u4ed6\u7684\u6240\u6709\u5de6\u5b50\u6811\u538b\u5165\u6808"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"next\uff1a"})," \u6267\u884c 2-> 3 -> 1"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"dfs_left"}),": \u4e00\u4e2ahelper \u65b9\u6cd5\uff0c\u6267\u884c step 1\uff0c \u4e0d\u662f\u4e00\u4e2a\u9012\u5f52dfs"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from collections import deque\nclass BSTIterator:\n    def __init__(self, root):\n        self.stk = []\n        self.dfs_left(root)\n\n    def next(self):\n        cur = self.stk.pop()\n        res = cur.val\n        self.dfs_left(cur.right) \n        return res\n\n    def dfs_left(self, cur):\n        while cur:\n            self.stk.append(cur)\n            cur = cur.left\n    \n    def hasNext(self):\n        return len(self.stk) != 0\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);