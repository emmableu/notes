"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1681],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const c={},i=r.createContext(c);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},92021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Leetcode/Other/708.708 - Insert into a Sorted Circular Linked List - Medium","title":"708.708 - Insert into a Sorted Circular Linked List - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/708.708 - Insert into a Sorted Circular Linked List - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/e930ec12-66c6-40c6-9d08-aeca40c90f09","permalink":"/notes/docs/p/e930ec12-66c6-40c6-9d08-aeca40c90f09","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/708.708 - Insert into a Sorted Circular Linked List - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/e930ec12-66c6-40c6-9d08-aeca40c90f09","slug":"/p/e930ec12-66c6-40c6-9d08-aeca40c90f09"},"sidebar":"tutorialSidebar","previous":{"title":"681.681 - Next Closest Time (Medium)","permalink":"/notes/docs/p/94ab9d00-370f-4994-aa6b-5f713639e070"},"next":{"title":"71.71 - Simplify Path - Medium","permalink":"/notes/docs/p/bb394823-57dd-4975-88ec-28dbc9eb24f9"}}');var c=t(74848),i=t(28453);const s={created_at:"2025-10-23",page_link:"/p/e930ec12-66c6-40c6-9d08-aeca40c90f09",slug:"/p/e930ec12-66c6-40c6-9d08-aeca40c90f09"},a=void 0,l={},d=[{value:"Solution: \u53cc\u6307\u9488",id:"solution-\u53cc\u6307\u9488",level:2}];function o(e){const n={a:"a",br:"br",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://leetcode.com/problems/insert-into-a-sorted-circular-linked-list/",children:"LC link"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/708-0.png",alt:""}),"\n",(0,c.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/708-1.png",alt:""})]}),"\n",(0,c.jsx)(n.h2,{id:"solution-\u53cc\u6307\u9488",children:"Solution: \u53cc\u6307\u9488"}),"\n",(0,c.jsxs)(n.p,{children:["\u8fdb\u5165\u65f6 ",(0,c.jsx)(n.code,{children:"prev = head"}),", ",(0,c.jsx)(n.code,{children:"cur = head.next"}),"\n\u4ee5\u539f\u6765\u7684linked list \u4e3a\u4f8b\uff0c\u521d\u59cb\u5316prev=2, cur=3\uff0c \u7136\u540e\u6709\u4e24\u79cd\u60c5\u51b5\uff1a"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"      _______________\n     |               |\n    \\|/              |\n     2(head) -> 3 -> 1\n"})}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["\u8fdb\u6765\u4e00\u4e2a2.5\uff0c",(0,c.jsx)(n.code,{children:"prev.val <= insertVal <= cur.val"}),":\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\uff0c\u7136\u540e prev.next = Node(2.5,cur)"}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["prev \u5230\u4e86list\u6700\u5927\u7684\u5143\u7d20 3\uff0ccur\u5230\u4e86\u6700\u5c0f\u7684\u5143\u7d20 1\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\u53ea\u6709\u5728insertVal <= 1 \u6216 >= 3 \u624d\u53ef\u4ee5\u8fd9\u65f6\u7684prev\uff0ccur\u4e4b\u95f4\uff0c\u68c0\u67e5insertVal\u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u5982\u679c\u6ee1\u8db3\u5219\u63d2\u5165\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u5219\u7ee7\u7eed\u5faa\u73af\uff0c\u56e0\u4e3a\u8fd8\u6709 prev=1,cur=2\u6ca1\u8d70",(0,c.jsx)(n.br,{}),"\n\u6700\u540e\uff0c\u8d70\u5230prev == head == 2\uff0c \u8d70\u5b8c\u4e86\u4e00\u5708\uff0cbreak"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def insert(self, head: 'Node', insertVal: int) -> 'Node':\n        # \u5982\u679chead\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u4e00\u4e2a\u53ea\u6709insertVal\u672c\u8eab\u7684circular\u94fe\u8868\n        if not head:\n            n = Node(insertVal)\n            n.next = n\n            return n\n        \n        prev = head\n        cur = head.next\n        while True:\n            # \u60c5\u51b51\uff0c\u5982\u679c\u6b63\u597d\u5728\n            if prev.val <= insertVal <= cur.val:\n                break\n            # \u78b0\u5230\u4e86sorted\u7684\u672b\u5c3e\u548c\u5f00\u5934\u7684\u90a3\u4e2a (e.g., 2->3->1->2.., \u78b0\u5230\u4e863->1\u8fd9\u91cc)\n            elif (prev.val > cur.val and\n                  # \u53ea\u6709insertVal <= 1 \u6216 >= 3 \u624d\u53ef\u4ee5\u63d2\u5728\u8fd9\u91cc\u3002\n                    (insertVal <= cur.val or insertVal >= prev.val)):\n                break\n            prev, cur = prev.next, cur.next\n            if prev == head:\n                break \n                \n        node = Node(insertVal, cur)\n        prev.next = node\n        return head     \n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(o,{...e})}):o(e)}}}]);