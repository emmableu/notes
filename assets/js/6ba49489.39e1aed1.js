"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7874],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>s});var r=t(96540);const o={},l=r.createContext(o);function d(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),r.createElement(l.Provider,{value:n},e.children)}},51452:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>d,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Leetcode/DFS/366.366 - Find Leaves of Binary Tree - Medium","title":"366.366 - Find Leaves of Binary Tree - Medium","description":"tags: [Tree, Depth-First Search, Binary Tree]","source":"@site/docs/Leetcode/04.DFS/366.366 - Find Leaves of Binary Tree - Medium.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/5da9e8dc-b11e-4168-b956-2d78c6630d5c","permalink":"/notes/docs/p/5da9e8dc-b11e-4168-b956-2d78c6630d5c","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/366.366 - Find Leaves of Binary Tree - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/5da9e8dc-b11e-4168-b956-2d78c6630d5c","slug":"/p/5da9e8dc-b11e-4168-b956-2d78c6630d5c"},"sidebar":"tutorialSidebar","previous":{"title":"339.339 - Nested List Weight Sum (Medium)","permalink":"/notes/docs/p/d766a93d-5c65-45f3-8c3f-5b6883e7c9b3"},"next":{"title":"416.416 - Partition Equal Subset Sum (Medium)","permalink":"/notes/docs/p/d4b1742a-b67c-4693-a34d-f0e40b0060c2"}}');var o=t(74848),l=t(28453);const d={created_at:"2025-10-23",page_link:"/p/5da9e8dc-b11e-4168-b956-2d78c6630d5c",slug:"/p/5da9e8dc-b11e-4168-b956-2d78c6630d5c"},s=void 0,i={},a=[{value:"print only (O(n))",id:"print-only-on",level:3},{value:"follow-up 1 : actually delete those nodes and also print them (O(n lg n))",id:"follow-up-1--actually-delete-those-nodes-and-also-print-them-on-lg-n",level:3},{value:"follow-up 2: delete  and  print those nodes post-order  (O(n))",id:"follow-up-2-delete--and--print-those-nodes-post-order--on",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"tags: [Tree, Depth-First Search, Binary Tree]"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.cn/problems/find-leaves-of-binary-tree/",children:"LC Link"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202207101614413.png",alt:""})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"\u9898\u76eeclarification\uff1a"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u672c\u9898\u4e2d\uff0c\u53ea\u8981print\u51fa\u4e0a\u9762\u6837\u4f8b\u4ee3\u7801\u7684\u7ed3\u679c\uff0cOJ\u5c31\u53ef\u4ee5\u901a\u8fc7\uff0c"}),"\n",(0,o.jsx)(n.li,{children:"\u7b2c\u4e00\u4e2a\u7b54\u6848\u662f\u53ea\u662fprint\uff0c\u8fd9\u4e2a\u53ea\u8981O(n) \u590d\u6742\u5ea6\uff0c"}),"\n",(0,o.jsx)(n.li,{children:"\u4f46\u662f\u5220\u53bb\u5176\u5b9e\u9700\u8981 O(n lg n) \u7684\u590d\u6742\u5ea6\uff0c\u662f\u5199\u5728\u540e\u9762 follow-up\u91cc\u9762\uff0c\u540c\u65f6\u4e5f\u5199\u4e86\u4e00\u4e2atest case"}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"\u8fd9\u9898\u53ef\u4ee5\u601d\u8003\uff0c\u628a\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u7406\u89e3\u6210\u4ece\u53f6\u5b50\u8282\u70b9\u5230\u6839\u8282\u70b9\u4ece\u4e0b\u5230\u4e0a\u9012\u589e\u7684\uff0c\u90a3\u4e48\u628a\u76f8\u540c\u9ad8\u5ea6\u7684\u8282\u70b9\u5206\u5230\u4e00\u8d77\u5c31\u662f\u9898\u76ee\u60f3\u8981\u7684\u7b54\u6848"}),"\u3002"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"print-only-on",children:"print only (O(n))"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n    def findLeaves(self, root: TreeNode) -> List[List[int]]:\n        reverse_level_dict = defaultdict(list)\n        root_level = self.dfs(root, reverse_level_dict)\n        res = []\n        for i in range(root_level + 1):\n            res.append(reverse_level_dict[i])\n        return res\n\n    def dfs(self, root, reverse_level_dict):\n        if not root:\n            return -1\n        left_depth = self.dfs(root.left, reverse_level_dict) \n        right_depth = self.dfs(root.right, reverse_level_dict) \n        reverse_level = max(left_depth, right_depth) + 1\n        reverse_level_dict[reverse_level].append(root.val)\n        return reverse_level\n"})}),"\n",(0,o.jsx)(n.h3,{id:"follow-up-1--actually-delete-those-nodes-and-also-print-them-on-lg-n",children:"follow-up 1 : actually delete those nodes and also print them (O(n lg n))"}),"\n",(0,o.jsx)(n.p,{children:"\u65b9\u6cd5\uff1a\u904d\u5386\u591a\u6b21\uff0c\u6bcf\u6b21\u53bb\u6389\u90a3\u4e9bleaf nodes\uff0c\u6240\u4ee5\u662f o (n lg n)"}),"\n",(0,o.jsxs)(n.p,{children:["\u7c7b\u4f3c\u9898\uff1a ",(0,o.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/33ffa4",children:"545-Boundary of Binary Tree"}),", \u867d\u7136\u90a3\u9898\u6253\u5370leaves\u7528\u7684\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u4f46\u662f\u5176\u5b9e\u524d\u4e2d\u540e\u5e8f\u904d\u5386\u4e5f\u53ef\u4ee5\u7684\uff0c\u672c\u9898\u7528\u524d\u5e8f\u904d\u5386\u66f4\u65b9\u4fbf"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Definition for a binary tree node.  \nclass TreeNode:  \n    def __init__(self, val=0, left=None, right=None):  \n        self.val = val  \n        self.left = left  \n        self.right = right  \n  \ndef print_tree(root):  \n    if not root:  \n        return []  \n    return [root.val] + print_tree(root.left) + print_tree(root.right)  \n  \nclass Solution:  \n    def findLeaves(self, root):  # (\u5176\u5b9e\u662ffind and delete)\n        res = []  \n        print("print_tree: ", print_tree(root))  \n        while root:  \n            cur_level_res = []  \n            root = self.dfs_delete_leaves(root, cur_level_res)  \n            print("print_tree: ", print_tree(root))  \n            res.append(cur_level_res)  \n        return res  \n  \n    def dfs_delete_leaves(self, root, cur_level_res):  \n        if not root:  \n            return None        \n        if not root.left and not root.right:  \n            cur_level_res.append(root.val)  \n            return None  \n        root.left = self.dfs_delete_leaves(root.left, cur_level_res)  \n        root.right = self.dfs_delete_leaves(root.right, cur_level_res)  \n        return root  \n  \n  \n  \ndef test_delete_leaves_by_layer():  \n    node4 = TreeNode(4)  \n    node5 = TreeNode(5)  \n    node2 = TreeNode(2, node4, node5)  \n    node3 = TreeNode(3)  \n    node1 = TreeNode(1, node2, node3)  \n    res = Solution().findLeaves(node1)  \n    print("res: ", res)  \n  \ntest_delete_leaves_by_layer()  \n  \n"""  \nprinted result:  \nprint_tree:  [1, 2, 4, 5, 3]  \nprint_tree:  [1, 2]  \nprint_tree:  [1]  \nprint_tree:  []  \nres:  [[4, 5, 3], [2], [1]]  \n"""\n'})}),"\n",(0,o.jsx)(n.h3,{id:"follow-up-2-delete--and--print-those-nodes-post-order--on",children:"follow-up 2: delete  and  print those nodes post-order  (O(n))"}),"\n",(0,o.jsx)(n.p,{children:"\u65b9\u6cd5\uff1a\u904d\u53861\u6b21."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Definition for a binary tree node.  \nclass TreeNode:  \n    def __init__(self, val=0, left=None, right=None):  \n        self.val = val  \n        self.left = left  \n        self.right = right  \n  \ndef dfs_remove(node, res):  \n    if not node.left and not node.right:  \n        res.append(node.val)  \n        return None  \n    if node.left:  \n        dfs_remove(node.left, res)  \n    if node.right:  \n        dfs_remove(node.right, res)  \n    res.append(node.val)  \n    node = None  \n    return node  \n  \ndef delete_leaves_post_order(root):  \n    if not root:  \n        return []  \n    res = []  \n    root = dfs_remove(root, res)  \n    print("root: ", root)  \n    return res  \n  \n  \ndef test_delete_leaves_post_order():  \n    node4 = TreeNode(4)  \n    node5 = TreeNode(5)  \n    node2 = TreeNode(2, node4, node5)  \n    node3 = TreeNode(3)  \n    node1 = TreeNode(1, node2, node3)  \n    res = delete_leaves_post_order(node1)  \n    print("res: ", res)  \n  \n  \ntest_delete_leaves_post_order()\n  \n"""  \nprinted result:  \nroot:  None\nres:  [4, 5, 2, 3, 1]\n"""\n'})})]})}function f(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);