"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8859],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},62458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Leetcode/Binary Search/278.278 - First Bad Version - Easy","title":"278.278 - First Bad Version - Easy","description":"LC link","source":"@site/docs/Leetcode/02.Binary Search/278.278 - First Bad Version - Easy.md","sourceDirName":"Leetcode/02.Binary Search","slug":"/p/6ab452f3-4672-44ba-91d8-e6f81ace185b","permalink":"/notes/docs/p/6ab452f3-4672-44ba-91d8-e6f81ace185b","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/02.Binary Search/278.278 - First Bad Version - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/6ab452f3-4672-44ba-91d8-e6f81ace185b","slug":"/p/6ab452f3-4672-44ba-91d8-e6f81ace185b"},"sidebar":"tutorialSidebar","previous":{"title":"1891.1891 - Cutting Ribbons (Medium)","permalink":"/notes/docs/p/46efc1a0-2234-43cf-a98b-8631fec6332c"},"next":{"title":"528.528 - Random Pick with Weight - Medium","permalink":"/notes/docs/p/f50235ae-eaac-4dd5-baea-8b4c8635d5a5"}}');var a=t(74848),i=t(28453);const o={created_at:"2025-10-23",page_link:"/p/6ab452f3-4672-44ba-91d8-e6f81ace185b",slug:"/p/6ab452f3-4672-44ba-91d8-e6f81ace185b"},r=void 0,d={},l=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Constraints:",id:"constraints",level:2},{value:"Method",id:"method",level:2},{value:"solution\uff1a",id:"solution",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://leetcode.cn/problems/first-bad-version/",children:"LC link"})}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,a.jsx)(n.p,{children:"You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad."}),"\n",(0,a.jsx)(n.p,{children:"Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad."}),"\n",(0,a.jsx)(n.p,{children:"You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"example 1:\n\nInput: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.\n\n\nExample 2:\n\nInput: n = 1, bad = 1\nOutput: 1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),"\n",(0,a.jsx)(n.p,{children:"1 <= bad <= n <= 231 - 1"}),"\n",(0,a.jsx)(n.h2,{id:"method",children:"Method"}),"\n",(0,a.jsx)(n.p,{children:"use binary search."}),"\n",(0,a.jsx)(n.h2,{id:"solution",children:"solution\uff1a"}),"\n",(0,a.jsx)(n.p,{children:"\u4e8c\u5206\u641c\u7d22\u6c42\u4e0b\u754c"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def firstBadVersion(self, n):\n        l, r = -1, n\n        while l + 1 < r: #\u6ce8\u610f\u5fc5\u987b\u5f97 l + 1 < r\n            mid = (l + r)//2\n            if not isBadVersion(mid): # mid < target_pos\n                l = mid\n            else:\n                r = mid\n        return l + 1\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);