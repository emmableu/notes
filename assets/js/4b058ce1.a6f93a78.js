"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[921],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(96540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}},80927:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Leetcode/BFS/515.515 - Find Largest Value in Each Tree Row (Medium)","title":"515.515 - Find Largest Value in Each Tree Row (Medium)","description":"Description","source":"@site/docs/Leetcode/01.BFS/515.515 - Find Largest Value in Each Tree Row (Medium).md","sourceDirName":"Leetcode/01.BFS","slug":"/p/bf7d56ea-3a86-40b6-b778-8ecbb93d6f70","permalink":"/notes/docs/p/bf7d56ea-3a86-40b6-b778-8ecbb93d6f70","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/01.BFS/515.515 - Find Largest Value in Each Tree Row (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/bf7d56ea-3a86-40b6-b778-8ecbb93d6f70","slug":"/p/bf7d56ea-3a86-40b6-b778-8ecbb93d6f70"},"sidebar":"tutorialSidebar","previous":{"title":"317.317 - Shortest Distance from All Buildings - Hard","permalink":"/notes/docs/p/f0f9aa90-3685-4101-a383-1bf7901dfa2b"},"next":{"title":"542.542 - 01 Matrix","permalink":"/notes/docs/p/3d4eb6c7-16fb-4cf8-bb17-06046ed41b14"}}');var r=t(74848),a=t(28453);const i={created_at:"2025-10-23",page_link:"/p/bf7d56ea-3a86-40b6-b778-8ecbb93d6f70",slug:"/p/bf7d56ea-3a86-40b6-b778-8ecbb93d6f70"},s=void 0,d={},l=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed)."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Example 1:\nInput: root = [1,3,2,5,3,null,9]\nOutput: [1,3,9]\n\nExample 2:\nInput: root = [1,2,3]\nOutput: [1,3]\n\nExample 3:\nInput: root = [1]\nOutput: [1]\n\nExample 4:\nInput: root = [1,null,2]\nOutput: [1,2]\n\nExample 5:\nInput: root = []\nOutput: []\n"})}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from collections import deque\nclass Solution:\n    def largestValues(self, root):\n        if not root:\n            return []\n        q = deque([root])\n        res = []\n        while q:\n            size = len(q)\n            cur_max = -float("inf")\n            for _ in range(size):\n                node = q.popleft()\n                cur_max = max(node.val, cur_max)\n                if node.left: #\u5fc5\u987b\u8fdb\u884c\u5224\u65ad\uff0c\u4e0d\u7136\u8fdb\u5165empty\u5143\u7d20\u540e\uff0c\n                # \u518d res.append(cur_max)\u4f1aappend \u8d1f\u65e0\u7a77\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(cur_max)\n        return res\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);