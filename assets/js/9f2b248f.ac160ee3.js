"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8530],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(96540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},70651:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Leetcode/Other/Unique Paths III","title":"Unique Paths III","description":"Solution","source":"@site/docs/Leetcode/99.Other/980.Unique Paths III.md","sourceDirName":"Leetcode/99.Other","slug":"/p/eb20d400-4cd2-40e1-9fe4-71e7b4012339","permalink":"/notes/docs/p/eb20d400-4cd2-40e1-9fe4-71e7b4012339","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/980.Unique Paths III.md","tags":[],"version":"current","sidebarPosition":980,"frontMatter":{"created_at":"2025-10-23","page_link":"/p/eb20d400-4cd2-40e1-9fe4-71e7b4012339","slug":"/p/eb20d400-4cd2-40e1-9fe4-71e7b4012339"},"sidebar":"tutorialSidebar","previous":{"title":"99.Other","permalink":"/notes/docs/category/99other"},"next":{"title":"Web Crawler Multithreaded","permalink":"/notes/docs/p/c70b3d7a-37fe-4619-87ec-5c21a060ae8b"}}');var s=t(74848),o=t(28453);const i={created_at:"2025-10-23",page_link:"/p/eb20d400-4cd2-40e1-9fe4-71e7b4012339",slug:"/p/eb20d400-4cd2-40e1-9fe4-71e7b4012339"},c=void 0,d={},a=[{value:"Solution",id:"solution",level:2}];function l(e){const n={code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202209151555585.png",alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202209151555668.png",alt:""})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.p,{children:"\u4e0b\u9762\u662f\u628a\u8def\u5f84\u5168\u90fd\u6253\u5370\u51fa\u6765\u7684\u5199\u6cd5"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def uniquePathsIII(self, grid):\n        num_zeros = 0\n        start, end = None, None\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 1:\n                    start = (r, c)\n                    grid[r][c] = 999\n                if grid[r][c] == 2:\n                    end = (r, c)\n                    grid[r][c] = 0\n                if grid[r][c] == 0:\n                    num_zeros += 1\n        if not start or not end:\n            return []\n        res = []\n        self.dfs(start[0], start[1], end, grid, [start], res, num_zeros)\n        return res\n\n\n    # path represents the cur path starting from the current r,c\n    # res represents all such path\n    def dfs(self, r, c, end, grid, path, res, zeros_left):\n        if (r, c) == end and zeros_left == 0:\n            res.append(path.copy())\n            return\n        for x, y in (r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1):\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]):\n                if grid[x][y] == 0:\n                    path.append((x, y))\n                    grid[x][y] = 999\n                    self.dfs(x, y, end, grid, path, res, zeros_left - 1)\n                    path.pop()\n                    grid[x][y] = 0\n\n\n        \nsol = Solution()\nres = sol.uniquePathsIII([[1,0,0,0],[0,0,0,0],[0,0,2,-1]])\nprint(res)\n# [[(0, 0), (1, 0), (2, 0), (2, 1), (1, 1), (0, 1), (0, 2), (0, 3), (1, 3), (1, 2), (2, 2)], \n# [(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)]]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);