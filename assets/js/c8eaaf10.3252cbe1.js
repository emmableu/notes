"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[4170],{20933:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Leetcode/BFS/314.314 - Binary Tree Vertical Order Traversal (Medium)","title":"314.314 - Binary Tree Vertical Order Traversal (Medium)","description":"\u672c\u9898\u548c 987\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u51fa\u6765\u7684array\u4e0d\u7528sorted","source":"@site/docs/Leetcode/01.BFS/314.314 - Binary Tree Vertical Order Traversal (Medium).md","sourceDirName":"Leetcode/01.BFS","slug":"/p/91ff2f79-b928-4bb5-8bdc-07071e867540","permalink":"/notes/docs/p/91ff2f79-b928-4bb5-8bdc-07071e867540","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/01.BFS/314.314 - Binary Tree Vertical Order Traversal (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/91ff2f79-b928-4bb5-8bdc-07071e867540","slug":"/p/91ff2f79-b928-4bb5-8bdc-07071e867540"},"sidebar":"tutorialSidebar","previous":{"title":"286.286 - Walls and Gates - Medium","permalink":"/notes/docs/p/62acbead-5392-4567-8607-0b10f275c09b"},"next":{"title":"317.317 - Shortest Distance from All Buildings - Hard","permalink":"/notes/docs/p/f0f9aa90-3685-4101-a383-1bf7901dfa2b"}}');var r=i(74848),o=i(28453);const l={created_at:"2025-10-23",page_link:"/p/91ff2f79-b928-4bb5-8bdc-07071e867540",slug:"/p/91ff2f79-b928-4bb5-8bdc-07071e867540"},s=void 0,d={},c=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Constraints",id:"constraints",level:2},{value:"Method",id:"method",level:2},{value:"\u6ce8\u610f\uff1a",id:"\u6ce8\u610f",level:2},{value:"solution",id:"solution",level:2},{value:"API",id:"api",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["\u672c\u9898\u548c ",(0,r.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/b65f0c",children:"987"}),"\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u51fa\u6765\u7684array\u4e0d\u7528sorted"]}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,r.jsx)(n.p,{children:"Given the root of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column)."}),"\n",(0,r.jsx)(n.p,{children:"If two nodes are in the same row and column, the order should be from left to right."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\n\nExample 2:\nInput: root = [3,9,8,4,0,1,7]\nOutput: [[4],[9],[3,0,1],[8],[7]]\n\nExample 3:\nInput: root = [3,9,8,4,0,1,7,null,null,null,2,5]\nOutput: [[4],[9,5],[3,0,1],[8,2],[7]]\n\nExample 4:\nInput: root = []\nOutput: []\n"})}),"\n",(0,r.jsx)(n.h2,{id:"constraints",children:"Constraints"}),"\n",(0,r.jsx)(n.p,{children:"The number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100"}),"\n",(0,r.jsx)(n.h2,{id:"method",children:"Method"}),"\n",(0,r.jsx)(n.p,{children:"\u5bf9\u4e8e\u4e00\u4e2atree\u4e3a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"        1\n    3         2\nnull    5 null  null\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u7ed9\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e00\u4e2arow \u548ccolumn\uff0crow\u53ef\u4ee5\u662fimplicit\u7684\uff0c \u6bcf\u6b21\u5230\u4e0b\u4e00\u4e2a\u5c31\u8fdb\u53bb\u4e86\uff0c\u628acolumn \u548c\u5bf9\u5e94\u7684node\u8bb0\u5f55\u5728\u4e00\u4e2a",(0,r.jsx)(n.code,{children:"col_dict"}),"\u91cc\u9762"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"root \u7684column\u662f0\uff0c root\u5f80\u5de6\u8fb9\u8d70\u5c31-1\uff0c\u5f80\u53f3\u8fb9\u8d70\u5c31+1"}),"\n",(0,r.jsx)(n.li,{children:"\u6bcf\u6b21\u628a\u8fd9\u4e2acolumn \u548cnode\u672c\u8eab\u4e00\u8d77\u653e\u5230queue\u91cc\u9762"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"col_dict"}),": ",(0,r.jsx)(n.code,{children:"{-1: [Node(3)], 0: [Node(1), Node(5)], 1: [Node(2)]}"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u8bb0\u5f55",(0,r.jsx)(n.code,{children:"min_col"}),", ",(0,r.jsx)(n.code,{children:"max_col"}),", \u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u76f4\u63a5\u5bf9dict\u8fdb\u884c\u6309\u987a\u5e8f\u7684iteration\uff0c\u628a\u5b83\u8f6c\u6210list"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\u6ce8\u610f",children:"\u6ce8\u610f\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["queue \u628aroot\u653e\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u5c31\u9ed8\u8ba4\u4e86root\u662f\u6709\u503c\u7684\uff0c\u6240\u4ee5\u8981\u5206\u5f00\u8ba8\u8bbaroot\u4e3a\u7a7a\u7684\u60c5\u51b5\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u8fd9\u4ef6\u4e8b\u60c5\u5bf9\u4e8e\u6240\u6709level order traversal\u90fd\u662f\u8fd9\u6837\u7684"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"solution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from collections import defaultdict, deque\nclass Solution:\n    def verticalOrder(self, root):\n        if not root:\n            return []\n        col_dict = defaultdict(list)\n        q = deque([(root, 0)])\n        min_col, max_col = 0, 0\n        while q:\n            node, ind = q.popleft()\n            if node:\n                col_dict[ind].append(node.val)\n                min_col, max_col = min(ind, min_col), max(ind, max_col)  \n                q.extend(((node.left, ind - 1), (node.right, ind+1)))\n        res = []\n        for ind in range(min_col, max_col + 1):\n            res.append(col_dict[ind])\n        return res\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"class collections.deque([iterable[, maxlen]])"}),"\nReturns a new deque object initialized left-to-right (using append()) with data from iterable. If iterable is not specified, the new deque is empty."]}),"\n",(0,r.jsx)(n.p,{children:"Deques are a generalization of stacks and queues (the name is pronounced \u201cdeck\u201d and is short for \u201cdouble-ended queue\u201d). Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction."}),"\n",(0,r.jsx)(n.p,{children:"Though list objects support similar operations, they are optimized for fast fixed-length operations and incur O(n) memory movement costs for pop(0) and insert(0, v) operations which change both the size and position of the underlying data representation."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"deque.popleft() is faster than list.pop(0), because the deque has been optimized to do popleft() approximately in O(1), while list.pop(0) takes O(n)."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["supports all list functions (e.g., ",(0,r.jsx)(n.code,{children:"append"}),", ",(0,r.jsx)(n.code,{children:"extend"}),", ",(0,r.jsx)(n.code,{children:"insert"}),", ",(0,r.jsx)(n.code,{children:"pop"}),", ",(0,r.jsx)(n.code,{children:"count"}),", ",(0,r.jsx)(n.code,{children:"reverse"}),"), but in addition, also supports:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"appendleft"}),", ",(0,r.jsx)(n.code,{children:"popleft"}),", ",(0,r.jsx)(n.code,{children:"extendleft"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"brushing up knowledge for list:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["fyi: ",(0,r.jsx)(n.code,{children:"count"})," is a generic list api: e.g., ",(0,r.jsx)(n.code,{children:"[1,2,3].count(3)"})," = ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["fyi: ",(0,r.jsx)(n.code,{children:"reverse"})," is a generic list api, reverses list ",(0,r.jsx)(n.em,{children:"in place"}),": e.g.,"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"a = [1,2,3] \na.reverse()\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["then ",(0,r.jsx)(n.code,{children:"a = [3,2,1]"})]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var t=i(96540);const r={},o=t.createContext(r);function l(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);