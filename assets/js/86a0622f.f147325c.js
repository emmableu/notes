"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3678],{28453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var t=o(96540);const r={},l=t.createContext(r);function d(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(l.Provider,{value:n},e.children)}},97134:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Leetcode/Other/938.938 - Range Sum of BST (Easy)","title":"938.938 - Range Sum of BST (Easy)","description":"LC link","source":"@site/docs/Leetcode/99.Other/938.938 - Range Sum of BST (Easy).md","sourceDirName":"Leetcode/99.Other","slug":"/p/21c7e839-78bd-4292-a05d-658b6079ba69","permalink":"/notes/docs/p/21c7e839-78bd-4292-a05d-658b6079ba69","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/938.938 - Range Sum of BST (Easy).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/21c7e839-78bd-4292-a05d-658b6079ba69","slug":"/p/21c7e839-78bd-4292-a05d-658b6079ba69"},"sidebar":"tutorialSidebar","previous":{"title":"935.935 - Knight Dialer - Medium","permalink":"/notes/docs/p/1b67a3a7-a086-4dd6-bbfe-55f2ef5cef51"},"next":{"title":"939.939 - Minimum Area Rectangle - Medium","permalink":"/notes/docs/p/e9e06530-6c6a-4627-b1ab-2281707422e1"}}');var r=o(74848),l=o(28453);const d={created_at:"2025-10-23",page_link:"/p/21c7e839-78bd-4292-a05d-658b6079ba69",slug:"/p/21c7e839-78bd-4292-a05d-658b6079ba69"},i=void 0,s={},a=[{value:"nonlocal keyword:",id:"nonlocal-keyword",level:2},{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2},{value:"1: \u9012\u5f52 (preferred)",id:"1-\u9012\u5f52-preferred",level:3},{value:"2. iteration:\u4e2d\u5e8f\u904d\u5386 (less preferred)",id:"2-iteration\u4e2d\u5e8f\u904d\u5386-less-preferred",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/range-sum-of-bst/",children:"LC link"})}),"\n",(0,r.jsx)(n.h2,{id:"nonlocal-keyword",children:"nonlocal keyword:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5982\u679csub function \u4fee\u6539\u4e86\u53d8\u91cf\uff0c\u9700\u8981\u5199nonlocal \u7684keyword"}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u53ea\u662freference\u4e0d\u4fee\u6539\uff1a\u4e0d\u7528\u5199\uff0cfunction\u653e\u5728\u54ea\u91cc\u4e5f\u65e0\u6240\u8c13\uff08\u53ef\u4ee5\u5728\u5b9a\u4e49\u7684\u524d\u9762\u540e\u9762\u90fd\u53ef\u4ee5\uff09"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high]."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Example 1:\nInput: root = [10,5,15,3,7,null,18], low = 7, high = 15\nOutput: 32\nExplanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.\n\nExample 2:\nInput: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\nOutput: 23\nExplanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(n.h3,{id:"1-\u9012\u5f52-preferred",children:"1: \u9012\u5f52 (preferred)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:\n        res = 0\n        def dfs(node):\n            nonlocal res\n            if not node:\n                return\n            if low <= node.val <= high:\n                res += node.val \n                dfs(node.left)\n                dfs(node.right)\n            elif node.val > high:\n                dfs(node.left)\n            elif node.val < low:\n                dfs(node.right)\n            return res\n        dfs(root)\n        return res\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-iteration\u4e2d\u5e8f\u904d\u5386-less-preferred",children:"2. iteration:\u4e2d\u5e8f\u904d\u5386 (less preferred)"}),"\n",(0,r.jsx)(n.p,{children:"\u56e0\u4e3a\u6240\u6709\u7684\u90fd\u904d\u5386\u4e86\uff0c\u6240\u4ee5\u867d\u7136\u540c\u6837\u662f o\uff08n\uff09\u4f46\u662f\u8017\u65f6\u66f4\u957f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def rangeSumBST(self, root, low, high):\n        stk, node = [], root\n        res = 0\n        while stk or node:\n            while node:\n                stk.append(node)\n                node = node.left\n            node = stk.pop()\n            if low <= node.val <= high:\n                res += node.val\n            node = node.right\n        return res\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);