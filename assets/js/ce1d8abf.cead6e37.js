"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7581],{14554:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"Leetcode/Other/1382.1382 - Balance a Binary Search Tree (Medium)","title":"1382.1382 - Balance a Binary Search Tree (Medium)","description":"LC link","source":"@site/docs/Leetcode/99.Other/1382.1382 - Balance a Binary Search Tree (Medium).md","sourceDirName":"Leetcode/99.Other","slug":"/p/28830c82-eff4-4bf0-9242-ec0cc41a60a8","permalink":"/notes/docs/p/28830c82-eff4-4bf0-9242-ec0cc41a60a8","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1382.1382 - Balance a Binary Search Tree (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/28830c82-eff4-4bf0-9242-ec0cc41a60a8","slug":"/p/28830c82-eff4-4bf0-9242-ec0cc41a60a8"},"sidebar":"tutorialSidebar","previous":{"title":"138.138 - Copy List with Random Pointer - Medium","permalink":"/notes/docs/p/0e587dc3-46eb-46a6-b157-1d1b3b1ec78b"},"next":{"title":"1424.1424 - Diagonal Traverse II (Medium)","permalink":"/notes/docs/p/5d0e8ceb-9c36-44bd-a6a0-b004b1a343b7"}}');var l=r(74848),i=r(28453);const o={created_at:"2025-10-23",page_link:"/p/28830c82-eff4-4bf0-9242-ec0cc41a60a8",slug:"/p/28830c82-eff4-4bf0-9242-ec0cc41a60a8"},a=void 0,c={},s=[{value:"Description",id:"description",level:2},{value:"\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\uff1a",id:"\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49",level:2},{value:"Example:",id:"example",level:2},{value:"Solution: \u9012\u5f52",id:"solution-\u9012\u5f52",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://leetcode.com/problems/balance-a-binary-search-tree/",children:"LC link"})}),"\n",(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(n.p,{children:"Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them."}),"\n",(0,l.jsx)(n.p,{children:"A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1."}),"\n",(0,l.jsx)(n.h2,{id:"\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49",children:"\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\uff1a"}),"\n",(0,l.jsx)(n.p,{children:"\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"\u7ed9\u5b9a\u4e8c\u53c9\u6811 [3,9,20,null,null,15,7]\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\u8fd4\u56de true \u3002\n\n\u793a\u4f8b 2:\n\n\u7ed9\u5b9a\u4e8c\u53c9\u6811 [1,2,2,3,3,null,null,4,4]\n\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n\u8fd4\u56de\xa0false\n"})}),"\n",(0,l.jsx)(n.h2,{id:"example",children:"Example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Input: root = [1,null,2,null,3,null,4,null,null]\nOutput: [2,1,3,null,null,null,4]\nExplanation: This is not the only correct answer, [3,1,4,null,2] is also correct.\n"})}),"\n",(0,l.jsx)(n.h2,{id:"solution-\u9012\u5f52",children:"Solution: \u9012\u5f52"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"\u5148\u7528\u4e2d\u5e8f\u904d\u5386\u8f6c\u5316\u6210\u6709\u5e8f\u6570\u7ec4"}),"\n",(0,l.jsxs)(n.li,{children:["\u518d\u628a\u6709\u5e8f\u6570\u7ec4\u8f6c\u6210\u5e73\u8861\u4e8c\u53c9\u6811\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u672c\u8d28\u5c31\u662f\u5bfb\u627e\u5206\u5272\u70b9\uff0c\u5206\u5272\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u5de6\u533a\u95f4\u548c\u53f3\u533a\u95f4\u3002"}),"\n",(0,l.jsxs)(n.li,{children:["\u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u4e2d\u95f4\u8282\u70b9\u6709\u4e24\u4e2a\uff0c\u5219\u53d6\u54ea\u4e2a\u90fd\u53ef\u4ee5\n",(0,l.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/1382-0.png",alt:""})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def balanceBST(self, root):\n        def inorder(node):\n            if not node:\n                return []\n            return inorder(node.left) + [node.val] + inorder(node.right)\n        \n        lst = inorder(root)\n        def dfs(l, r):\n            if l > r:\n                return None\n            mid = (l + r)//2\n            root = TreeNode(lst[mid])\n            root.left = dfs(l, mid-1)\n            root.right = dfs(mid + 1, r)\n            return root\n        return dfs(0, len(lst)-1)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(96540);const l={},i=t.createContext(l);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);