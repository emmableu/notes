"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9389],{10673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Leetcode/DFS/129.129 - Sum Root to Leaf Numbers (Medium)","title":"129.129 - Sum Root to Leaf Numbers (Medium)","description":"LC link","source":"@site/docs/Leetcode/04.DFS/129.129 - Sum Root to Leaf Numbers (Medium).md","sourceDirName":"Leetcode/04.DFS","slug":"/p/b70e2ad9-e20b-4bab-899c-014046071008","permalink":"/notes/docs/p/b70e2ad9-e20b-4bab-899c-014046071008","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/129.129 - Sum Root to Leaf Numbers (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/b70e2ad9-e20b-4bab-899c-014046071008","slug":"/p/b70e2ad9-e20b-4bab-899c-014046071008"},"sidebar":"tutorialSidebar","previous":{"title":"114.114 - Flatten Binary Tree to Linked List (Medium)","permalink":"/notes/docs/p/27802d20-713f-4587-9118-3dd72b253fe8"},"next":{"title":"133.133 - Clone Graph - Medium","permalink":"/notes/docs/p/f8060567-63e2-4828-a8b0-f627fb586493"}}');var r=n(74848),s=n(28453);const a={created_at:"2025-10-23",page_link:"/p/b70e2ad9-e20b-4bab-899c-014046071008",slug:"/p/b70e2ad9-e20b-4bab-899c-014046071008"},i=void 0,l={},d=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/sum-root-to-leaf-numbers/",children:"LC link"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/solution/129-qiu-gen-dao-xie-zi-jie-dian-shu-zi-zhi-he-di-4/",children:"explanation"})}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(t.p,{children:"You are given the root of a binary tree containing digits from 0 to 9 only."}),"\n",(0,r.jsx)(t.p,{children:"Each root-to-leaf path in the tree represents a number."}),"\n",(0,r.jsx)(t.p,{children:"For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer."}),"\n",(0,r.jsx)(t.p,{children:"A leaf node is a node with no children."}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Example 1:\nInput: root = [1,2,3]\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n\nExample 2:\nInput: root = [4,9,0,5,1]\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n"})}),"\n",(0,r.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"path_sum"}),": \u5f53\u524dpath\u7684\u503c\n",(0,r.jsx)(t.code,{children:"res"}),": \u7d2f\u8ba1\u7684\u603b\u548c"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class Solution(object):\n    def sumNumbers(self, root): # DFS recursively \n        res = 0\n        def dfs(root, path_sum):\n            nonlocal res\n            if not root:\n                return\n            if not root.left and not root.right:\n                path_sum = path_sum*10 + root.val\n                res += path_sum\n            dfs(root.left, path_sum*10+root.val)\n            dfs(root.right, path_sum*10+root.val)\n        dfs(root, 0)\n        return res\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(96540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);