"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3994],{16181:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Leetcode/Other/346.346 - Moving Average from Data Stream - Easy","title":"346.346 - Moving Average from Data Stream - Easy","description":"LC link","source":"@site/docs/Leetcode/99.Other/346.346 - Moving Average from Data Stream - Easy.md","sourceDirName":"Leetcode/99.Other","slug":"/p/a120021e-ad0c-4892-8141-b66fe24a8b8e","permalink":"/notes/docs/p/a120021e-ad0c-4892-8141-b66fe24a8b8e","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/346.346 - Moving Average from Data Stream - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/a120021e-ad0c-4892-8141-b66fe24a8b8e","slug":"/p/a120021e-ad0c-4892-8141-b66fe24a8b8e"},"sidebar":"tutorialSidebar","previous":{"title":"341.341 - Flatten Nested List Iterator - Medium","permalink":"/notes/docs/p/db515264-89fc-4a61-a40e-641118c0c8de"},"next":{"title":"347.347 - Top K Frequent Elements - Medium","permalink":"/notes/docs/p/107911af-32f3-4e1d-bb10-c822a312a6d7"}}');var l=s(74848),r=s(28453);const t={created_at:"2025-10-23",page_link:"/p/a120021e-ad0c-4892-8141-b66fe24a8b8e",slug:"/p/a120021e-ad0c-4892-8141-b66fe24a8b8e"},a=void 0,o={},d=[{value:"Description",id:"description",level:2},{value:"\u4e2d\u6587",id:"\u4e2d\u6587",level:3},{value:"eng",id:"eng",level:3},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2},{value:"1. Circular array (space complexity = O(n), n=\u7a97\u53e3\u5927\u5c0fsize)\uff0c preferred\u3002",id:"1-circular-array-space-complexity--on-n\u7a97\u53e3\u5927\u5c0fsize-preferred",level:3},{value:"2. Deque (space complexity = O(n), n=\u7a97\u53e3\u5927\u5c0fsize), not preferred",id:"2-deque-space-complexity--on-n\u7a97\u53e3\u5927\u5c0fsize-not-preferred",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://leetcode.com/problems/moving-average-from-data-stream/",children:"LC link"}),"\n",(0,l.jsx)(n.a,{href:"https://leetcode.com/problems/moving-average-from-data-stream/discuss/81489/Simple-Python-solution-based-on-Circular-Array-real-O(1)-time-next()",children:"explanation"})]}),"\n",(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(n.h3,{id:"\u4e2d\u6587",children:"\u4e2d\u6587"}),"\n",(0,l.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u636e\u6d41\u548c\u4e00\u4e2a\u7a97\u53e3\u5927\u5c0f\uff0c\u6839\u636e\u8be5\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u8ba1\u7b97\u5176\u6240\u6709\u6574\u6570\u7684\u79fb\u52a8\u5e73\u5747\u503c\u3002"}),"\n",(0,l.jsxs)(n.p,{children:["\u5b9e\u73b0 ",(0,l.jsx)(n.code,{children:"MovingAverage"})," \u7c7b\uff1a"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"MovingAverage(int size)"})," \u7528\u7a97\u53e3\u5927\u5c0f ",(0,l.jsx)(n.code,{children:"size"})," \u521d\u59cb\u5316\u5bf9\u8c61\u3002\n",(0,l.jsx)(n.code,{children:"double next(int val)"})," \u8ba1\u7b97\u5e76\u8fd4\u56de\u6570\u636e\u6d41\u4e2d\u6700\u540e ",(0,l.jsx)(n.code,{children:"size"})," \u4e2a\u503c\u7684\u79fb\u52a8\u5e73\u5747\u503c\u3002"]}),"\n",(0,l.jsx)(n.h3,{id:"eng",children:"eng"}),"\n",(0,l.jsx)(n.p,{children:"Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Implement the ",(0,l.jsx)(n.code,{children:"MovingAverage"})," class:"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"MovingAverage(int size)"})," Initializes the object with the size of the window size.\ndouble next(int val) Returns the moving average of the last size values of the stream."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'\u793a\u4f8b\uff1a\n\u8f93\u5165\uff1a\n["MovingAverage", "next", "next", "next", "next"]\n[[3], [1], [10], [3], [5]]\n\u8f93\u51fa\uff1a\n[null, 1.0, 5.5, 4.66667, 6.0]\n\n\u89e3\u91ca\uff1a\nMovingAverage movingAverage = new MovingAverage(3);\nmovingAverage.next(1); // \u8fd4\u56de 1.0 = 1 / 1\nmovingAverage.next(10); // \u8fd4\u56de 5.5 = (1 + 10) / 2\nmovingAverage.next(3); // \u8fd4\u56de 4.66667 = (1 + 10 + 3) / 3\nmovingAverage.next(5); // \u8fd4\u56de 6.0 = (10 + 3 + 5) / 3\n'})}),"\n",(0,l.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,l.jsx)(n.h3,{id:"1-circular-array-space-complexity--on-n\u7a97\u53e3\u5927\u5c0fsize-preferred",children:"1. Circular array (space complexity = O(n), n=\u7a97\u53e3\u5927\u5c0fsize)\uff0c preferred\u3002"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"self.arr"}),": \u4e00\u4e2a\u957f\u5ea6\u6c38\u8fdc <= size \u7684 list\n",(0,l.jsx)(n.code,{children:"self.idx"}),": \u5f53\u524d\u662f\u7b2c\u51e0\u4e2a\u6570\u5b57\u4ece1\u5f00\u59cb\n",(0,l.jsx)(n.code,{children:"self.sums"}),": \u5f53\u524d",(0,l.jsx)(n.code,{children:"self.arr"}),"\u7684\u548c\n\u6bcf\u6b21\u66f4\u65b0\uff1a \u66f4\u65b0\u5728 ",(0,l.jsx)(n.code,{children:"self.idx % self.size"})," \u8fd9\u4e2aindex\u4e0a\uff0c ",(0,l.jsx)(n.code,{children:"self.sums"}),"\u5148\u53bb\u6389\u8fd9\u4e2aindex\u4e0a\u4e4b\u524d\u7684\u503c\uff0c\u518d\u52a0\u4e0a\u8fd9\u4e2aindex\u4e0a\u65b0\u7684\u503c"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class MovingAverage(object):\n\n    def __init__(self, size):\n        self.arr = [0] * size\n        self.sums = 0\n        self.idx = 0\n        self.size = size\n\n    def next(self, val):\n        self.idx += 1\n        self.sums -= self.arr[self.idx % self.size]\n        self.arr[self.idx % self.size] = val\n        self.sums += val\n        return self.sums / float(min(self.idx, self.size))\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-deque-space-complexity--on-n\u7a97\u53e3\u5927\u5c0fsize-not-preferred",children:"2. Deque (space complexity = O(n), n=\u7a97\u53e3\u5927\u5c0fsize), not preferred"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u521d\u59cb\u5316 queue \u6765\u5b58\u50a8\u6570\u636e\u6d41\u7684\u6570\u636e\u548c\u79fb\u52a8\u7a97\u53e3 n \u7684\u5927\u5c0f\u3002"}),"\n",(0,l.jsx)(n.li,{children:"\u6bcf\u6b21\u8c03\u7528 next(val)\uff0c\u9996\u5148\u5c06 val \u6dfb\u52a0\u5230 queue \u4e2d\uff0c\u7136\u540e\u6211\u4eec\u4ece queue \u53d6\u6700\u540e n \u4e2a\u5143\u7d20\u8ba1\u7b97\u5e73\u5747\u503c\u3002"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from collections import deque\nclass MovingAverage:\n    def __init__(self, size: int):\n        self.size = size\n        self.queue = deque()\n        # number of elements seen so far\n        self.window_sum = 0\n        self.count = 0\n    \n    def next(self, val: int) -> float:\n        self.count += 1\n        # calculate the new sum by shifting the window\n        self.queue.append(val)\n        tail = self.queue.popleft() if self.count > self.size else 0\n        \n        self.window_sum = self.window_sum - tail + val\n        \n        return self.window_sum / min(self.size, self.count)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);