"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3453],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(96540);const r={},o=a.createContext(r);function i(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:t},e.children)}},54557:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Leetcode/Other/53.53 - Maximum Subarray - Medium","title":"53.53 - Maximum Subarray - Medium","description":"tags: [Array, Divide and Conquer, Dynamic Programming]","source":"@site/docs/Leetcode/99.Other/53.53 - Maximum Subarray - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/5f2015ae-bedb-4f04-adeb-84a69e283ba2","permalink":"/notes/docs/p/5f2015ae-bedb-4f04-adeb-84a69e283ba2","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/53.53 - Maximum Subarray - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/5f2015ae-bedb-4f04-adeb-84a69e283ba2","slug":"/p/5f2015ae-bedb-4f04-adeb-84a69e283ba2"},"sidebar":"tutorialSidebar","previous":{"title":"518.518 - Coin Change 2 - Medium","permalink":"/notes/docs/p/eff33321-8f5f-4f04-ad24-404e68de6185"},"next":{"title":"536.536 - Construct Binary Tree from String (Medium)","permalink":"/notes/docs/p/b89bfd42-d30f-4743-8e16-84bc736adb6c"}}');var r=n(74848),o=n(28453);const i={created_at:"2025-10-23",page_link:"/p/5f2015ae-bedb-4f04-adeb-84a69e283ba2",slug:"/p/5f2015ae-bedb-4f04-adeb-84a69e283ba2"},s=void 0,d={},c=[{value:"Solution  - DP:",id:"solution----dp",level:2}];function u(e){const t={code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"tags: [Array, Divide and Conquer, Dynamic Programming]"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208181603871.png",alt:""})}),"\n",(0,r.jsx)(t.p,{children:"\u6ce8\u610f\uff1a"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"\u8fd9\u9053\u9898\u4e0d\u80fd\u7528\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\uff0c\u56e0\u4e3a\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u662f\u8d1f\u6570"}),"\u3002"]}),"\n",(0,r.jsx)(t.p,{children:"\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u65e0\u975e\u5c31\u662f\u53cc\u6307\u9488\u5f62\u6210\u7684\u7a97\u53e3\u626b\u63cf\u6574\u4e2a\u6570\u7ec4/\u5b50\u4e32\uff0c\u4f46\u5173\u952e\u662f\uff0c\u4f60\u5f97\u6e05\u695a\u5730\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u79fb\u52a8\u53f3\u4fa7\u6307\u9488\u6765\u6269\u5927\u7a97\u53e3\uff0c\u4ec0\u4e48\u65f6\u5019\u79fb\u52a8\u5de6\u4fa7\u6307\u9488\u6765\u51cf\u5c0f\u7a97\u53e3\u3002\u800c\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u4f60\u60f3\u60f3\uff0c\u5f53\u7a97\u53e3\u6269\u5927\u7684\u65f6\u5019\u53ef\u80fd\u9047\u5230\u8d1f\u6570\uff0c\u7a97\u53e3\u4e2d\u7684\u503c\u4e5f\u5c31\u53ef\u80fd\u589e\u52a0\u4e5f\u53ef\u80fd\u51cf\u5c11\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u673a\u53bb\u6536\u7f29\u5de6\u4fa7\u7a97\u53e3\uff0c\u4e5f\u5c31\u65e0\u6cd5\u6c42\u51fa\u300c\u6700\u5927\u5b50\u6570\u7ec4\u548c\u300d\u3002"}),"\n",(0,r.jsx)(t.h2,{id:"solution----dp",children:"Solution  - DP:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class Solution:\n\tdef maxSubArray(self, nums: List[int]) -> int:\n\t\tglobal_max, cur_max = - float('inf'), 0\n\t\tfor num in nums:\n\t\t\tcur_max = max(num, cur_max + num)\n\t\t\tglobal_max = max(global_max, cur_max)\n\t\treturn global_max\n"})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);