"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6452],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var d=n(96540);const r={},a=d.createContext(r);function o(e){const t=d.useContext(a);return d.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),d.createElement(a.Provider,{value:t},e.children)}},68804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"Leetcode/Line Sweep/2158.2158 - Amount of New Area Painted Each Day - Hard","title":"2158.2158 - Amount of New Area Painted Each Day - Hard","description":"tags: [Array, Segment Tree, Ordered Set]","source":"@site/docs/Leetcode/09.Line Sweep/2158.2158 - Amount of New Area Painted Each Day - Hard.md","sourceDirName":"Leetcode/09.Line Sweep","slug":"/p/f29f5f38-327a-4f32-b210-25d78093e8ce","permalink":"/notes/docs/p/f29f5f38-327a-4f32-b210-25d78093e8ce","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/09.Line Sweep/2158.2158 - Amount of New Area Painted Each Day - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/f29f5f38-327a-4f32-b210-25d78093e8ce","slug":"/p/f29f5f38-327a-4f32-b210-25d78093e8ce"},"sidebar":"tutorialSidebar","previous":{"title":"09.Line Sweep","permalink":"/notes/docs/category/09line-sweep"},"next":{"title":"253.253 - Meeting Rooms II - Medium","permalink":"/notes/docs/p/c603fa6e-aeed-4050-8ad0-f682d2f3e42e"}}');var r=n(74848),a=n(28453);const o={created_at:"2025-10-23",page_link:"/p/f29f5f38-327a-4f32-b210-25d78093e8ce",slug:"/p/f29f5f38-327a-4f32-b210-25d78093e8ce"},i=void 0,s={},l=[{value:"reference reading",id:"reference-reading",level:2}];function f(e){const t={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["tags: [Array, Segment Tree, Ordered Set]\n",(0,r.jsx)(t.a,{href:"https://leetcode.cn/problems/amount-of-new-area-painted-each-day/",children:"LC link"})]}),"\n",(0,r.jsx)(t.img,{width:"812",alt:"image",src:"https://user-images.githubusercontent.com/41789327/179910512-dc0121ae-5d5f-4d7a-9fb2-c932757f67a0.png"}),"\n",(0,r.jsx)(t.img,{width:"807",alt:"image",src:"https://user-images.githubusercontent.com/41789327/179910550-278eba9b-8943-497c-822a-b893ad6e0ac9.png"}),"\n## Solution (Segment Tree)\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"class SegmentNode:\n\tdef __init__(self):\n\t\tself.left = None\n\t\tself.right = None\n\t\tself.val = 0\n\t\tself.add = 0\n\nclass Solution:\n\tdef amountPainted(self, paint):\n\t\troot = SegmentNode()\n\t\tmax_ub = 5 * (10 ** 4)\n\t\tres = []\n\t\tfor paint_today in paint:\n\t\t\tl, r = paint_today[0], paint_today[1]\n\t\t\tarea = r - l - self.query(root, 0, max_ub, l, r - 1)\n\t\t\tres.append(area)\n\t\t\tself.update(root, 0, max_ub, l, r - 1)\n\t\treturn res\n\t\n\tdef query(self, node, lb, ub, l, r):\n\t\tif l <= lb and ub <= r:\n\t\t\treturn node.val\n\t\tmid = (lb + ub) // 2\n\t\tres = 0\n\t\t# \u6ce8\u610f\uff1a \u8fd9\u91cc\u662f\u7528\u7684lb\uff0c ub \u548cmid \u7684\u5173\u7cfb\n\t\tself.push_down(node, mid - lb + 1, ub - mid)\n\t\t# \u6ce8\u610f\uff1a \u8fd9\u91cc\u662f\u7528\u7684l\uff0c r \u548cmid \u7684\u5173\u7cfb\n\t\tif l <= mid:\n\t\t\t# \u6ce8\u610f\uff1a\u662fnode.left,\u4e0d\u662fnode\uff0c\u4e4b\u524d\u5199\u9519\u4e86\n\t\t\tres += self.query(node.left, lb, mid, l, r)\n\t\tif r > mid:\n\t\t\tres += self.query(node.right, mid + 1, ub, l, r)\n\t\treturn res\n\n\tdef update(self, node, lb, ub, l, r):\n\t\tif l <= lb and ub <= r:\n\t\t\tnode.val = ub - lb + 1\n\t\t\tnode.add = 1\n\t\t\treturn \n\t\tmid = (lb + ub) // 2\n\t\tself.push_down(node, mid - lb + 1, ub - mid)\n\t\tif l <= mid:\n\t\t\tself.update(node.left, lb, mid, l, r)\n\t\tif r > mid:\n\t\t\tself.update(node.right, mid + 1, ub, l, r)\n\t\tself.push_up(node)\n\n\tdef push_up(self, node):\n\t\tnode.val = node.left.val + node.right.val\n\n\tdef push_down(self, node, left_num, right_num):\n\t\tif not node.left:\n\t\t\tnode.left = SegmentNode()\n\t\tif not node.right:\n\t\t\tnode.right = SegmentNode()\n\n\t\tif node.add:\n\t\t\tnode.left.val = left_num\n\t\t\tnode.right.val = right_num \n\t\t\tnode.left.add = 1\n\t\t\tnode.right.add = 1\n\t\t\tnode.add = 0\n"})}),"\n",(0,r.jsx)(t.h2,{id:"reference-reading",children:"reference reading"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://leetcode.com/discuss/study-guide/2166045/line-sweep-algorithms",children:"line sweep algorithms"})})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}}}]);