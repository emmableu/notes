"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1397],{28453:(n,e,i)=>{i.d(e,{R:()=>d,x:()=>c});var s=i(96540);const t={},r=s.createContext(t);function d(n){const e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),s.createElement(r.Provider,{value:e},n.children)}},75652:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Leetcode/BFS/317.317 - Shortest Distance from All Buildings - Hard","title":"317.317 - Shortest Distance from All Buildings - Hard","description":"LC link","source":"@site/docs/Leetcode/01.BFS/317.317 - Shortest Distance from All Buildings - Hard.md","sourceDirName":"Leetcode/01.BFS","slug":"/p/f0f9aa90-3685-4101-a383-1bf7901dfa2b","permalink":"/notes/docs/p/f0f9aa90-3685-4101-a383-1bf7901dfa2b","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/01.BFS/317.317 - Shortest Distance from All Buildings - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/f0f9aa90-3685-4101-a383-1bf7901dfa2b","slug":"/p/f0f9aa90-3685-4101-a383-1bf7901dfa2b"},"sidebar":"tutorialSidebar","previous":{"title":"314.314 - Binary Tree Vertical Order Traversal (Medium)","permalink":"/notes/docs/p/91ff2f79-b928-4bb5-8bdc-07071e867540"},"next":{"title":"515.515 - Find Largest Value in Each Tree Row (Medium)","permalink":"/notes/docs/p/bf7d56ea-3a86-40b6-b778-8ecbb93d6f70"}}');var t=i(74848),r=i(28453);const d={created_at:"2025-10-23",page_link:"/p/f0f9aa90-3685-4101-a383-1bf7901dfa2b",slug:"/p/f0f9aa90-3685-4101-a383-1bf7901dfa2b"},c=void 0,l={},a=[{value:"Solution\uff1a\u4ece\u76ee\u6807\u5efa\u7b51\u9006\u5411BFS",id:"solution\u4ece\u76ee\u6807\u5efa\u7b51\u9006\u5411bfs",level:2}];function o(n){const e={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/shortest-distance-from-all-buildings/",children:"LC link"}),"\n",(0,t.jsx)(e.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/317-0.png",alt:""})]}),"\n",(0,t.jsx)(e.h2,{id:"solution\u4ece\u76ee\u6807\u5efa\u7b51\u9006\u5411bfs",children:"Solution\uff1a\u4ece\u76ee\u6807\u5efa\u7b51\u9006\u5411BFS"}),"\n",(0,t.jsx)(e.p,{children:"\u6700\u521d\u7684\u60f3\u6cd5\u662f\u7edf\u8ba1\u51fa\u6240\u6709\u5efa\u7b51\u7269,\u518d\u4ece\u6bcf\u4e00\u4e2a\u4e3a\u7a7a\u7684\u5730\u65b9\u51fa\u53d1, \u8fdb\u884cBFS, \u786e\u4fdd\u6240\u6709\u5efa\u7b51\u7269\u88ab\u904d\u5386\u5230, \u540c\u65f6\u8ba1\u7b97\u51fa\u603b\u7684\u8ddd\u79bb, \u6700\u5c0f\u7684\u5c31\u662f\u7b54\u6848. \u4f46\u662f\u5982\u679c\u5f88\u7a7a\u65f7\u7684\u8bdd, \u5c31\u662f\u5efa\u7b51\u7269\u5f88\u5c11, \u90a3\u4e48\u8ba1\u7b97\u91cf\u592a\u5927"}),"\n",(0,t.jsx)(e.p,{children:"\u4e0d\u59a8\u6362\u4e00\u4e2a\u601d\u8def, \u6211\u4eec\u8ba1\u7b97\u4ece\u6bcf\u4e2a\u5efa\u7b51\u7269\u5230\u6bcf\u4e2a\u7a7a\u5730\u7684\u8ddd\u79bb, \u518d\u5bf9\u7a7a\u5730\u8fdb\u884c\u7edf\u8ba1, \u6240\u6709\u5efa\u7b51\u7269\u90fd\u80fd\u5230\u8fbe\u7684\u7a7a\u5730\u4e2d, \u8ddd\u79bb\u6700\u5c0f\u7684\u90a3\u4e2a\u5373\u4e3a\u6240\u6c42."}),"\n",(0,t.jsx)(e.p,{children:"\u9664\u53bb\u4e00\u4e2avis\u7684set\u4ee5\u5916\uff0c\u8fd8\u9700\u8981\u4e24\u4e2a\u989d\u5916\u7684\u6570\u636e\u7ed3\u6784\uff1a"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"hit"}),",\u4e00\u4e2am * n\u7684\u77e9\u9635\uff0c",(0,t.jsx)(e.code,{children:"hit[i][j]"}),"\u8868\u793a\u88ab\u4ece\u6bcf\u4e2a\u5efa\u7b51\u7269\u51fa\u53d1\u7684bfs \u603b\u5171visit\u4e86\u51e0\u6b21\uff0c\u5982\u679c\u662f\u4e00\u4e2avalid\u7684\u70b9\uff0c\u6700\u540e\u5e94\u8be5\u88abvisit ",(0,t.jsx)(e.code,{children:"num_building"}),"(\u603b\u5efa\u7b51\u7269\u7684\u6570\u91cf) \u6b21"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"dist_sum"}),",\u4e00\u4e2am * n\u7684\u77e9\u9635\uff0c",(0,t.jsx)(e.code,{children:"dist_sum[i][j]"}),": \u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u5230\u6240\u6709\u5efa\u7b51\u7684\u603b\u8ddd\u79bb\uff0c\u6700\u540e\u627e\u518dhit valid\u7684\u60c5\u51b5\u4e0b",(0,t.jsx)(e.code,{children:"dist_sum"}),"\u77e9\u9635\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"\u4f8b\u5982\uff0c\u5bf9\u4e8einput"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"[[1,0,2,0,1],\n [0,0,0,0,0],\n [0,0,1,0,0]]\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u6700\u540e\u5f97\u5230"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"hit = \n[[0, 3, 0, 3, 0], \n [3, 3, 3, 3, 3], \n [3, 3, 0, 3, 3]]\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"dist_sum =\n[[0, 9, 0, 9, 0], \n [9, 8, 7, 8, 9], \n [10, 9, 0, 9, 10]]\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u6240\u4ee5\uff0c\u6700\u77ed\u8ddd\u79bb\u662f7"}),"\n",(0,t.jsx)(e.p,{children:"\u548c\u666e\u901abfs\u76f8\u6bd4\u7279\u6b8a\u7684\u5730\u65b9\uff1a"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u5728\u6269\u6563\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u7684\u70b9\u662f0\uff0c \u90a3\u4e48\u7528 ",(0,t.jsx)(e.code,{children:"hit[x][y] += 1; dist_sum[x][y] += step"})," \u6765\u8868\u793a\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\u8fd9\u4e2a\u70b9\u80fd\u8d70\u5230\u4e00\u4e2a\u65b0\u7684\u5efa\u7b51\u7269\uff08",(0,t.jsx)(e.code,{children:"hit[x][y] += 1"}),"\uff09\uff0c"]}),"\n",(0,t.jsxs)(e.li,{children:["\u8d70\u5230\u8fd9\u4e2a\u65b0\u7684\u5efa\u7b51\u7269\u9700\u8981\u7684\u6b65\u6570\u662f ",(0,t.jsx)(e.code,{children:"step"})," (",(0,t.jsx)(e.code,{children:"dist_sum[x][y] += step"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"\u6ce8\u610f\uff1a \u8fd8\u8981\u8003\u8651\u8d70\u4e0d\u5230\u7684\u60c5\u51b5\uff1a"}),"\n",(0,t.jsxs)(e.p,{children:["if we cannot reach a building, e.g., in ",(0,t.jsx)(e.code,{children:"[[0, 2, 1]]"}),","]}),"\n",(0,t.jsx)(e.p,{children:"\u90a3\u4e48\u6240\u6709\u672c\u6765\u662f0\u7684\u70b9\uff0c\u6700\u540ehit\u7684\u503c\u90fd<num_building"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from collections import deque\n\n\nclass Solution:\n    def shortestDistance(self, grid):\n        m, n = len(grid), len(grid[0])\n        num_building = 0\n        hit = [[0 for j in range(n)] for i in range(m)]\n        dist = [[0 for j in range(n)] for i in range(m)]\n        for r in range(m):\n            for c in range(n):\n                if grid[r][c] == 1:\n                    self.bfs(r, c, grid, hit, dist)\n                    num_building += 1\n\n        min_distance = float('inf')\n        for r in range(m):\n            for c in range(n):\n                if hit[r][c] == num_building:\n                    min_distance = min(min_distance, dist[r][c])\n        return -1 if min_distance == float('inf') else min_distance\n\n    def bfs(self, start_r, start_c, grid, hit, dist):\n        q = deque([(start_r, start_c)])\n        vis = {}\n        step = 0\n        while q:\n            size = len(q)\n            step += 1\n            for _ in range(size):\n                r, c = q.popleft()\n                for x, y in (r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1):\n                    if 0 <= x < len(grid) and 0 <= y < len(grid[0]) \\\n                            and (x, y) not in vis and grid[x][y] == 0:\n                        q.append((x, y))\n                        vis.add((x, y))\n                        hit[x][y] += 1\n                        dist[x][y] += step\n\n"})})]})}function f(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}}}]);