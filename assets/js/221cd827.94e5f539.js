"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6550],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>s});var r=t(96540);const i={},o=r.createContext(i);function d(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(o.Provider,{value:n},e.children)}},39371:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>d,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Leetcode/Other/273.273 - Integer to English Words (Hard)","title":"273.273 - Integer to English Words (Hard)","description":"for i, char in enumerate(\\"ab\\", 1) => (1, \\"a\\"), (2, \\"b\\")","source":"@site/docs/Leetcode/99.Other/273.273 - Integer to English Words (Hard).md","sourceDirName":"Leetcode/99.Other","slug":"/p/2dd7cbd7-815c-4566-b82c-11811a5ff04e","permalink":"/notes/docs/p/2dd7cbd7-815c-4566-b82c-11811a5ff04e","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/273.273 - Integer to English Words (Hard).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/2dd7cbd7-815c-4566-b82c-11811a5ff04e","slug":"/p/2dd7cbd7-815c-4566-b82c-11811a5ff04e"},"sidebar":"tutorialSidebar","previous":{"title":"271.271 - Encode and Decode Strings (Medium)","permalink":"/notes/docs/p/f80e88f0-39b5-4dcf-bc9d-2c359ac3a670"},"next":{"title":"283.283 - Move Zeroes - Easy","permalink":"/notes/docs/p/46fa6460-b449-4bd4-92e6-7addd7398ad1"}}');var i=t(74848),o=t(28453);const d={created_at:"2025-10-23",page_link:"/p/2dd7cbd7-815c-4566-b82c-11811a5ff04e",slug:"/p/2dd7cbd7-815c-4566-b82c-11811a5ff04e"},s=void 0,u={},a=[{value:"for i, char in enumerate(&quot;ab&quot;, 1) =&gt; (1, &quot;a&quot;), (2, &quot;b&quot;)",id:"for-i-char-in-enumerateab-1--1-a-2-b",level:2},{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Constraints:",id:"constraints",level:2},{value:"Method",id:"method",level:2},{value:"Solution",id:"solution",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"for-i-char-in-enumerateab-1--1-a-2-b",children:'for i, char in enumerate("ab", 1) => (1, "a"), (2, "b")'}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,i.jsx)(n.p,{children:"Convert a non-negative integer num to its English words representation."}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Example 1:\nInput: num = 123\nOutput: "One Hundred Twenty Three"\n\nExample 2:\nInput: num = 12345\nOutput: "Twelve Thousand Three Hundred Forty Five"\n\nExample 3:\nInput: num = 1234567\nOutput: "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"\n\nExample 4:\nInput: num = 1234567891\nOutput: "One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),"\n",(0,i.jsx)(n.p,{children:"0 <= num <= 2^31 - 1"}),"\n",(0,i.jsx)(n.h2,{id:"method",children:"Method"}),"\n",(0,i.jsx)(n.p,{children:"Use recursion."}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def numberToWords(self, num):\n        if num == 0:\n            return 'Zero'\n            \n        ones = 'One Two Three Four Five Six Seven Eight Nine Ten ' \\\n            'Eleven Twelve Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen'.split()\n        tens = 'Twenty Thirty Forty Fifty Sixty Seventy Eighty Ninety'.split()\n        thousands = 'Thousand Million Billion'.split()\n        \n        def helper(num):\n            if num <= 19:\n                return [] if num == 0 else [ones[num - 1]]\n            if num <= 99:\n                return [tens[num//10 - 2]] + helper(num%10)\n            if num <= 999:\n                return [ones[num//100-1]] + [\"Hundred\"] + helper(num%100)\n            for i, unit in enumerate(thousands, 1):\n                if num < 1000 ** (i+1):\n                    return helper(num//1000**i) + [unit] + helper(num%1000**i)\n        \n        return \" \".join(helper(num))        \n"})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);