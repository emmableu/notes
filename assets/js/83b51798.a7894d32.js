"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1976],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(96540);const d={},s=t.createContext(d);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},78355:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Leetcode/Other/29.29 - Divide Two Integers - Medium","title":"29.29 - Divide Two Integers - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/29.29 - Divide Two Integers - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/e7ac80f7-9994-448a-8cf3-d97db9933163","permalink":"/notes/docs/p/e7ac80f7-9994-448a-8cf3-d97db9933163","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/29.29 - Divide Two Integers - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/e7ac80f7-9994-448a-8cf3-d97db9933163","slug":"/p/e7ac80f7-9994-448a-8cf3-d97db9933163"},"sidebar":"tutorialSidebar","previous":{"title":"283.283 - Move Zeroes - Easy","permalink":"/notes/docs/p/46fa6460-b449-4bd4-92e6-7addd7398ad1"},"next":{"title":"296.296 - Best Meeting Point - Hard","permalink":"/notes/docs/p/14b36a05-e5e9-4b3a-a4cd-4e0383d5b006"}}');var d=i(74848),s=i(28453);const r={created_at:"2025-10-23",page_link:"/p/e7ac80f7-9994-448a-8cf3-d97db9933163",slug:"/p/e7ac80f7-9994-448a-8cf3-d97db9933163"},o=void 0,l={},a=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"subproblem\u7684\u4e00\u4e9b\u6a21\u7248\uff1a",id:"subproblem\u7684\u4e00\u4e9b\u6a21\u7248",level:2},{value:"Solution\uff1a\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6c42\u4e0a\u754c\u6a21\u7248",id:"solution\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6c42\u4e0a\u754c\u6a21\u7248",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.p,{children:(0,d.jsx)(n.a,{href:"https://leetcode.com/problems/divide-two-integers/",children:"LC link"})}),"\n",(0,d.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,d.jsxs)(n.p,{children:["Given two integers ",(0,d.jsx)(n.code,{children:"dividend"})," and ",(0,d.jsx)(n.code,{children:"divisor"}),", divide two integers without using multiplication, division, and mod operator."]}),"\n",(0,d.jsx)(n.p,{children:"Return the quotient after dividing dividend by divisor."}),"\n",(0,d.jsx)(n.p,{children:"The integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2."}),"\n",(0,d.jsx)(n.p,{children:"Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, assume that your function returns 231 \u2212 1 when the division result overflows."}),"\n",(0,d.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"Example 1:\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = truncate(3.33333..) = 3.\n\nExample 2:\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = truncate(-2.33333..) = -2.\n\nExample 3:\nInput: dividend = 0, divisor = 1\nOutput: 0\n\nExample 4:\nInput: dividend = 1, divisor = 1\nOutput: 1\n"})}),"\n",(0,d.jsx)(n.h2,{id:"subproblem\u7684\u4e00\u4e9b\u6a21\u7248",children:"subproblem\u7684\u4e00\u4e9b\u6a21\u7248\uff1a"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/fb7263",children:"\u4e8c\u5206\u641c\u7d22\u6c42\u4e0a\u754c"})}),"\n",(0,d.jsx)(n.li,{children:"\u5feb\u901f\u4e58\u6cd5\u6a21\u7248\uff1a"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"def mult(self, x,n):\n    res = 0\n    while n:\n        if n & 1:\n            res += x\n        x += x\n        n >>= 1\n    return res\n"})}),"\n",(0,d.jsx)(n.h2,{id:"solution\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6c42\u4e0a\u754c\u6a21\u7248",children:"Solution\uff1a\u4f7f\u7528\u4e8c\u5206\u641c\u7d22\u6c42\u4e0a\u754c\u6a21\u7248"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        is_neg = False\n        for ele in [dividend, divisor]:\n            if ele < 0:\n                is_neg = not is_neg\n        # \u4e0b\u9762\u8fd9\u4e24\u884c\u4e0d\u8981\u5fd8\u4e86\n        dividend = -dividend if dividend < 0 else dividend\n        divisor = -divisor if divisor < 0 else divisor\n\n        l, r = -1, dividend + 1\n        while l + 1 < r:\n            mid = (l + r) >> 1\n            if self.mult(divisor, mid) <= dividend:\n                l = mid\n            else:\n                r = mid\n        res = r - 1\n        res = -res if is_neg else res\n        if res < - 2**31 or res > 2**31 -1:\n            return 2**31 -1\n        else:\n            return res\n\n    def mult(self, x,n):\n        res = 0\n        while n:\n            if n & 1:\n                res += x\n            x += x\n            n >>= 1\n        return res\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}}}]);