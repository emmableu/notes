"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8149],{28452:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>t,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Leetcode/Other/325.325 - Maximum Size Subarray Sum Equals k (Medium)","title":"325.325 - Maximum Size Subarray Sum Equals k (Medium)","description":"LC link","source":"@site/docs/Leetcode/99.Other/325.325 - Maximum Size Subarray Sum Equals k (Medium).md","sourceDirName":"Leetcode/99.Other","slug":"/p/88da79c5-3195-4a69-9c71-971fc66f0e5a","permalink":"/notes/docs/p/88da79c5-3195-4a69-9c71-971fc66f0e5a","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/325.325 - Maximum Size Subarray Sum Equals k (Medium).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/88da79c5-3195-4a69-9c71-971fc66f0e5a","slug":"/p/88da79c5-3195-4a69-9c71-971fc66f0e5a"},"sidebar":"tutorialSidebar","previous":{"title":"322.322 - Coin Change - Medium","permalink":"/notes/docs/p/42a61065-2619-41a9-8256-7751e1ff1461"},"next":{"title":"337.337 - House Robber III - Medium","permalink":"/notes/docs/p/4f8711c7-5d82-4518-9a24-a491ce4a1e7d"}}');var i=c(74848),r=c(28453);const t={created_at:"2025-10-23",page_link:"/p/88da79c5-3195-4a69-9c71-971fc66f0e5a",slug:"/p/88da79c5-3195-4a69-9c71-971fc66f0e5a"},a=void 0,d={},u=[{value:"Solution",id:"solution",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/",children:"LC link"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/325-0.png",alt:""})}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsxs)(n.p,{children:["\u9700\u8981\u7684\u53d8\u91cf (",(0,i.jsx)(n.code,{children:"nums = [1,2,3], k = 3"})," \u4e3a\u4f8b)\uff1a"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cur_sum"}),": \u52a0\u4e0a\u524d\u9762\u6240\u6709\u5143\u7d20\u548c\u5f53\u524d\u5143\u7d20\u7684\u548c\u3002\u5728\u8d70\u4f8b\u5b50\u91cc",(0,i.jsx)(n.code,{children:"nums"}),"\u7684iteration\u65f6\uff0c",(0,i.jsx)(n.code,{children:"cur_sum"}),"\u66f4\u65b0\u4e3a",(0,i.jsx)(n.code,{children:"1 3 6"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u95ee\u9898\u8f6c\u5316\u6210\uff0c\u5f53\u524d\u7684",(0,i.jsx)(n.code,{children:"cur_sum"}),"\u51cf\u53bb\u524d\u9762\u7684\u54ea\u4e2a",(0,i.jsx)(n.code,{children:"cur_sum"}),"\u80fd = ",(0,i.jsx)(n.code,{children:"k"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"prefix_map"}),": \u4e00\u4e2a",(0,i.jsx)(n.code,{children:"dict"}),"\uff0c key: prefix sum\uff0c value\uff1a\u5f53\u524dindex, \u521d\u59cb\u653e\u4e00\u4e2a",(0,i.jsx)(n.code,{children:"{0: -1}"}),"\u8fdb\u53bb\u3002 \u5bf9\u4e8e ",(0,i.jsx)(n.code,{children:"cur_sum"})," \u4e3a ",(0,i.jsx)(n.code,{children:"1 3 6"}),", ",(0,i.jsx)(n.code,{children:"prefix_map"}),"\u6700\u540e\u4e3a\uff1a",(0,i.jsx)(n.code,{children:"{0:-1, 1: 0, 3: 1, 6: 2}"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max_len"}),"\uff0c\u8bb0\u5f55\u548c\u4e3ak\u7684\u6700\u957f\u5b50\u5e8f\u5217\u7684\u957f\u5ea6: \u6700\u540e\u4e3a ",(0,i.jsx)(n.code,{children:"2"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maxSubArrayLen(self, nums: List[int], k: int) -> int:\n        max_len = 0\n        cur_sum = 0\n        prefix_map = {}\n        prefix_map[0] = -1\n        for idx, num in enumerate(nums):\n            cur_sum += num\n            if cur_sum - k in prefix_map:\n                max_len = max(max_len, idx - prefix_map[cur_sum - k])\n            # \u53ea\u6709\u5f53cur_sum\u4e0d\u5728prefix_map\u91cc\u9762\u7684\u65f6\u5019\u624d\u8981\u66f4\u65b0prefix_map,\u56e0\u4e3a\u5982\u679c\u6709\u7684\u8bdd\uff0c\n            # \u65e9\u4e00\u70b9\u7684idx\u6700\u540e\u4ea7\u751f\u7684\u4f1a\u957f\u5ea6\u66f4\u957f\u3002\n            if cur_sum not in prefix_map:\n                prefix_map[cur_sum] = idx\n        return max_len\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,c)=>{c.d(n,{R:()=>t,x:()=>a});var s=c(96540);const i={},r=s.createContext(i);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);