"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5251],{28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var d=o(96540);const r={},t=d.createContext(r);function i(e){const n=d.useContext(t);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),d.createElement(t.Provider,{value:n},e.children)}},80418:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"Leetcode/BFS/127.127 - Word Ladder - Hard","title":"127.127 - Word Ladder - Hard","description":"LC link","source":"@site/docs/Leetcode/01.BFS/127.127 - Word Ladder - Hard.md","sourceDirName":"Leetcode/01.BFS","slug":"/p/16b6dcd6-b2ee-4b46-af58-0406c9321b4d","permalink":"/notes/docs/p/16b6dcd6-b2ee-4b46-af58-0406c9321b4d","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/01.BFS/127.127 - Word Ladder - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/16b6dcd6-b2ee-4b46-af58-0406c9321b4d","slug":"/p/16b6dcd6-b2ee-4b46-af58-0406c9321b4d"},"sidebar":"tutorialSidebar","previous":{"title":"1263.1263 - Minimum Moves to Move a Box to Their Target Location - Hard","permalink":"/notes/docs/p/5d902972-c5d5-4c17-94c9-a6f7cca22616"},"next":{"title":"1284.1284 - Minimum Number of Flips to Convert Binary Matrix to Zero Matrix - Hard","permalink":"/notes/docs/p/ac591e43-ceff-49cc-b091-f865af1df4df"}}');var r=o(74848),t=o(28453);const i={created_at:"2025-10-23",page_link:"/p/16b6dcd6-b2ee-4b46-af58-0406c9321b4d",slug:"/p/16b6dcd6-b2ee-4b46-af58-0406c9321b4d"},s=void 0,c={},l=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution: \u53cc\u5411bfs",id:"solution-\u53cc\u5411bfs",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/word-ladder/",children:"LC link"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["A transformation sequence from word ",(0,r.jsx)(n.code,{children:"beginWord"})," to word ",(0,r.jsx)(n.code,{children:"endWord"})," using a dictionary ",(0,r.jsx)(n.code,{children:"wordList"})," is a sequence of words ",(0,r.jsx)(n.code,{children:"beginWord -> s1 -> s2 -> ... -> sk"})," such that:"]}),"\n",(0,r.jsxs)(n.p,{children:["Every adjacent pair of words differs by a single letter.\nEvery ",(0,r.jsx)(n.code,{children:"s_i"})," for ",(0,r.jsx)(n.code,{children:"1 <= i <= k"})," is in ",(0,r.jsx)(n.code,{children:"wordList"}),". Note that ",(0,r.jsx)(n.code,{children:"beginWord"})," does not need to be in ",(0,r.jsx)(n.code,{children:"wordList"}),".\n",(0,r.jsx)(n.code,{children:"sk == endWord"})]}),"\n",(0,r.jsxs)(n.p,{children:["Given two words, ",(0,r.jsx)(n.code,{children:"beginWord"})," and ",(0,r.jsx)(n.code,{children:"endWord"}),", and a dictionary ",(0,r.jsx)(n.code,{children:"wordList"}),", return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists."]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Example 1:\n\nInput: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]\nOutput: 5\nExplanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.\nExample 2:\n\nInput: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]\nOutput: 0\nExplanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.\n'})}),"\n",(0,r.jsx)(n.p,{children:"Constraints:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1 <= beginWord.length <= 10"}),"\n",(0,r.jsx)(n.li,{children:"endWord.length == beginWord.length"}),"\n",(0,r.jsx)(n.li,{children:"1 <= wordList.length <= 5000"}),"\n",(0,r.jsx)(n.li,{children:"wordList[i].length == beginWord.length"}),"\n",(0,r.jsx)(n.li,{children:"beginWord, endWord, and wordList[i] consist of lowercase English letters."}),"\n",(0,r.jsx)(n.li,{children:"beginWord != endWord"}),"\n",(0,r.jsx)(n.li,{children:"All the words in wordList are unique."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"solution-\u53cc\u5411bfs",children:"Solution: \u53cc\u5411bfs"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/8b354b/",children:"\u53cc\u5411bfs\u6a21\u7248"}),"\n\u8981\u4ece26\u4e2a\u5b57\u6bcd\u8d70word\uff0c\u800c\u4e0d\u662f\u4ecewordlist\u91cc\u9762\u4e00\u4e2a\u4e2a\u68c0\u67e5\u4e0b\u4e00\u4e2aword\u3002"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u539f\u56e0\u662f\u5047\u8bbewordlist\u662f\u5f88\u957f\u7684\uff0c\u68c0\u67e5wordlist\u662fO(n).\u4ece26\u4e2a\u5b57\u6bcd\u8d70word\u662fO(1)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def ladderLength(self, begin, end, word_list):\n        word_set = set(word_list)\n        q1 = {begin}\n        q2 = {end}\n        if end not in word_set:\n            return 0\n        vis = q1 | q2\n        step = 0\n        while q1 and q2:\n            if len(q1) > len(q2):\n                q1, q2 = q2, q1\n            temp = set()\n            step += 1\n            for cur in q1:\n                for new in self.generate_new(cur):\n                    if new == cur:\n                        continue\n                    if new not in word_set:\n                        continue\n                    if new in q2:\n                        # return step \u8981 + 1\uff0c\u56e0\u4e3a\u8ba1\u7b97\u7684\u4e0d\u662fpath\u7684\u957f\u5ea6\n                        # \u800c\u662fpath\u4e0aword\u6709\u51e0\u4e2a\uff08\u5e26\u9996\u4f4d\uff09\uff0c\n                        # \u6240\u4ee5\u662fpath\u7684\u957f\u5ea6\u518d+1\n                        return step + 1\n                    if new not in vis:\n                        temp.add(new)\n                        vis.add(new)\n            q1 = temp\n        return 0\n\n\n    def generate_new(self, word):\n        for i in range(len(word)):\n            for char in "abcdefghijklmnopqrstuvwxyz":\n                new = list(word)\n                new[i] = char\n                yield "".join(new)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);