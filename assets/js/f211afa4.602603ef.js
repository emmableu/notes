"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[895],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(96540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},70966:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/Other/01.01 - Two Sum - Easy","title":"01.01 - Two Sum - Easy","description":"Solution:","source":"@site/docs/Leetcode/99.Other/01.01 - Two Sum - Easy.md","sourceDirName":"Leetcode/99.Other","slug":"/p/061d52f8-fb35-413f-9f3f-14e8d5c1dca1","permalink":"/notes/docs/p/061d52f8-fb35-413f-9f3f-14e8d5c1dca1","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/01.01 - Two Sum - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/061d52f8-fb35-413f-9f3f-14e8d5c1dca1","slug":"/p/061d52f8-fb35-413f-9f3f-14e8d5c1dca1"},"sidebar":"tutorialSidebar","previous":{"title":"Web Crawler Multithreaded","permalink":"/notes/docs/p/c70b3d7a-37fe-4619-87ec-5c21a060ae8b"},"next":{"title":"05.05 - Longest Palindromic Substring (Medium)","permalink":"/notes/docs/p/5b87a20d-d0fa-45a2-8f9b-fd3d5034630b"}}');var s=t(74848),i=t(28453);const a={created_at:"2025-10-23",page_link:"/p/061d52f8-fb35-413f-9f3f-14e8d5c1dca1",slug:"/p/061d52f8-fb35-413f-9f3f-14e8d5c1dca1"},o=void 0,l={},c=[{value:"Solution:",id:"solution",level:2},{value:"\u53cc\u6307\u9488 \uff08fb\u8981\u6c42\uff09",id:"\u53cc\u6307\u9488-fb\u8981\u6c42",level:3},{value:"hashmap",id:"hashmap",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/1-0.png",alt:""})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution:"}),"\n",(0,s.jsx)(n.h3,{id:"\u53cc\u6307\u9488-fb\u8981\u6c42",children:"\u53cc\u6307\u9488 \uff08fb\u8981\u6c42\uff09"}),"\n",(0,s.jsx)(n.p,{children:"\u56e0\u4e3a\u672c\u9898\u8981output pair\uff0c\u6240\u4ee5\u7528arr\u6765store value \u548c\u5bf9\u5e94\u7684index"}),"\n",(0,s.jsx)(n.p,{children:"\u5347\u5e8fsort arr"}),"\n",(0,s.jsx)(n.p,{children:"\u7136\u540e\u7528 two pointer, left \u6307\u5411\u7b2c\u4e00\u4e2a, right \u6307\u5411\u6700\u540e\u4e00\u4e2a."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        arr = []\n        for i, x in enumerate(nums):\n            arr.append([x, i])\n        arr.sort()  # Sort arr in increasing order by their values.\n        \n        left, right = 0, len(arr) - 1\n        while left < right:\n            sum2 = arr[left][0] + arr[right][0]\n            if sum2 == target:\n                return [arr[left][1], arr[right][1]]\n            elif sum2 > target:\n                right -= 1  # Try to decrease sum2\n            else:\n                left += 1  # Try to increase sum2\n"})}),"\n",(0,s.jsx)(n.p,{children:"Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time: O(N * logN), where N <= 10^4 is number of elements in the array nums."}),"\n",(0,s.jsx)(n.li,{children:"Space: O(N)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hashmap",children:"hashmap"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        seen = {}\n        for i, b in enumerate(nums):\n            # a + b = target -> a = target - b\n            a = target - b\n            if a in seen:\n                return [seen[a], i]\n            seen[b] = i\n"})}),"\n",(0,s.jsx)(n.p,{children:"Complexity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time: O(N), where N <= 10^4 is number of elements in the array nums."}),"\n",(0,s.jsx)(n.li,{children:"Space: O(N)"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);