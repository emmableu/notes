"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2468],{28453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>d});var r=l(96540);const t={},c=r.createContext(t);function i(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(c.Provider,{value:n},e.children)}},77188:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Leetcode/DFS/428.428 - Serialize and Deserialize N-ary Tree - Hard","title":"428.428 - Serialize and Deserialize N-ary Tree - Hard","description":"tags: [String, Tree, Depth-First Search, Breadth-First Search]","source":"@site/docs/Leetcode/04.DFS/428.428 - Serialize and Deserialize N-ary Tree - Hard.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/5fb4c94a-dbcc-4cc2-8a67-9712528fecce","permalink":"/notes/docs/p/5fb4c94a-dbcc-4cc2-8a67-9712528fecce","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/428.428 - Serialize and Deserialize N-ary Tree - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/5fb4c94a-dbcc-4cc2-8a67-9712528fecce","slug":"/p/5fb4c94a-dbcc-4cc2-8a67-9712528fecce"},"sidebar":"tutorialSidebar","previous":{"title":"425.425 - Word Squares - Hard","permalink":"/notes/docs/p/f578589b-3465-4827-9da1-666fcec22135"},"next":{"title":"463.463 - Island Perimeter - Easy","permalink":"/notes/docs/p/0430cc4b-7df3-4cfd-a52f-3d5d06cfdbb5"}}');var t=l(74848),c=l(28453);const i={created_at:"2025-10-23",page_link:"/p/5fb4c94a-dbcc-4cc2-8a67-9712528fecce",slug:"/p/5fb4c94a-dbcc-4cc2-8a67-9712528fecce"},d=void 0,s={},a=[{value:"Solution:",id:"solution",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"tags: [String, Tree, Depth-First Search, Breadth-First Search]"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.cn/problems/serialize-and-deserialize-n-ary-tree/",children:"LC Link"})}),"\n",(0,t.jsx)(n.p,{children:"\u5e8f\u5217\u5316\u662f\u6307\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u8f6c\u5316\u4e3a\u4f4d\u5e8f\u5217\u7684\u8fc7\u7a0b\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u5176\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\u6216\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u76f8\u540c\u6216\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u73af\u5883\u4e2d\u6062\u590d\u7ed3\u6784\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u8bbe\u8ba1\u4e00\u4e2a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 N \u53c9\u6811\u7684\u7b97\u6cd5\u3002\u4e00\u4e2a N \u53c9\u6811\u662f\u6307\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e0d\u8d85\u8fc7 N \u4e2a\u5b69\u5b50\u8282\u70b9\u7684\u6709\u6839\u6811\u3002\u5e8f\u5217\u5316 / \u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u7684\u7b97\u6cd5\u5b9e\u73b0\u6ca1\u6709\u9650\u5236\u3002\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1 N \u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u8be5\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u53cd\u5e8f\u5217\u5316\u6210\u539f\u6811\u7ed3\u6784\u5373\u53ef\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u4f8b\u5982\uff0c\u4f60\u9700\u8981\u5e8f\u5217\u5316\u4e0b\u9762\u7684 3-\u53c9 \u6811\u3002"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208151418621.png",alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["\u4e3a ",(0,t.jsx)(n.code,{children:"[1 [3[5 6] 2 4]]"}),"\u3002\u4f60\u4e0d\u9700\u8981\u4ee5\u8fd9\u79cd\u5f62\u5f0f\u5b8c\u6210\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u521b\u9020\u548c\u5b9e\u73b0\u4e0d\u540c\u7684\u65b9\u6cd5\u3002"]}),"\n",(0,t.jsx)(n.p,{children:"\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u9075\u5faa LeetCode \u7684\u5c42\u5e8f\u904d\u5386\u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u5176\u4e2d\u6bcf\u7ec4\u5b69\u5b50\u8282\u70b9\u7531\u7a7a\u503c\u5206\u9694\u3002"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208151418119.png",alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a ",(0,t.jsx)(n.code,{children:"[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]"})]}),"\n",(0,t.jsx)(n.p,{children:"\u4f60\u4e0d\u4e00\u5b9a\u8981\u9075\u5faa\u4ee5\u4e0a\u5efa\u8bae\u7684\u683c\u5f0f\uff0c\u6709\u5f88\u591a\u4e0d\u540c\u7684\u683c\u5f0f\uff0c\u6240\u4ee5\u8bf7\u53d1\u6325\u521b\u9020\u529b\uff0c\u60f3\u51fa\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u672c\u9898\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u793a\u4f8b 1:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u8f93\u5165: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n\u8f93\u51fa: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u793a\u4f8b 2:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u8f93\u5165: root = [1,null,3,2,4,null,5,6]\n\u8f93\u51fa: [1,null,3,2,4,null,5,6]\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u793a\u4f8b 3:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u8f93\u5165: root = []\n\u8f93\u51fa: []\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u63d0\u793a\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u7684\u8303\u56f4\u662f [0, 104]."}),"\n",(0,t.jsx)(n.li,{children:"0 <= Node.val <= 10^4"}),"\n",(0,t.jsx)(n.li,{children:"N \u53c9\u6811\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u7b49\u4e8e 1000"}),"\n",(0,t.jsx)(n.li,{children:"\u4e0d\u8981\u4f7f\u7528\u7c7b\u6210\u5458 / \u5168\u5c40\u53d8\u91cf / \u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\u3002\u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u662f\u65e0\u72b6\u6001\u7684\u3002"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"solution",children:"Solution:"}),"\n",(0,t.jsx)(n.p,{children:"Idea: preorder recursive traversal; add number of children after root val, in order to know when to terminate."}),"\n",(0,t.jsx)(n.p,{children:"\u7528deque\uff0cserialize\u7684\u65f6\u5019\u4ece\u540e\u9762\u52a0\u5165\uff0cdeserialize\u7684\u65f6\u5019\u4ece\u524d\u9762\u62ff\u51fa\u6765\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'\t   1\n\t2  3 4\n  5  6\n\n"1,3,2,2,5,0,6,0,3,0,4,0,"\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u6ce8\u610f\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'>>> a = "1,2,"\n>>> a.split(",")\n["1", "2", ""]  # \u6700\u540e\u8fd8\u4f1a\u6709\u4e00\u4e2a\u7a7a\u5b57\u7b26\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:">>> a = [] * 3\n>>> a\n[] # a\u4e0d\u4f1a\u53d8\u6210\u4e09\u4e2anone\n\n>>> a = [None] * 3\n>>> a\n[None, None, None]  # \u8fd9\u6837\u624d\u4f1a\u53d8\u6210\u4e09\u4e2anone\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'"""\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=[]):\n        self.val = val\n        self.children = children\n"""\n\nfrom collections import deque\nclass Codec:\n    def serialize(self, root: \'Node\') -> str:\n        """Encodes a tree to a single string.\n\n        :type root: Node\n        :rtype: str\n        """\n        if not root:\n            return "X"\n        return self._dfs_serialize(root)\n\n    def _dfs_serialize(self, node):\n        res = [node.val, len(node.children)]\n        for child in node.children:\n            res.append(self._dfs_serialize(child))\n        return ",".join([str(ele) for ele in res])\n\n    def deserialize(self, data: str) -> \'Node\':\n        """Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: Node\n        """\n        if data == "X": return None\n        data = deque([int(ele) for ele in data.split(",")])\n        root = self._build_tree(data)\n        return root\n\n    def _build_tree(self, data):\n        val, size = data.popleft(), data.popleft()\n        node = Node(val, [None] * size)\n        for i in range(size):\n            node.children[i] = self._build_tree(data)\n        return node\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))\n'})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);