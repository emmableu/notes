"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5404],{16383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>d,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"Leetcode/Other/88.88 - Merge Sorted Array (Easy)","title":"88.88 - Merge Sorted Array (Easy)","description":"Description","source":"@site/docs/Leetcode/99.Other/88.88 - Merge Sorted Array (Easy).md","sourceDirName":"Leetcode/99.Other","slug":"/p/547ed63d-2aaf-4b91-8d42-89dfe54603bd","permalink":"/notes/docs/p/547ed63d-2aaf-4b91-8d42-89dfe54603bd","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/88.88 - Merge Sorted Array (Easy).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/547ed63d-2aaf-4b91-8d42-89dfe54603bd","slug":"/p/547ed63d-2aaf-4b91-8d42-89dfe54603bd"},"sidebar":"tutorialSidebar","previous":{"title":"865.865 - Smallest Subtree with all the Deepest Nodes (Medium)","permalink":"/notes/docs/p/9222d953-e664-4317-9548-5e29403e9894"},"next":{"title":"896.896 - Monotonic Array (Easy)","permalink":"/notes/docs/p/6dfe3717-daa1-4ee2-b7e6-75538dabe385"}}');var r=t(74848),a=t(28453);const d={created_at:"2025-10-23",page_link:"/p/547ed63d-2aaf-4b91-8d42-89dfe54603bd",slug:"/p/547ed63d-2aaf-4b91-8d42-89dfe54603bd"},o=void 0,i={},m=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"solution",id:"solution",level:2}];function u(e){const n={br:"br",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively."}),"\n",(0,r.jsx)(n.p,{children:"Merge nums1 and nums2 into a single array sorted in non-decreasing order."}),"\n",(0,r.jsx)(n.p,{children:"The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Example 1:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n\nExample 2:\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n\nExample 3:\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"solution"}),"\n",(0,r.jsxs)(n.p,{children:["\u4ece m-1\uff0c n-1 \u5f00\u59cb\u5f80\u524d\u8d70\uff0c\u628a\u5927\u7684\u6570\u5b57\u653e\u5230\u5230\u540e\u9762\u5e76\u4e14pointer - 1",(0,r.jsx)(n.br,{}),"\n\u6700\u540e\u5982\u679c\u8fd8\u6709 m\uff0c\u90a3\u65e0\u6240\u8c13\uff0c\u5df2\u7ecfsort \u597d\u4e86",(0,r.jsx)(n.br,{}),"\n\u6700\u540e\u5982\u679c\u8fd8\u6709 n\uff0c \u90a3\u76f4\u63a5 ",(0,r.jsx)(n.code,{children:"nums1[:n] = nums2[:n]"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def merge(self, nums1, m, nums2, n):\n        while m > 0 and n > 0:\n            if nums1[m-1] >= nums2[n-1]:\n                nums1[m+n-1] = nums1[m-1]\n                m -= 1\n            else:\n                nums1[m+n-1] = nums2[n-1]\n                n -= 1\n        if n > 0:\n            nums1[:n] = nums2[:n]\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var s=t(96540);const r={},a=s.createContext(r);function d(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);