"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5821],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const c={},i=s.createContext(c);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},29791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Leetcode/Other/444.444 - Sequence Reconstruction - Medium","title":"444.444 - Sequence Reconstruction - Medium","description":"api:","source":"@site/docs/Leetcode/99.Other/444.444 - Sequence Reconstruction - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/e43ee8c3-697c-4143-b6f4-3325718f4734","permalink":"/notes/docs/p/e43ee8c3-697c-4143-b6f4-3325718f4734","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/444.444 - Sequence Reconstruction - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/e43ee8c3-697c-4143-b6f4-3325718f4734","slug":"/p/e43ee8c3-697c-4143-b6f4-3325718f4734"},"sidebar":"tutorialSidebar","previous":{"title":"443.443 - String Compression (Medium)","permalink":"/notes/docs/p/e9611667-1691-4cc0-a35d-2230d33fedfd"},"next":{"title":"46.46 - Permutations - Medium","permalink":"/notes/docs/p/cf2d2cde-b4a3-4a7e-a183-9c77f113da17"}}');var c=n(74848),i=n(28453);const r={created_at:"2025-10-23",page_link:"/p/e43ee8c3-697c-4143-b6f4-3325718f4734",slug:"/p/e43ee8c3-697c-4143-b6f4-3325718f4734"},o=void 0,a={},u=[];function d(e){const t={code:"code",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208161950574.png",alt:""}),(0,c.jsx)(t.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208161951230.png",alt:""}),"\napi:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-python",children:'>>> a = [0,1]\n>>> a[2]\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.8/site-packages/IPython/core/interactiveshell.py", line 3343, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File "<ipython-input-7-fc907be37984>", line 1, in <module>\n    a[2]\nIndexError: list index out of range\n>>> a[2:]\n[]\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-python",children:"from collections import defaultdict, deque\nclass Solution:\n\tdef sequenceReconstruction(self, nums: List[int], sequences: List[List[int]]) -> bool:\n\t\tgraph = defaultdict(list)\n\t\tnum_set = set()\n\t\tindegree = defaultdict(int)\n\t\tq = deque()\n\t\tfor seq in sequences:\n\t\t\tnum_set |= set(seq)\n\t\t\tfor num1, num2 in zip(seq, seq[1:]):\n\t\t\t\tgraph[num1].append(num2)\n\t\t\t\tindegree[num2] += 1\n\t\tfor num in num_set:\n\t\t\tif indegree[num] == 0:\n\t\t\t\tq.append(num)\n\t\tres = []\n\t\twhile q:\n\t\t\tif len(q) > 1:\n\t\t\t\treturn False\n\t\t\tnum = q.popleft()\n\t\t\tres.append(num)\n\t\t\tfor child in graph[num]:\n\t\t\t\tindegree[child] -= 1\n\t\t\t\tif indegree[child] == 0:\n\t\t\t\t\tq.append(child)\n\t\treturn res == nums\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);