"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[313],{27715:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>t,contentTitle:()=>c,default:()=>o,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Leetcode/DFS/DFS - Grid DFS - \u5c9b\u5c7f\u95ee\u9898 - \u7f51\u683cdfs - grid dfs","title":"DFS - Grid DFS - \u5c9b\u5c7f\u95ee\u9898 - \u7f51\u683cdfs - grid dfs","description":"\u76f8\u5173\u9898","source":"@site/docs/Leetcode/04.DFS/07. DFS - Grid DFS - \u5c9b\u5c7f\u95ee\u9898 - \u7f51\u683cdfs - grid dfs.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/b5997b8e-6dff-4459-877c-9c7632192729","permalink":"/notes/docs/p/b5997b8e-6dff-4459-877c-9c7632192729","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/07. DFS - Grid DFS - \u5c9b\u5c7f\u95ee\u9898 - \u7f51\u683cdfs - grid dfs.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"created_at":"2025-10-23","page_link":"/p/b5997b8e-6dff-4459-877c-9c7632192729","slug":"/p/b5997b8e-6dff-4459-877c-9c7632192729"},"sidebar":"tutorialSidebar","previous":{"title":"DFS - Graph DFS \u6a21\u7248","permalink":"/notes/docs/p/970d768e-4d52-4054-a130-3e46dcf37188"},"next":{"title":"\u62d3\u6251\u6392\u5e8f - Topological Sort - \u6a21\u7248","permalink":"/notes/docs/p/1c78ac66-12e8-4116-a521-01964d7e4e4f"}}');var s=r(74848),d=r(28453);const a={created_at:"2025-10-23",page_link:"/p/b5997b8e-6dff-4459-877c-9c7632192729",slug:"/p/b5997b8e-6dff-4459-877c-9c7632192729"},c=void 0,t={},l=[{value:"\u76f8\u5173\u9898",id:"\u76f8\u5173\u9898",level:2},{value:"\u5c9b\u5c7f\u95ee\u9898 - \u57fa\u672cdfs\u6a21\u7248:",id:"\u5c9b\u5c7f\u95ee\u9898---\u57fa\u672cdfs\u6a21\u7248",level:2},{value:"\u5e26\u6709memo\u7684\u7f51\u683cdfs\uff1a",id:"\u5e26\u6709memo\u7684\u7f51\u683cdfs",level:2}];function f(n){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"\u76f8\u5173\u9898",children:"\u76f8\u5173\u9898"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/pages/77d28f/#description",children:"number of islands"})}),"\n",(0,s.jsx)(e.li,{children:"Number of Lakes inside an island"}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/pages/dd6a57/",children:"number of distinct islands"})}),"\n",(0,s.jsxs)(e.li,{children:["*",(0,s.jsx)(e.a,{href:"/pages/9a6733/",children:"max area of islands"})]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/pages/3ef2f1/",children:"island perimeter"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/pages/8b95a1",children:"making a large island"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/pages/d83877/#solution-dfs-memoization",children:"Longest increasing path in a matrix"})," (\u5e26\u6709memo\u7684\u7f51\u683cDFS)"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/pages/c5eb3c/",children:"176 - 130 - Surrounded Regions - Medium"})}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u5c9b\u5c7f\u95ee\u9898---\u57fa\u672cdfs\u6a21\u7248",children:"\u5c9b\u5c7f\u95ee\u9898 - \u57fa\u672cdfs\u6a21\u7248:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'class Solution:\n    def func(self, grid: List[List[str]]) -> int:\n        # \u9898\u76ee\u8981\u6c42\u7684function\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == "1":\n                    # \u9898\u76ee\u8981\u6c42\u7684\u4e1c\u897f\n                    self.dfs(grid, r, c)\n        return #\u9898\u76ee\u8981\u6c42\u7684function\n        \n    def dfs(self, grid, r, c):\n        # base case\uff1a\u5982\u679c\u5750\u6807\u8d85\u51fa\u7f51\u683c\uff0c\u76f4\u63a5\u8fd4\u56de\n        if not self.in_area(grid, r, c):\n            return\n        # \u5224\u65ad\u662f\u5426\u7b26\u5408\u641c\u7d22\u7684\u6761\u4ef6\n        if grid[r][c] != "1":\n            return \n        grid[r][c] = "2" #\u6807\u8bb0\u4ee5\u9632\u6b62\u91cd\u590dvisit\n        self.dfs(grid, r-1, c)\n        self.dfs(grid, r+1, c)\n        self.dfs(grid, r, c-1)\n        self.dfs(grid, r, c+1)\n        \n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"max area of island solution:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        max_area = 0\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 1:\n                    max_area = max(max_area, self.dfs(grid, r, c))\n        return max_area\n        \n        \n    def dfs(self, grid, r, c):\n        if not self.in_area(grid, r, c):\n            return 0\n        if grid[r][c] != 1:\n            return 0\n        grid[r][c] = 2\n        lt = self.dfs(grid, r-1, c)\n        rt = self.dfs(grid, r+1, c)\n        up = self.dfs(grid, r, c-1)\n        lo = self.dfs(grid, r, c+1)\n        return 1 + lt + rt + up + lo\n\n\n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u5e26\u6709memo\u7684\u7f51\u683cdfs",children:"\u5e26\u6709memo\u7684\u7f51\u683cdfs\uff1a"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://emmableu.github.io/blog/pages/d83877/#solution-dfs-memoization",children:"Longest increasing path in a matrix"})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'class Solution:\n    def func(self, grid: List[List[str]]) -> int:\n        # \u9898\u76ee\u8981\u6c42\u7684function\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == "1":\n                    # \u9898\u76ee\u8981\u6c42\u7684\u4e1c\u897f\n                    self.dfs(grid, r, c, memo)\n        return #\u9898\u76ee\u8981\u6c42\u7684function\n        \n    def dfs(self, grid, r, c, memo):\n        # base case\uff1a\u5982\u679c\u5750\u6807\u8d85\u51fa\u7f51\u683c\uff0c\u76f4\u63a5\u8fd4\u56de\n        if not self.in_area(grid, r, c):\n            return\n        # \u5224\u65ad\u662f\u5426\u7b26\u5408\u641c\u7d22\u7684\u6761\u4ef6\n        if grid[r][c] != "1":\n            return \n        grid[r][c] = "2" #\u6807\u8bb0\u4ee5\u9632\u6b62\u91cd\u590dvisit\n        self.dfs(grid, r-1, c)\n        self.dfs(grid, r+1, c)\n        self.dfs(grid, r, c-1)\n        self.dfs(grid, r, c+1)\n        \n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n'})})]})}function o(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(f,{...n})}):f(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>c});var i=r(96540);const s={},d=i.createContext(s);function a(n){const e=i.useContext(d);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(d.Provider,{value:e},n.children)}}}]);