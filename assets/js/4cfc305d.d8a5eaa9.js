"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8371],{17592:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Leetcode/Other/211.211 - Design Add and Search Words Data Structure - Medium","title":"211.211 - Design Add and Search Words Data Structure - Medium","description":"Description:","source":"@site/docs/Leetcode/99.Other/211.211 - Design Add and Search Words Data Structure - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/452ae260-fb0c-4eb3-bd62-4db8e7bb3a1d","permalink":"/notes/docs/p/452ae260-fb0c-4eb3-bd62-4db8e7bb3a1d","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/211.211 - Design Add and Search Words Data Structure - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/452ae260-fb0c-4eb3-bd62-4db8e7bb3a1d","slug":"/p/452ae260-fb0c-4eb3-bd62-4db8e7bb3a1d"},"sidebar":"tutorialSidebar","previous":{"title":"210.210 - Course Schedule II - Print Results","permalink":"/notes/docs/p/72362531-077c-4234-a0d0-40f56340f9b4"},"next":{"title":"2115.2115 - Find All Possible Recipes from Given Supplies - Medium","permalink":"/notes/docs/p/9a316457-bd73-45c4-82f4-97fdedee6a62"}}');var t=d(74848),o=d(28453);const i={created_at:"2025-10-23",page_link:"/p/452ae260-fb0c-4eb3-bd62-4db8e7bb3a1d",slug:"/p/452ae260-fb0c-4eb3-bd62-4db8e7bb3a1d"},a=void 0,s={},c=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,t.jsx)(n.p,{children:"Design a data structure that supports adding new words and finding if a string matches any previously added string."}),"\n",(0,t.jsx)(n.p,{children:"Implement the WordDictionary class:"}),"\n",(0,t.jsx)(n.p,{children:"WordDictionary() Initializes the object.\nvoid addWord(word) Adds word to the data structure, it can be matched later.\nbool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter."}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input\n["WordDictionary","addWord","addWord","addWord","search","search","search","search"]\n[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord("bad");\nwordDictionary.addWord("dad");\nwordDictionary.addWord("mad");\nwordDictionary.search("pad"); // return False\nwordDictionary.search("bad"); // return True\nwordDictionary.search(".ad"); // return True\nwordDictionary.search("b.."); // return True\n'})}),"\n",(0,t.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Node:\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\n    \nclass WordDictionary:\n    def __init__(self):\n        self.root = Node()\n    \n    def addWord(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:  #\u8fd9\u4e2a\u7b2c\u4e00\u6b21\u5199\u5fd8\u4e86\n                node.children[char] = Node()\n            node = node.children[char]\n        node.is_word = True\n    \n    def search(self, word):\n        return self.dfs(word, self.root, 0)\n    \n    def dfs(self, word, node, idx):\n        if idx == len(word):\n            return node.is_word\n        if word[idx] == ".":\n            for child, item in node.children.items():\n                is_word = self.dfs(word, item, idx + 1)\n                #\u4e0d\u80fd\u76f4\u63a5return\uff0c \u8981\u4e0b\u9762\u7684\u6761\u4ef6\u5224\u65ad\uff0c\u8fd9\u4e2a\u7b2c\u4e00\u6b21\u5199\u4e5f\u5fd8\u4e86\n                if is_word:  \n                    return True\n            return False\n        elif word[idx] in node.children:\n            node = node.children[word[idx]]\n            return self.dfs(word, node, idx + 1)\n        else:\n            return False    \n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,d)=>{d.d(n,{R:()=>i,x:()=>a});var r=d(96540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);