"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3815],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},82322:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Leetcode/DFS/301.301 - Remove Invalid Parentheses (Hard)","title":"301.301 - Remove Invalid Parentheses (Hard)","description":"LC link","source":"@site/docs/Leetcode/04.DFS/301.301 - Remove Invalid Parentheses (Hard).md","sourceDirName":"Leetcode/04.DFS","slug":"/p/91f4002a-263c-4657-960b-76cab4c89198","permalink":"/notes/docs/p/91f4002a-263c-4657-960b-76cab4c89198","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/301.301 - Remove Invalid Parentheses (Hard).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/91f4002a-263c-4657-960b-76cab4c89198","slug":"/p/91f4002a-263c-4657-960b-76cab4c89198"},"sidebar":"tutorialSidebar","previous":{"title":"297.297 - Serialize and Deserialize Binary Tree - Hard","permalink":"/notes/docs/p/d7066f50-63ea-4bdd-aa42-dabbe3e87f3c"},"next":{"title":"329.329 - Longest Increasing Path in a Matrix - Hard","permalink":"/notes/docs/p/ad846348-acdb-4bb8-a36d-11819c06bb2f"}}');var r=t(74848),i=t(28453);const l={created_at:"2025-10-23",page_link:"/p/91f4002a-263c-4657-960b-76cab4c89198",slug:"/p/91f4002a-263c-4657-960b-76cab4c89198"},o=void 0,c={},a=[{value:"Description:",id:"description",level:2},{value:"Examples:",id:"examples",level:2},{value:"Solution",id:"solution",level:2},{value:"BFS",id:"bfs",level:3},{value:"DFS",id:"dfs",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/remove-invalid-parentheses/submissions/",children:"LC link"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,r.jsx)(n.p,{children:"Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid."}),"\n",(0,r.jsx)(n.p,{children:"Return all the possible results. You may return the answer in any order."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Example 1:\n\nInput: s = "()())()"\nOutput: ["(())()","()()()"]\n\nExample 2:\n\nInput: s = "(a)())()"\nOutput: ["(a())()","(a)()()"]\n\nExample 3:\n\nInput: s = ")("\nOutput: [""]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(n.h3,{id:"bfs",children:"BFS"}),"\n",(0,r.jsxs)(n.p,{children:["\u533a\u5206\u4e8e\u6a21\u7248\u65b9\u6cd5\u7684\u5730\u65b9\u5728\u4e8e\u8fd9\u91cclevel\u9700\u8981\u662fset\uff0c\u5426\u5219\u4f1a\u51fa\u73b0duplicate\u7684\u95ee\u9898\u3002\n",(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/301-0.png",alt:""})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def removeInvalidParentheses(self, s):\n        level = set([s]) # \u7528set\u907f\u514d\u91cd\u590d\n        while True:\n            valid = list(filter(self.is_valid, level)) # \u6240\u6709\u5408\u6cd5\u5b57\u7b26\u90fd\u7b5b\u9009\u51fa\u6765\n            if valid:  # \u5982\u679c\u5f53\u524dvalid\u662f\u975e\u7a7a\u7684\uff0c\u8bf4\u660e\u5df2\u7ecf\u6709\u5408\u6cd5\u7684\u4ea7\u751f\u4e86\n                return valid\n            # \u4e0b\u4e00\u5c42level\n            temp = set()\n            for cur in level:\n                for i, char in enumerate(cur):\n                    if char in "()": #\u5982\u679cchar\u662f\u62ec\u53f7\uff0c\u5c31\u53bb\u6389\u5b83\uff0c\u4e0d\u662f\u62ec\u53f7\u5c31\u7559\u7740\n                        temp.add(cur[:i] + cur[i+1:])\n            level = temp\n        \n    def is_valid(self, s):\n        cnt = 0\n        for ele in s:\n            if ele == "(":\n                cnt += 1\n            elif ele == ")":\n                cnt -= 1\n            # \u53ea\u8981\u4e2d\u9014cnt\u51fa\u73b0\u4e86\u8d1f\u503c\uff0c\u5c31\u53ef\u4ee5\u7ec8\u6b62\u5faa\u73af\uff0c\u56e0\u4e3a)\u592a\u591a\u4e86\n            if cnt < 0:\n                return False\n        return cnt == 0         \n'})}),"\n",(0,r.jsx)(n.h3,{id:"dfs",children:"DFS"}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u5f53\u524d\u904d\u5386\u5230\u7684\u5de6\u62ec\u53f7\u7684\u6570\u76ee\u4e25\u683c\u5c0f\u4e8e\u53f3\u62ec\u53f7\u7684\u6570\u76ee\u5219\u8868\u8fbe\u5f0f\u65e0\u6548\uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        left_remove, right_remove = self.count_remove(s)\n        res_set = set()\n        self.dfs(s, res_set, 0, "", 0, 0, left_remove, right_remove)\n        return list(res_set)\n        \n    def count_remove(self, s):\n        left_remove, right_remove, cnt = 0, 0, 0\n        for char in s:\n            if char == "(":\n                cnt += 1\n            if char == ")":\n                cnt -= 1\n            if cnt == -1:\n                right_remove += 1\n                cnt = 0\n        left_remove = cnt\n        return left_remove, right_remove\n        \n        \n    def dfs(self, s, res_set, idx, cur_s, left_count, right_count, left_remove, right_remove):\n        if right_count > left_count:\n            return\n  \n        if idx == len(s):\n            if left_remove == right_remove == 0:\n                res_set.add(cur_s)\n            return\n        \n        if s[idx] == "(":\n            if left_remove > 0:\n                self.dfs(s, res_set, idx + 1, cur_s, left_count, right_count, left_remove - 1, right_remove)\n            self.dfs(s, res_set, idx + 1, cur_s + "(", left_count + 1, right_count, left_remove, right_remove)\n            \n        elif s[idx] == ")":\n            if right_remove > 0:\n                self.dfs(s, res_set, idx + 1, cur_s, left_count, right_count, left_remove, right_remove - 1)\n            self.dfs(s, res_set, idx + 1, cur_s + ")", left_count, right_count + 1, left_remove, right_remove)\n        \n        else:            \n            self.dfs(s, res_set, idx + 1, cur_s + s[idx], left_count, right_count, left_remove, right_remove)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);