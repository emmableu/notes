"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6859],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(96540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},33054:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Leetcode/Other/266.266 - Palindrome Permutation (Easy)","title":"266.266 - Palindrome Permutation (Easy)","description":"Description:","source":"@site/docs/Leetcode/99.Other/266.266 - Palindrome Permutation (Easy).md","sourceDirName":"Leetcode/99.Other","slug":"/p/73136527-7095-4964-98b7-34b9b139e64c","permalink":"/notes/docs/p/73136527-7095-4964-98b7-34b9b139e64c","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/266.266 - Palindrome Permutation (Easy).md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/73136527-7095-4964-98b7-34b9b139e64c","slug":"/p/73136527-7095-4964-98b7-34b9b139e64c"},"sidebar":"tutorialSidebar","previous":{"title":"249.249 - Group Shifted Strings - Medium","permalink":"/notes/docs/p/66bdee06-f7c8-4b55-ae8f-1ce0f89b199d"},"next":{"title":"267.267 - Palindrome Permutation II - Medium","permalink":"/notes/docs/p/bce08b51-07cc-4080-96bf-b96063e8f2d2"}}');var r=t(74848),o=t(28453);const i={created_at:"2025-10-23",page_link:"/p/73136527-7095-4964-98b7-34b9b139e64c",slug:"/p/73136527-7095-4964-98b7-34b9b139e64c"},l=void 0,c={},a=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Constraints:",id:"constraints",level:2},{value:"My solution",id:"my-solution",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,r.jsx)(n.p,{children:"Given a string s, return true if a permutation of the string could form a palindrome."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Example 1:\n\nInput: s = "code"\nOutput: false\nExample 2:\n\nInput: s = "aab"\nOutput: true\nExample 3:\n\nInput: s = "carerac"\nOutput: true\n'})}),"\n",(0,r.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1 <= s.length <= 5000"}),"\n",(0,r.jsx)(n.li,{children:"s consists of only lowercase English letters."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"my-solution",children:"My solution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def canPermutePalindrome(self, s: str) -> bool:\n        st = set()\n        for ele in s:\n            if ele in st:\n                st.remove(ele)\n            else:\n                st.add(ele)\n        return len(st)<=1\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);