"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2260],{2100:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>t,default:()=>f,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Leetcode/DFS/827.827 - Making A Large Island - Hard","title":"827.827 - Making A Large Island - Hard","description":"Description:","source":"@site/docs/Leetcode/04.DFS/827.827 - Making A Large Island - Hard.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/da1058f5-1a24-4b75-80b0-41016eac2687","permalink":"/notes/docs/p/da1058f5-1a24-4b75-80b0-41016eac2687","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/827.827 - Making A Large Island - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/da1058f5-1a24-4b75-80b0-41016eac2687","slug":"/p/da1058f5-1a24-4b75-80b0-41016eac2687"},"sidebar":"tutorialSidebar","previous":{"title":"785.785 - Is Graph Bipartite - Medium","permalink":"/notes/docs/p/6ba7a021-cf7f-45cd-a294-12ef706857d8"},"next":{"title":"863.863 - All Nodes Distance K in Binary Tree (Medium)","permalink":"/notes/docs/p/0682c370-65b8-4155-a0a4-001439c53835"}}');var i=r(74848),d=r(28453);const s={created_at:"2025-10-23",page_link:"/p/da1058f5-1a24-4b75-80b0-41016eac2687",slug:"/p/da1058f5-1a24-4b75-80b0-41016eac2687"},t=void 0,l={},c=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248:",id:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248",level:2},{value:"Solution\uff1aDFS",id:"solutiondfs",level:2}];function o(n){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"description",children:"Description:"}),"\n",(0,i.jsx)(e.p,{children:"You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1."}),"\n",(0,i.jsx)(e.p,{children:"Return the size of the largest island in grid after applying this operation."}),"\n",(0,i.jsx)(e.p,{children:"An island is a 4-directionally connected group of 1s."}),"\n",(0,i.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Example 1:\nInput: grid = [[1,0],[0,1]]\nOutput: 3\nExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\n\nExample 2:\nInput: grid = [[1,1],[1,0]]\nOutput: 4\nExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.\n\nExample 3:\nInput: grid = [[1,1],[1,1]]\nOutput: 4\nExplanation: Can't change any 0 to 1, only one island with area = 4.\n\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248",children:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248:"}),"\n",(0,i.jsxs)(e.p,{children:["\u53c2\u8003\uff08",(0,i.jsx)(e.a,{href:"https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/%EF%BC%89",children:"https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/\uff09"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class Solution:\n    def func(self, grid: List[List[str]]) -> int:\n        # \u9898\u76ee\u8981\u6c42\u7684function\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == "1":\n                    # \u9898\u76ee\u8981\u6c42\u7684\u4e1c\u897f\n                    self.dfs(grid, r, c)\n        return #\u9898\u76ee\u8981\u6c42\u7684function\n        \n    def dfs(self, grid, r, c):\n        # base case\uff1a\u5982\u679c\u5750\u6807\u8d85\u51fa\u7f51\u683c\uff0c\u76f4\u63a5\u8fd4\u56de\n        if not self.in_area(grid, r, c):\n            return\n        if grid[r][c] != "1":\n            return \n        grid[r][c] = "2" #\u6807\u8bb0\u4ee5\u9632\u6b62\u91cd\u590dvisit\n        self.dfs(grid, r-1, c)\n        self.dfs(grid, r+1, c)\n        self.dfs(grid, r, c-1)\n        self.dfs(grid, r, c+1)\n        \n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n'})}),"\n",(0,i.jsx)(e.h2,{id:"solutiondfs",children:"Solution\uff1aDFS"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u9996\u5148\u8bb0\u5f55island\u7684index\u548c\u5bf9\u5e94\u7684area\u5230\u4e00\u4e2amap\u91cc\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u672a\u8fde\u63a5\u524d\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u4e5f\u8981\u8bb0\u5f55\uff0c\u56e0\u4e3a\u8fde\u63a5\u540e\u53ef\u80fd\u6bd4\u4e0d\u4e0a\u8d77\u521d\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\uff0c\u6bd4\u5982",(0,i.jsx)(e.code,{children:"[[1,1][1,1]]"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\u7136\u540e\u5bf9\u4e8e\u6bcf\u5757\u6d77\u6d0b\u8ba1\u7b97\u8fde\u63a5\u540e\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u3002\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u65b9\u6cd5\uff1a\u7528\u4e00\u4e2a ",(0,i.jsx)(e.code,{children:"idx_set"})," \u8bb0\u5f55\u8fd9\u4e2a\u6d77\u6d0b\u56db\u5468\u6709\u51e0\u5757distinct\u7684\u9646\u5730"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def largestIsland(self, grid):\n        # record island index and areas.\n        area_map = {}\n        mark = 2\n        max_island_area = 0\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 1:\n                    area = self.dfs(grid, mark, r, c) \n                    area_map[mark] = area\n                    max_island_area = max(area, max_island_area)\n                    mark += 1\n        print(grid)\n        # \u5bf9\u6bcf\u4e2a\u6d77\u6d0bgrid\uff0c\u8ba1\u7b97\u5b83\u7684\u5bf9\u5e94max_area\n        # \u6ce8\u610f\uff0c\u4e3a\u4e86\u9632\u6b62[[1,1],[1,1]]\u8fd9\u6837\u7684\u60c5\u51b5\uff0cmax_area\u5e94\u8be5initialize\u6210\n        # max(\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\uff0c1)\n        max_area = max(max_island_area, 1)\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 0:\n                    idx_set = set()\n                    for i, j in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n                        if self.in_area(grid, i, j) and grid[i][j] > 1:\n                            idx_set.add(grid[i][j])\n                    cur_area = 1\n                    for idx in idx_set:\n                        cur_area += area_map[idx]\n                    max_area = max(max_area, cur_area)\n        return max_area\n    \n    \n    def dfs(self, grid, mark, r, c):\n        if not self.in_area(grid, r, c):\n            return 0 #\u6ce8\u610f\u4e0d\u80fdreturn None\n        if grid[r][c] != 1:\n            return 0\n        grid[r][c] = mark\n        return 1 + self.dfs(grid, mark, r - 1, c) \\\n                    + self.dfs(grid, mark, r + 1, c) \\\n                    + self.dfs(grid, mark, r, c - 1) \\\n                    + self.dfs(grid, mark, r, c + 1) \\\n        \n    def in_area(self, grid, r, c):\n        return 0 <= r < len(grid) and 0 <= c < len(grid[0])        \n"})})]})}function f(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>t});var a=r(96540);const i={},d=a.createContext(i);function s(n){const e=a.useContext(d);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(d.Provider,{value:e},n.children)}}}]);