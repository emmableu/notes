"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[584],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(96540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},93650:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"Leetcode/Other/215.215 - Kth Largest Element in an Array - Medium","title":"215.215 - Kth Largest Element in an Array - Medium","description":"Description:","source":"@site/docs/Leetcode/99.Other/215.215 - Kth Largest Element in an Array - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/1c30048b-a9f0-4d10-8435-2f476408b514","permalink":"/notes/docs/p/1c30048b-a9f0-4d10-8435-2f476408b514","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/215.215 - Kth Largest Element in an Array - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/1c30048b-a9f0-4d10-8435-2f476408b514","slug":"/p/1c30048b-a9f0-4d10-8435-2f476408b514"},"sidebar":"tutorialSidebar","previous":{"title":"2135.2135 - Count Words Obtained After Adding a Letter - Medium","permalink":"/notes/docs/p/3f367b94-0c62-4423-baf8-1261c37ccdaf"},"next":{"title":"2162.2162 - Minimum Cost to Set Cooking Time - Medium","permalink":"/notes/docs/p/2c1654d3-ad7e-415b-b371-eac6e9a4bc09"}}');var s=i(74848),r=i(28453);const l={created_at:"2025-10-23",page_link:"/p/1c30048b-a9f0-4d10-8435-2f476408b514",slug:"/p/1c30048b-a9f0-4d10-8435-2f476408b514"},a=void 0,o={},h=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Method 1: QuickSelect (preferred, time complexity: max: n^2, average: n)",id:"method-1-quickselect-preferred-time-complexity-max-n2-average-n",level:2},{value:"\u6ce8\u610f\uff1a",id:"\u6ce8\u610f",level:3},{value:"code",id:"code",level:3},{value:"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790",id:"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790",level:3},{value:"\u4e3a\u4ec0\u4e48\u4e0d\u662f n log n",id:"\u4e3a\u4ec0\u4e48\u4e0d\u662f-n-log-n",level:4},{value:"Method 2: Heap (time complexity: n lgn)",id:"method-2-heap-time-complexity-n-lgn",level:2},{value:"\u6ce8\u610f\uff1a",id:"\u6ce8\u610f-1",level:3},{value:"My solution",id:"my-solution",level:3},{value:"\u4e00\u4e2aquickselect\u7684\u9519\u8befsolution",id:"\u4e00\u4e2aquickselect\u7684\u9519\u8befsolution",level:2},{value:"\u9519\u8befsolution",id:"\u9519\u8befsolution",level:3},{value:"\u9519\u8bef\u539f\u56e0\uff1a",id:"\u9519\u8bef\u539f\u56e0",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,s.jsx)(n.p,{children:"Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Example 1:\nInput: [3,2,1,5,6,4] and k = 2\nOutput: 5\n\nExample 2:\nInput: [3,2,3,1,2,4,5,5,6] and k = 4\nOutput: 4\n"})}),"\n",(0,s.jsx)(n.h2,{id:"method-1-quickselect-preferred-time-complexity-max-n2-average-n",children:"Method 1: QuickSelect (preferred, time complexity: max: n^2, average: n)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/pages/5d7c1e/#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86",children:"quick sort \u6a21\u7248"})}),"\n",(0,s.jsx)(n.p,{children:"Use quick select, do a recursion,"}),"\n",(0,s.jsx)(n.h3,{id:"\u6ce8\u610f",children:"\u6ce8\u610f\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"partition \u5199\u5728function\u91cc\u9762\u7684\u65f6\u5019index\u4f1a\u66f4\u597d\u5224\u65ad"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u8bb0\u5fc6partition\u7684\u5173\u952e\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"pivot is the right one if we do small part on left"}),"\n",(0,s.jsx)(n.li,{children:"pivot\u7684\u70b9\u4e0d\u662findex\uff0c\u800c\u662fvalue\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u8d70\u8fc7\u53bb\u7684\u65f6\u5019\u9700\u8981\u7684\u662f\u4e24\u4e2a\u70b9\uff0c\u4e00\u4e2a\u662fiterator\uff0c\u4e00\u4e2a\u662fmarker\uff0c\u8fd9\u4e2amarker\u70b9\u662f\u4e13\u95e8\u4e3a\u4e86\u505aswap\u7684\u3002"}),"\n",(0,s.jsx)(n.li,{children:"partition\u7684\u6700\u540e\uff0c marker\u7684\u5de6\u8fb9\u5168\u662f\u6bd4pivot\u5c0f\u7684\uff0c \u53f3\u8fb9\u5168\u662f\u6bd4pivot\u5927\u7684\uff0cmarker\u672c\u8eab\u80af\u5b9a\u6bd4pivot\u5927\uff0c\u56e0\u4e3a\u5982\u679c\u5b83\u6bd4pivot\u5c0f\uff0c\u5b83\u4e4b\u524d\u5c31\u88ab\u6362\u5230\u5de6\u8fb9\u53bb\u4e86\u3002\u6240\u4ee5\u628apivot\uff08\u4e5f\u5c31\u662f\u8fd9\u91cc\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a\uff09\u548cmarker\u6362\u5c31\u884c\u4e86\u3002"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u8fd9\u91cc\u7528\u7684\u662f\u6700\u57fa\u672c\u7684quick select\u548cpartition\uff0c \u540d\u5b57\u53eb\u505aLomuto partition scheme, \u8fd9\u91cc\uff0cpivot is the right one if we do small part on left"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u76ee\u7684\u662f\u5de6\u8fb9\u8981\u5c0f\uff0c\u6211\u4eec\u770b\u5230\u5c0f\u7684\uff0c\u5c31\u628a\u5c0f\u7684\u5f04\u5230\u6700\u5de6\u8fb9\u53bb\uff0c\u7528marker\u6765\u8bb0\u5fc6\u8981\u88ab\u5f04\u8fc7\u53bb\u7684\u4e0b\u4e00\u4e2a\u70b9\u7684\u4f4d\u7f6e\uff0c\u5728marker\u7684\u5de6\u8fb9\u5c31\u662f\u6240\u6709\u88ab\u5f04\u8fc7\u53bb\u7684\u70b9"}),"\n",(0,s.jsx)(n.li,{children:"\u4f18\u5316\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u6bd4\u5982hoare's algorithm\uff0c\u4e24\u8fb9\u5f80\u4e2d\u95f4\u903c\u8fd1\uff0c \u6216\u8005random select pivot\uff0c\u4f46\u662f\u6211\u8fd8\u6ca1\u6709\u4ed4\u7ec6\u4e86\u89e3\u8fc7\u8fd9\u4e9b\u65b9\u6cd5\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"code",children:"code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import random\n\n\nclass Solution:\n    def findKthLargest(self, nums, k):\n        self.shuffle(nums)\n        return self.quick_select(nums, k, 0, len(nums) - 1)\n\n    def shuffle(self, nums):\n        for i in range(len(nums)):\n            swap_idx = random.randint(i, len(nums) - 1)\n            if i != swap_idx:\n                nums[i], nums[swap_idx] = nums[swap_idx], nums[i]\n\n    def quick_select(self, nums, k, l, r):\n        mid = self.partition(nums, l, r)\n        # \u6ce8\u610f\u8981\u6c42\u7684\u662f\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u6240\u4ee5\u8981\u53cd\u8fc7\u6765\n        if mid == len(nums) - k:\n            # nums=[0,1,2,3,4,5], len(nums) = 6, \u7b2c k=2\u5927\u7684 = \u7b2c5\u5c0f\u7684, = index \u57284\u4e0a\u7684\u3002\n            return nums[mid]\n        elif mid < len(nums) - k:\n            return self.quick_select(nums, k, mid + 1, r)\n        elif mid > len(nums) - k:\n            return self.quick_select(nums, k, l, mid - 1)\n\n    def partition(self, nums, l, r):\n        pivot_val = nums[r]\n        marker = l\n        for i in range(l, r):\n            if nums[i] < pivot_val:\n                nums[i], nums[marker] = nums[marker], nums[i]\n                marker += 1\n        nums[marker], nums[r] = nums[r], nums[marker]\n        return marker\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790",children:"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["time complexity:\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"avg time complexity: O(n)"}),"\n",(0,s.jsx)(n.li,{children:"worst case time complexity: O(n^2)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"\u4e3a\u4ec0\u4e48\u4e0d\u662f-n-log-n",children:"\u4e3a\u4ec0\u4e48\u4e0d\u662f n log n"}),"\n",(0,s.jsxs)(n.p,{children:["(",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/56940793/quickselect-time-complexity-explained",children:"\u6765\u81eastackoverflow"}),")\nn log(n) implies that the algorithm looks at all N items log(n) times. But that's not what's happening with Quickselect."]}),"\n",(0,s.jsx)(n.p,{children:"Let's say you're using Quickselect to pick the top 8 items in a list of 128. And by some miracle of random selection, the pivots you pick are always at the halfway point."}),"\n",(0,s.jsx)(n.p,{children:"On the first iteration, the algorithm looks at all 128 items and partitions into two groups of 64 items each. The next iteration splits into two groups of 32 items each. Then 16, and then 8. The number of items examined is:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"N + N/2 + N/4 + N/8 + N/16"}),(0,s.jsx)(n.br,{}),"\nThe sum of that series will never reach 2*N."]}),"\n",(0,s.jsx)(n.p,{children:"The worst case is that partitioning always results in very skewed partition sizes. Consider what would happen if the first partitioning only removed one item. And the second only removed one, etc. The result would be:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"N + (N-1) + (N-2) ..."}),(0,s.jsx)(n.br,{}),"\nWhich is (n^2 + n)/2), or ",(0,s.jsx)(n.code,{children:"O(n^2)"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"method-2-heap-time-complexity-n-lgn",children:"Method 2: Heap (time complexity: n lgn)"}),"\n",(0,s.jsx)(n.p,{children:"Use minheap:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["when pushing, keep the heap size <= k:\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"when size == k: do heappushpop"}),"\n",(0,s.jsx)(n.li,{children:"when size < k: do heappush\nafter the loop, get the smallest element."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u6ce8\u610f-1",children:"\u6ce8\u610f\uff1a"}),"\n",(0,s.jsxs)(n.p,{children:["python heapq \u7684\u51e0\u4e2a\u91cd\u8981\u7684api\uff1a\nTo create a heap, use a list initialized to [], or you can transform a populated list into a heap via function ",(0,s.jsx)(n.code,{children:"heapify()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The following functions are provided:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"heapq.heappush(heap, item)"}),": Push the value item onto the heap, maintaining the heap invariant."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"heapq.heappop(heap)"}),": Pop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0]."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"heapq.heappushpop(heap, item)"}),": Push item on the heap, then pop and return the smallest item from the heap. The combined action runs more efficiently than heappush() followed by a separate call to heappop()."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"heapq.heapify(x)"}),": Transform list x into a heap, in-place, in linear time."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"my-solution",children:"My solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        h = []\n        for num in nums:\n            if len(h) == k:\n                heapq.heappushpop(h, num)\n            else: #the only possibility is len(h)<k here\n                heapq.heappush(h, num)\n        return h[0]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u4e00\u4e2aquickselect\u7684\u9519\u8befsolution",children:"\u4e00\u4e2aquickselect\u7684\u9519\u8befsolution"}),"\n",(0,s.jsx)(n.p,{children:"partition\u7b97\u6cd5\u5bb9\u6613\u72af\u53e6\u4e00\u4e2a\u9519\u8bef\uff0c\u4e0b\u9762\u770b\u4e00\u4e0b\u8fd9\u4e2a\u9519\u8befsolution\uff1a"}),"\n",(0,s.jsx)(n.h3,{id:"\u9519\u8befsolution",children:"\u9519\u8befsolution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findKthLargest(self, nums, k):\n        def partition(l, r):\n            nonlocal nums\n            pivot_val = nums[r]\n            marker = l\n            for i in range(l+1, r): #\u8fd9\u4e00\u884c\u9519\u4e86\uff01\u539f\u56e0\u89c1\u4e0b\u9762\u5199\u7684\u3002\n                if nums[i] < pivot_val:\n                    nums[i], nums[marker] = nums[marker], nums[i]\n                    marker += 1\n            nums[r], nums[marker] = nums[marker], nums[r]\n            return marker\n        \n        l, r = 0, len(nums)-1\n        while True:\n            marker = partition(l, r)\n            if marker == len(nums)-k:\n                return nums[marker]\n            if marker < len(nums)-k:\n                l = marker + 1\n            elif marker > len(nums)-k:\n                r = marker - 1\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u9519\u8bef\u539f\u56e0",children:"\u9519\u8bef\u539f\u56e0\uff1a"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"for i in range(l+1, r)"})," \u4e3a\u4ec0\u4e48\u4e0d\u5bf9\uff1a"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"partition \u6700\u540e\u4ea4\u6362marker \u548cpivot \u7684\u524d\u63d0\u662fmarker\u5bf9\u5e94\u7684\u6570\u503c \u4e00\u5b9a\u8981\u6bd4pivot\u5927\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e00\u70b9\u5417\uff1f"}),"\n",(0,s.jsx)(n.li,{children:"\u5982\u679ci\u4ecel+1\u5f00\u59cb\uff0cmarker\u5982\u679c\u5c0f\u4e8epivot\uff0c\u90a3\u4e48\u6bcf\u6b21\u4ea4\u6362\u7684\u65f6\u5019\uff0ci\u8fd9\u4e2a\u70b9\u5728\u4ea4\u6362\u5b8c\u4ee5\u540e\u4ecd\u7136\u4f1a\u6bd4pivot\u5c0f\uff0c\u53ef\u662f\u5982\u679c\u8fd9\u4e2a\u70b9\u7ed3\u675f\u65f6\u5728marker+1\u8fd9\u4e2aindex\u4e0a\uff0c\u90a3\u4e48marker+1\u5c31\u4f1a\u5c0f\u4e8epivot"}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);