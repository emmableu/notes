"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[8756],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>c});var i=n(96540);const t={},r=i.createContext(t);function o(e){const s=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:s},e.children)}},46217:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Leetcode/Other/207.207 - Course Schedule - Medium","title":"207.207 - Course Schedule - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/207.207 - Course Schedule - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/5f95a1f8-24cc-486b-b640-a02f2892c60c","permalink":"/notes/docs/p/5f95a1f8-24cc-486b-b640-a02f2892c60c","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/207.207 - Course Schedule - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/5f95a1f8-24cc-486b-b640-a02f2892c60c","slug":"/p/5f95a1f8-24cc-486b-b640-a02f2892c60c"},"sidebar":"tutorialSidebar","previous":{"title":"206.206 - Reverse Linked List - Easy","permalink":"/notes/docs/p/c0c1f143-f3a5-4374-b6ee-9a5a0b5b3598"},"next":{"title":"208.208 - Implement Trie (Prefix Tree) - Medium","permalink":"/notes/docs/p/fb836e15-f906-47e0-aa7b-4f617959d585"}}');var t=n(74848),r=n(28453);const o={created_at:"2025-10-23",page_link:"/p/5f95a1f8-24cc-486b-b640-a02f2892c60c",slug:"/p/5f95a1f8-24cc-486b-b640-a02f2892c60c"},c=void 0,a={},l=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function u(e){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://leetcode.com/problems/course-schedule/submissions/",children:"LC link"}),"\n",(0,t.jsx)(s.a,{href:"http://zxi.mytechroad.com/blog/graph/leetcode-207-course-schedule/",children:"explanation"})]}),"\n",(0,t.jsx)(s.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(s.p,{children:["There are a total of ",(0,t.jsx)(s.code,{children:"numCourses"})," courses you have to take, labeled from 0 to numCourses-1."]}),"\n",(0,t.jsx)(s.p,{children:"Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]"}),"\n",(0,t.jsx)(s.p,{children:"Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?"}),"\n",(0,t.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Example 1:\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0. So it is possible.\n\nExample 2:\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0, and to take course 0 you should\n             also have finished course 1. So it is impossible.\n"})}),"\n",(0,t.jsx)(s.h2,{id:"solution",children:"Solution"}),"\n",(0,t.jsx)(s.p,{children:"\u5224\u65ad\u6709\u5411\u56fe\u4e2d\u662f\u5426\u6709\u73af\u3002"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"\u4f20\u7edfdfs\u53ea\u6709\u4e00\u4e2avisited\u72b6\u6001"}),"\n",(0,t.jsxs)(s.li,{children:["\u62d3\u6251dfs\u6709\u4e24\u4e2a\u72b6\u6001\uff1a ",(0,t.jsx)(s.code,{children:"visited"})," and ",(0,t.jsx)(s.code,{children:"visiting"})]}),"\n",(0,t.jsxs)(s.li,{children:["\u78b0\u5230visited\uff1aok\uff1b \u78b0\u5230  ",(0,t.jsx)(s.code,{children:"visiting"}),": \u8bf4\u660e\u6709\u73af\uff0c\u8fd4\u56defalse\u3002\n\u5c06\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u8fdb\u884c\u53cd\u8f6c\uff0c\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u3002"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class Solution:\n    def canFinish(self, numCourses, prerequisites):\n        def dfs(i):\n            if visited[i] == 2:  # means visited\n                return True\n            if visited[i] == 1:  # means visiting\n                return False\n            visited[i] = 1  # means visiting\n            children = course_dict.get(i, [])\n            if not children:\n                visited[i] = 2\n                return True\n            for child in children:\n                if not dfs(child):\n                    return False\n            visited[i] = 2\n            return True\n\n        visited = [0] * numCourses\n        course_dict = defaultdict(list)\n        for x, y in prerequisites:\n            course_dict[x].append(y)\n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        return True\n"})})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);