"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5738],{7428:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Leetcode/BFS/1263.1263 - Minimum Moves to Move a Box to Their Target Location - Hard","title":"1263.1263 - Minimum Moves to Move a Box to Their Target Location - Hard","description":"Description","source":"@site/docs/Leetcode/01.BFS/1263.1263 - Minimum Moves to Move a Box to Their Target Location - Hard.md","sourceDirName":"Leetcode/01.BFS","slug":"/p/5d902972-c5d5-4c17-94c9-a6f7cca22616","permalink":"/notes/docs/p/5d902972-c5d5-4c17-94c9-a6f7cca22616","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/01.BFS/1263.1263 - Minimum Moves to Move a Box to Their Target Location - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/5d902972-c5d5-4c17-94c9-a6f7cca22616","slug":"/p/5d902972-c5d5-4c17-94c9-a6f7cca22616"},"sidebar":"tutorialSidebar","previous":{"title":"BFS","permalink":"/notes/docs/p/df07b519-54ed-4c62-b9a3-7b0811e77fbc"},"next":{"title":"127.127 - Word Ladder - Hard","permalink":"/notes/docs/p/16b6dcd6-b2ee-4b46-af58-0406c9321b4d"}}');var s=o(74848),i=o(28453);const r={created_at:"2025-10-23",page_link:"/p/5d902972-c5d5-4c17-94c9-a6f7cca22616",slug:"/p/5d902972-c5d5-4c17-94c9-a6f7cca22616"},d=void 0,a={},c=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Method: Nested BFS",id:"method-nested-bfs",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations."}),"\n",(0,s.jsx)(n.p,{children:"The game is represented by an m x n grid of characters grid where each element is a wall, floor, or box."}),"\n",(0,s.jsx)(n.p,{children:"Your task is to move the box 'B' to the target position 'T' under the following rules:"}),"\n",(0,s.jsx)(n.p,{children:"The character 'S' represents the player. The player can move up, down, left, right in grid if it is a floor (empty cell).\nThe character '.' represents the floor which means a free cell to walk.\nThe character '#' represents the wall which means an obstacle (impossible to walk there).\nThere is only one box 'B' and one target cell 'T' in the grid.\nThe box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.\nThe player cannot walk through the box.\nReturn the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Example 1:\nInput: grid = [["#","#","#","#","#","#"],\n               ["#","T","#","#","#","#"],\n               ["#",".",".","B",".","#"],\n               ["#",".","#","#",".","#"],\n               ["#",".",".",".","S","#"],\n               ["#","#","#","#","#","#"]]\nOutput: 3\nExplanation: We return only the number of times the box is pushed.\n\nExample 2:\nInput: grid = [["#","#","#","#","#","#"],\n               ["#","T","#","#","#","#"],\n               ["#",".",".","B",".","#"],\n               ["#","#","#","#",".","#"],\n               ["#",".",".",".","S","#"],\n               ["#","#","#","#","#","#"]]\nOutput: -1\n'})}),"\n",(0,s.jsx)(n.h2,{id:"method-nested-bfs",children:"Method: Nested BFS"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u5bf9\u4e8e\u5982\u679c\u53ea\u6709\u7bb1\u5b50\uff1a\u56e0\u4e3a\u662f\u6c42\u6700\u77ed\u8def\u5f84\uff0c\u6240\u4ee5\u662fbfs"}),"\n",(0,s.jsxs)(n.li,{children:["\u52a0\u5165\u4eba\u540e\uff0c\u8981\u5bf9\u6bcf\u4e00\u6b21\u7bb1\u5b50\u7684\u79fb\u52a8\u4f4d\u7f6e\u5224\u65ad\u662f\u5426\u4eba\u53ef\u4ee5\u4ece\u5f53\u524d\u4f4d\u7f6e\u8d70\u5230\u8fd9\u4e2a\u4f4d\u7f6e (",(0,s.jsx)(n.code,{children:"check"})," \u51fd\u6570)."]}),"\n",(0,s.jsx)(n.li,{children:"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a O((m*n)^2)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def minPushBox(self, grid: List[List[str]]) -> int:\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == "T":\n                    dest = i, j\n                elif grid[i][j] == "B":\n                    box = i, j\n                elif grid[i][j] == "S":\n                    person = i, j\n        \n        q = deque([(box, person)])\n        vis = {box + person}\n        res = -1\n        while q:\n            size = len(q)\n            res += 1\n            for _ in range(size):\n                box, person = q.popleft()\n                if box == dest:\n                    return res\n                new_box_tuple = self.neighbors(box)\n                new_person_tuple = self.neighbors_flip(box)\n                for new_box, new_person in zip(new_box_tuple, new_person_tuple):\n                    if self.is_valid(grid, new_box) and new_box + box not in vis:\n                        if self.is_valid(grid, new_person) and self.check(grid, box, person, new_person):\n                            q.append((new_box, box))\n                            vis.add(new_box + box)\n        return -1\n    \n    def neighbors(self, pos):\n        return (pos[0]-1, pos[1]), (pos[0]+1, pos[1]), (pos[0], pos[1]-1), (pos[0], pos[1]+1)\n\n    def neighbors_flip(self, pos):\n        return (pos[0]+1, pos[1]), (pos[0]-1, pos[1]), (pos[0], pos[1]+1), (pos[0], pos[1]-1)\n    \n    def is_valid(self, grid, pos):\n        x, y = pos[0], pos[1]\n        return 0 <= x < len(grid) and  0 <= y < len(grid[0]) and grid[x][y] != "#"\n    \n    \n    def check(self, grid, box, cur, dest):\n        q = deque([cur])\n        vis = {cur}\n        while q:\n            pos = q.popleft()\n            if pos == dest:\n                return True\n            for child_pos in self.neighbors(pos):\n                if child_pos not in vis:\n                    if self.is_valid(grid, child_pos) and child_pos != box:\n                        q.append(child_pos)\n                        vis.add(child_pos)\n        return False\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var t=o(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);