"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3336],{24698:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Leetcode/DFS/236.236 - Lowest Common Ancestor of a Binary Tree - \u53ea\u6709left right \u6307\u9488","title":"236.236 - Lowest Common Ancestor of a Binary Tree - \u53ea\u6709left right \u6307\u9488","description":"\u548c 1650 \u533a\u522b\uff1a","source":"@site/docs/Leetcode/04.DFS/236.236 - Lowest Common Ancestor of a Binary Tree - \u53ea\u6709left right \u6307\u9488.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/9c90b124-d53b-4232-8800-bb7e4065d546","permalink":"/notes/docs/p/9c90b124-d53b-4232-8800-bb7e4065d546","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/236.236 - Lowest Common Ancestor of a Binary Tree - \u53ea\u6709left right \u6307\u9488.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/9c90b124-d53b-4232-8800-bb7e4065d546","slug":"/p/9c90b124-d53b-4232-8800-bb7e4065d546"},"sidebar":"tutorialSidebar","previous":{"title":"22.22 - Generate Parentheses - Medium","permalink":"/notes/docs/p/e09c747d-163b-47c2-95a3-aa278ccfd92e"},"next":{"title":"282.282 - Expression Add Operators - Hard","permalink":"/notes/docs/p/9f4bd39f-b0ec-4d31-97d2-0289deed74dd"}}');var r=o(74848),s=o(28453);const i={created_at:"2025-10-23",page_link:"/p/9c90b124-d53b-4232-8800-bb7e4065d546",slug:"/p/9c90b124-d53b-4232-8800-bb7e4065d546"},d=void 0,l={},c=[{value:"\u548c 1650 \u533a\u522b\uff1a",id:"\u548c-1650-\u533a\u522b",level:2},{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution: postorder traversal \u540e\u5e8f\u904d\u5386",id:"solution-postorder-traversal-\u540e\u5e8f\u904d\u5386",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}];function a(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\u548c-1650-\u533a\u522b",children:"\u548c 1650 \u533a\u522b\uff1a"}),"\n",(0,r.jsxs)(n.p,{children:["\u8fd9\u4e2a\u6ca1\u6709\u5411\u4e0a\u7684",(0,r.jsx)(n.code,{children:"parent"}),"\u6307\u9488\uff0c \u53ea\u6709\u6807\u51c6\u7684",(0,r.jsx)(n.code,{children:"left"}),",",(0,r.jsx)(n.code,{children:"right"}),"\u6307\u9488\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,r.jsx)(n.p,{children:"Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA)."}),"\n",(0,r.jsx)(n.p,{children:"Each node will have a reference to its parent node. The definition for Node is below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"class Node {\n    public int val;\n    public Node left;\n    public Node right;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:'According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)."'}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"solution-postorder-traversal-\u540e\u5e8f\u904d\u5386",children:"Solution: postorder traversal \u540e\u5e8f\u904d\u5386"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"lowestCommonAncestor"}),"\u7684\u5b9e\u9645\u542b\u4e49\uff1a\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\uff0c\u8fd4\u56de\u4e0b\u9762\u4e09\u79cd\u4e0d\u540c\u7684\u503c\uff1a",(0,r.jsx)(n.br,{}),"\n\u4ee4 tree \u4e3a \u4ee5\u5f53\u524droot\u4e3a\u6839\u7684\u6811"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"p\uff0cq\u90fd\u5728tree\u5185\uff0c\u8fd4\u56de\u4ed6\u4eec\u6700\u8fd1\u516c\u5171\u7956\u5148"}),"\n",(0,r.jsx)(n.li,{children:"p\uff0cq\u90fd\u4e0d\u5728tree\u5185\uff0c\u8fd4\u56denone"}),"\n",(0,r.jsx)(n.li,{children:"\u53ea\u6709p\u5728tree\u5185\uff0cq\u4e0d\u5728tree\u5185\uff0c\u8fd4\u56dep"}),"\n",(0,r.jsxs)(n.li,{children:["\u53ea\u6709q\u5728tree\u5185\uff0cp\u4e0d\u5728tree\u5185\uff0c\u8fd4\u56deq\n\u6839\u636e\u8fd9\u4e2a\u5b9a\u4e49\uff0c",(0,r.jsx)(n.strong,{children:"\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u5728\u540e\u5e8f\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b2c\u4e00\u6b21\u4e00\u4e2aroot\u7684\u5de6\uff0c\u53f3\u5b50\u6811\u90fd\u6709\u8fd4\u56de\u503c\u7684\u65f6\u5019\u4ea7\u751f"}),"\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u8fd9\u4e2aroot\u5c31\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u628a\u8fd9\u4e2a\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e00\u5c42\u4e00\u5c42\u8fd4\u56de\u63a8\u4e0a\u53bb\u5c31\u597d\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5bf9\u5e94\u4ee3\u7801\u548c\u4e0b\u56fe\u7406\u89e3\uff1a"}),"\n",(0,r.jsx)(n.p,{children:"\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0cp=4\uff0cq=7:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"      1\n    /   \\\n   2     3\n  /\\    / \\\n 4  5  6   7\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"4"}),": \u5148\u8d70 1-2-4\uff0c4 == p, 4\u8fd9\u4e2a\u70b9\u4e3aroot\u65f6\u8fd4\u56de4"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"5"}),": \u518d \u8d70 5-None\uff0c5\u7684\u4e0b\u4e00\u4e2a\u70b9\uff08none\uff09\u4e3aroot\u65f6\u8fd4\u56denone\uff0c\u7136\u540e\u4f20\u4e0a\u53bb\uff0c5\u4e5f\u8fd4\u56denone"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": \u5bf9\u4e8e 2 \u8fd9\u4e2a\u70b9\uff0c\u4ed6\u7684left\u4e0d\u662fnone\uff0cright\u662fnone\uff0c\u8fd4\u56deleft = 4"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"6"}),": \u518d 3-6-none\uff0c6\u7684\u4e0b\u4e00\u4e2a\u70b9\uff08none\uff09\u4e3aroot\u65f6\u8fd4\u56denone\uff0c\u7136\u540e\u4f20\u4e0a\u53bb\uff0c6\u4e5f\u8fd4\u56denone"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"7"}),": \u518d 7\uff0c\u53d1\u73b0root == q\uff0c\u8fd4\u56de 7"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": \u5bf9\u4e8e3\u8fd9\u4e2a\u70b9\uff0c\u5b83\u7684left \u662fnone right\u4e0d\u662f\uff0c\u6240\u4ee5\u8fd4\u56deright = 7"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": \u5bf9\u4e8e 1\u8fd9\u4e2a\u70b9\uff0c\u5b83\u7684left = 4\uff0c right = 7 \u90fd\u6709\u503c\uff0c\u6240\u4ee5\u8fd4\u56de 1\u5b83\u81ea\u5df1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4ee5\u4e0a\u540e\u5e8f\u904d\u5386\u7684\u8fd4\u56de\u503c\u6807\u5728\u5bf9\u5e94\u7684\u8282\u70b9\u4e0a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"        1\n    /      \\\n   4        7\n  /\\       / \\\n 4 none none   7\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        if not root or root == p or root == q: \n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if not left: \n            return right\n        if not right: \n            return left\n        return root\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>d});var t=o(96540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);