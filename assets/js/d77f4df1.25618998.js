"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1928],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function d(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:n},e.children)}},77381:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"Leetcode/Other/679.679 - 24 Game - Hard","title":"679.679 - 24 Game - Hard","description":"tags: [Array, Math, Backtracking]","source":"@site/docs/Leetcode/99.Other/679.679 - 24 Game - Hard.md","sourceDirName":"Leetcode/99.Other","slug":"/p/3508f451-1400-4eaa-aed3-73483e148518","permalink":"/notes/docs/p/3508f451-1400-4eaa-aed3-73483e148518","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/679.679 - 24 Game - Hard.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/3508f451-1400-4eaa-aed3-73483e148518","slug":"/p/3508f451-1400-4eaa-aed3-73483e148518"},"sidebar":"tutorialSidebar","previous":{"title":"676.676 - Implement Magic Dictionary (Medium)","permalink":"/notes/docs/p/c0d0e9e6-8c79-46a1-9c93-b734f336194f"},"next":{"title":"68.68 - Text Justification - Hard","permalink":"/notes/docs/p/2e22a30a-c6c9-4b52-b3d6-334e03921770"}}');var i=t(74848),r=t(28453);const d={created_at:"2025-10-23",page_link:"/p/3508f451-1400-4eaa-aed3-73483e148518",slug:"/p/3508f451-1400-4eaa-aed3-73483e148518"},l=void 0,a={},o=[{value:"\u601d\u8def",id:"\u601d\u8def",level:2},{value:"Solution 1: \u526a\u679d\u4e0d\u662f\u7279\u522b\u5b8c\u5584 \uff08\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u90fdgenerate\u4e86\u6240\u6709\u7684permutation\uff09\uff0c\u4f46\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u4ee3\u7801\uff1a",id:"solution-1-\u526a\u679d\u4e0d\u662f\u7279\u522b\u5b8c\u5584-\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u90fdgenerate\u4e86\u6240\u6709\u7684permutation\u4f46\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u4ee3\u7801",level:2},{value:"Solution 2: \u628a\u4ea7\u751fpermutation\u7684\u8fc7\u7a0b\u5199\u8fdbdfs_judge \u91cc\u9762",id:"solution-2-\u628a\u4ea7\u751fpermutation\u7684\u8fc7\u7a0b\u5199\u8fdbdfs_judge-\u91cc\u9762",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"tags: [Array, Math, Backtracking]"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208191144937.png",alt:""})}),"\n",(0,i.jsx)(n.h2,{id:"\u601d\u8def",children:"\u601d\u8def"}),"\n",(0,i.jsx)(n.p,{children:"\u6e38\u620f\u7684\u7b2c\u4e00\u6b65\u662f\u6311\u51fa\u4e24\u4e2a\u6570\uff0c\u7b97\u51fa\u4e00\u4e2a\u65b0\u6570\u66ff\u4ee3\u8fd9\u4e24\u4e2a\u6570\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u7136\u540e\uff0c\u5728\u4e09\u4e2a\u6570\u4e2d\u73a9 24 \u70b9\uff0c\u518d\u6311\u51fa\u4e24\u4e2a\u6570\uff0c\u7b97\u51fa\u4e00\u4e2a\u6570\u66ff\u4ee3\u5b83\u4eec\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u7136\u540e\uff0c\u5728\u4e24\u4e2a\u6570\u4e2d\u73a9 24 \u70b9\u2026\u2026"}),"\n",(0,i.jsx)(n.p,{children:"\u5f88\u660e\u663e\u7684\u9012\u5f52\u601d\u8def\u3002\u6bcf\u6b21\u9012\u5f52\u90fd\u4f1a\u6311\u51fa\u4e24\u4e2a\u6570\uff0c\u6211\u4eec\u5c1d\u8bd5\u6311\u51fa\u4e0d\u540c\u7684\u4e24\u6570\u7ec4\u5408\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6311 1\u30012\uff0c\u57fa\u4e8e\u5b83\uff0c\u7ee7\u7eed\u9012\u5f52\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6311 1\u30013\uff0c\u57fa\u4e8e\u5b83\uff0c\u7ee7\u7eed\u9012\u5f52\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6311 \u2026\u2026"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u5373\u901a\u8fc7\u4e24\u5c42 for \u5faa\u73af\uff0c\u679a\u4e3e\u6240\u6709\u7684\u4e24\u6570\u7ec4\u5408\uff0c\u5c55\u5f00\u51fa\u4e0d\u540c\u9009\u62e9\u6240\u5bf9\u5e94\u7684\u9012\u5f52\u5206\u652f\u3002"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u6311\u51fa\u7684\u6bcf\u4e00\u5bf9\u6570\uff0c\u6211\u4eec\u2026"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u679a\u4e3e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u8fd0\u7b97\u64cd\u4f5c\uff1a\u52a0\u51cf\u4e58\u9664\u2026\u2014\u2014\uff08\u5bf9\u5e94\u4e0d\u540c\u7684\u9012\u5f52\u8c03\u7528\uff09"}),"\n",(0,i.jsx)(n.li,{children:"\u9010\u4e2a\u5c1d\u8bd5\u6bcf\u4e00\u79cd\u8fd0\u7b97\u2014\u2014\uff08\u9009\u62e9\u8fdb\u5165\u4e00\u4e2a\u9012\u5f52\u5206\u652f\uff09"}),"\n",(0,i.jsx)(n.li,{children:"\u4f20\u5165\u957f\u5ea6\u53d8\u5c0f\u7684\u65b0\u6570\u7ec4\u7ee7\u7eed\u9012\u5f52\u2014\u2014\uff08\u9012\u5f52\u8ba1\u7b97\u5b50\u95ee\u9898\uff09"}),"\n",(0,i.jsxs)(n.li,{children:["\u5f53\u9012\u5f52\u5230\u53ea\u5269\u4e00\u4e2a\u6570\u2014\u2014\uff08\u5230\u8fbe\u4e86\u9012\u5f52\u6811\u7684\u5e95\u90e8\uff09\uff0c\u770b\u770b\u662f\u4e0d\u662f 24 \u3002\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u662f\u5c31\u8fd4\u56de true\u2014\u2014\u7ed3\u675f\u5f53\u524d\u9012\u5f52\uff0c\u5e76\u4e14\u63a7\u5236\u5b83\u4e0d\u8fdb\u5165\u522b\u7684\u9012\u5f52\u5206\u652f\uff0c\u6574\u4e2a\u7ed3\u675f\u6389\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u5426\u5219\u8fd4\u56de false\uff0c\u79bb\u5f00\u9519\u8bef\u7684\u5206\u652f\uff0c\u8fdb\u5165\u522b\u7684\u9012\u5f52\u5206\u652f\uff0c\u5c1d\u8bd5\u522b\u7684\u8fd0\u7b97\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u526a\u679d\u5c0f\u6280\u5de7"})}),"\n",(0,i.jsx)(n.p,{children:"\u5f53\u9012\u5f52\u8fd4\u56de true\uff0c\u4ee3\u8868\u6e38\u620f\u6210\u529f\uff0c\u4e0d\u7528\u7ee7\u7eed\u63a2\u7d22\u4e86\uff0c\u5269\u4e0b\u7684\u641c\u7d22\u5206\u652f\u5168\u90e8\u780d\u6389\u3002\u600e\u4e48\u505a\u5230\uff1f"}),"\n",(0,i.jsx)(n.p,{children:"\u4ee3\u7801\u5982\u4e0b\u3002\u6807\u8bc6\u53d8\u91cfisValid\u521d\u59cb\u4e3a false\uff0c\u9ed8\u8ba4\u4f1a\u6267\u884c||\u540e\u9762\u7684\u9012\u5f52\u3002\n\u4e00\u65e6\u67d0\u4e2a\u9012\u5f52\u8fd4\u56de\u771f\uff0cisValid\u5c31\u53d8\u4e3a\u771f\uff0c\u7531\u4e8e||\u7684\u77ed\u8def\u7279\u6027\uff0c\u540e\u9762\u7684\u9012\u5f52\u4e0d\u4f1a\u6267\u884c\u3002\n\u6240\u6709\u9012\u5f52\u5b50\u8c03\u7528\u90fd\u8fd9\u4e48\u5199\uff0cisValid\u5c31\u50cf\u4e00\u4e2a\u5f00\u5173\uff0c\u907f\u514d\u5199\u5f88\u591a\u5224\u65ad\u8bed\u53e5\u3002"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"isValid |= judgePoint24([...newNums, n1 + n2])"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"isValid |= judgePoint24([...newNums, n1 - n2])"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"isValid |= judgePoint24([...newNums, n1 * n2])"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"isValid |= judgePoint24([...newNums, n1 / n2])"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u6ce8\u610f\uff1a"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["note that I'm using Python 3, so ",(0,i.jsx)(n.code,{children:"/"}),' is "true" division, not integer division like in Python 2. And it would be better to use ',(0,i.jsx)(n.code,{children:"fractions.Fraction"})," instead of floats. I actually just realized that there is in fact an input where simple floats fail, namely ",(0,i.jsx)(n.code,{children:"[3, 3, 8, 8]"}),". Floats calculate 23.999999999999989341858963598497211933135986328125 instead of 24. Using ",(0,i.jsx)(n.code,{children:"Fraction"})," however made my solution exceed the time limit, so I settled for the above approximation solution\uff1a"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:" if len(cards) == 1:\n            return math.isclose(cards[0],24)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"math.isclose"}),":\n",(0,i.jsx)(n.code,{children:"math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Return ",(0,i.jsx)(n.code,{children:"True"})," if the values ",(0,i.jsx)(n.em,{children:"a"})," and ",(0,i.jsx)(n.em,{children:"b"})," are close to each other and ",(0,i.jsx)(n.code,{children:"False"})," otherwise."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"print(math.isclose(1.233, 1.4566))  # False\nprint(math.isclose(1.233, 1.233)) # True\nprint(math.isclose(1.233, 1.24)) # False\nprint(math.isclose(1.233, 1.233000001)) # True\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u4e0b\u9762\u4e24\u4e2asolution\uff0c \u867d\u7136\u7b2c\u4e8c\u4e2a\u526a\u679d\u66f4\u5b8c\u5584\uff0c\u4f46\u6211\u89c9\u5f97\u7b2c\u4e00\u4e2a\u66f4\u597d\uff0c\u56e0\u4e3a\u66f4\u6e05\u695a\uff0c\u9762\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u4e24\u4e2a\u90fd\u5199\u3002"})}),"\n",(0,i.jsx)(n.h2,{id:"solution-1-\u526a\u679d\u4e0d\u662f\u7279\u522b\u5b8c\u5584-\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u90fdgenerate\u4e86\u6240\u6709\u7684permutation\u4f46\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u4ee3\u7801",children:"Solution 1: \u526a\u679d\u4e0d\u662f\u7279\u522b\u5b8c\u5584 \uff08\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u90fdgenerate\u4e86\u6240\u6709\u7684permutation\uff09\uff0c\u4f46\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u4ee3\u7801\uff1a"}),"\n",(0,i.jsx)(n.p,{children:"\u6ce8\u610f\uff1a"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"dfs_permutation \u4e0d\u80fd\u7528yield\uff0c\u5fc5\u987b\u8981\u76f4\u63a5\u628a\u6240\u6709\u7684\u7ed3\u679c\u90fd\u653e\u5230res\u91cc\u9762\uff0c\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u4e2a\u662f\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u4e3a\u4e86\u9632\u6b62 division by zero, \u628a \u9664\u6cd5\u5355\u72ec\u5217\u51fa\u6765\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"api \u7406\u89e3\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:">>> a, b, *rest = [1, 2, 3]\n>>> a, b, rest\n(1, 2, [3])\n\n>>> a, b, *rest = [1, 2]\n>>> a, b, rest\n(1, 2, [])\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import copy\nimport math\nclass Solution: \n    def judgePoint24(self, cards: List[int]) -> bool:\n        return self.dfs_judge(cards)\n\n    def dfs_judge(self, cards):\n        if len(cards) == 1:\n            return math.isclose(cards[0],24)\n        valid = False # \u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u662ftrue\n        for a, b, *rest in self.permutations(cards):\n            for ops in a + b, a - b, a * b:\n                valid |= self.dfs_judge([ops, *rest])\n                if valid: return True\n            if b: \n                valid |= self.dfs_judge([a / b, *rest])\n                if valid: return True\n        return valid\n\n    def permutations(self, cards):\n        res = []\n        self.dfs_permutation([], cards, [False] * len(cards), res)\n        return res\n\n    def dfs_permutation(self, path, nums, used, res):\n        if len(path) == len(nums):\n            res.append(copy.deepcopy(path)) #\u6ce8\u610f\u4e0d\u80fd\u7528yield\n        for idx in range(len(nums)):\n            if not used[idx]:\n                used[idx] = True\n                path.append(nums[idx])\n                self.dfs_permutation(path, nums, used, res)\n                path.pop()\n                used[idx] = False\n"})}),"\n",(0,i.jsx)(n.h2,{id:"solution-2-\u628a\u4ea7\u751fpermutation\u7684\u8fc7\u7a0b\u5199\u8fdbdfs_judge-\u91cc\u9762",children:"Solution 2: \u628a\u4ea7\u751fpermutation\u7684\u8fc7\u7a0b\u5199\u8fdbdfs_judge \u91cc\u9762"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import math\nclass Solution:\n\tdef judgePoint24(self, cards: List[int]) -> bool:\n\t\treturn self.dfs_judge([], cards, [False] * len(cards))\t\n\n\tdef dfs_judge(self, path, cards, used):\n\t\tvalid = False\n\t\tif len(cards) == 1:\n\t\t\treturn math.isclose(cards[0], 24)\n\t\tif len(path) == len(cards):\n\t\t\ta, b, *rest = path\n\t\t\tfor ops in a + b, a - b, a * b:\n\t\t\t\tvalid |= self.dfs_judge([], [ops] + rest, [False] * (len(path) - 1))\n\t\t\t\tif valid: return True\n\t\t\tif b:\n\t\t\t\tvalid |= self.dfs_judge([], [a / b] + rest, [False] * (len(path) - 1))\n\t\t\t\tif valid: return True\t\t\t\t\n\t\t\treturn valid\n\n\t\tfor idx in range(len(cards)):\n\t\t\tif used[idx]: continue\n\t\t\tused[idx] = True\n\t\t\tpath.append(cards[idx])\n\t\t\tvalid |= self.dfs_judge(path, cards, used)\n\t\t\tif valid: return True\n\t\t\tpath.pop()\n\t\t\tused[idx] = False\n\t\treturn valid\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);