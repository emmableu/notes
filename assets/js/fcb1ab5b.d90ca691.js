"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[877],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},37954:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>b,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Leetcode/Other/408.408 - Valid Word Abbreviation - Easy","title":"408.408 - Valid Word Abbreviation - Easy","description":"Description","source":"@site/docs/Leetcode/99.Other/408.408 - Valid Word Abbreviation - Easy.md","sourceDirName":"Leetcode/99.Other","slug":"/p/09cca7f3-d2ce-40f3-b2cc-0e1019ed8280","permalink":"/notes/docs/p/09cca7f3-d2ce-40f3-b2cc-0e1019ed8280","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/408.408 - Valid Word Abbreviation - Easy.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/09cca7f3-d2ce-40f3-b2cc-0e1019ed8280","slug":"/p/09cca7f3-d2ce-40f3-b2cc-0e1019ed8280"},"sidebar":"tutorialSidebar","previous":{"title":"406.406 - Queue Reconstruction by Height (Medium)","permalink":"/notes/docs/p/1e73610b-7c87-43a5-bcb8-548b56b4c36c"},"next":{"title":"415.415 - Add Strings - Easy","permalink":"/notes/docs/p/8dc5d47e-e8af-4c4f-b076-a45e0a5c3867"}}');var a=t(74848),r=t(28453);const s={created_at:"2025-10-23",page_link:"/p/09cca7f3-d2ce-40f3-b2cc-0e1019ed8280",slug:"/p/09cca7f3-d2ce-40f3-b2cc-0e1019ed8280"},o=void 0,c={},d=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:'A string can be abbreviated by replacing any number of non-adjacent substrings with their lengths. For example, a string such as "substitution" could be abbreviated as (but not limited to):'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'"s10n" ("s ubstitutio n")'}),"\n",(0,a.jsx)(n.li,{children:'"sub4u4" ("sub stit u tion")'}),"\n",(0,a.jsx)(n.li,{children:'"12" ("substitution")'}),"\n",(0,a.jsx)(n.li,{children:'"su3i1u2on" ("su bst i t u ti on")'}),"\n",(0,a.jsx)(n.li,{children:'"substitution" (no substrings replaced)'}),"\n",(0,a.jsx)(n.li,{children:'"s010n" (leading zeros in numbers are allowed)\nNote that "s55n" ("s ubsti tutio n") is not a valid abbreviation of "substitution" because the replaced substrings are adjacent.'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Given a string word and an abbreviation abbr, return whether the string matches with the given abbreviation."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'Example 1:\nInput: word = "internationalization", abbr = "i12iz4n"\nOutput: true\nExplanation: The word "internationalization" can be abbreviated as "i12iz4n" ("i nternational iz atio n").\n\nExample 2:\nInput: word = "apple", abbr = "a2e"\nOutput: false\nExplanation: The word "apple" cannot be abbreviated as "a2e".\n'})}),"\n",(0,a.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def validWordAbbreviation(self, word, abbr):\n        i, j = 0, 0 # i for abbr, j for word\n        while i < len(abbr) and j < len(word):\n            c, d = abbr[i], word[j]\n            i += 1\n            j += 1\n            if c.isalpha():\n                if d != c:\n                    return False\n            elif c == "0":\n                return False\n            else: # c is 1-9 here\n                while i < len(abbr) and abbr[i].isdigit():\n                    c += abbr[i]\n                    i += 1\n                j += int(c) - 1  #\u56e0\u4e3a\u524d\u9762\u5df2\u7ecf\u52a0\u8fc71\u4e86\uff0c\n                # \u6240\u4ee5\u8fd9\u91ccj += int(c) - 1 \n        return i == len(abbr) and j == len(word)\n'})})]})}function b(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);