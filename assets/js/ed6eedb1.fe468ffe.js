"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2663],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},65607:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Leetcode/Other/162.162 - Find Peak Element - Medium","title":"162.162 - Find Peak Element - Medium","description":"Description","source":"@site/docs/Leetcode/99.Other/162.162 - Find Peak Element - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/9ee00a76-ac60-4cd2-8570-76ff302f0b21","permalink":"/notes/docs/p/9ee00a76-ac60-4cd2-8570-76ff302f0b21","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/162.162 - Find Peak Element - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/9ee00a76-ac60-4cd2-8570-76ff302f0b21","slug":"/p/9ee00a76-ac60-4cd2-8570-76ff302f0b21"},"sidebar":"tutorialSidebar","previous":{"title":"1614.1614 - Maximum Nesting Depth of the Parentheses (Easy)","permalink":"/notes/docs/p/44209d4c-2d4a-4590-9de8-eb4f99f7e1a1"},"next":{"title":"163.163 - Missing Ranges (Easy)","permalink":"/notes/docs/p/43ce7a18-e5fc-4337-847c-18317e126fe8"}}');var s=t(74848),a=t(28453);const r={created_at:"2025-10-23",page_link:"/p/9ee00a76-ac60-4cd2-8570-76ff302f0b21",slug:"/p/9ee00a76-ac60-4cd2-8570-76ff302f0b21"},o=void 0,d={},l=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution",id:"solution",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"A peak element is an element that is strictly greater than its neighbors."}),"\n",(0,s.jsx)(n.p,{children:"Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks."}),"\n",(0,s.jsx)(n.p,{children:"You may imagine that nums[-1] = nums[n] = -\u221e."}),"\n",(0,s.jsx)(n.p,{children:"You must write an algorithm that runs in O(log n) time."}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Example 1:\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n\nExample 2:\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def findPeakElement(self, nums):\n        if not nums:\n            return -1\n\n        l, r = 0, len(nums) - 1\n        while l + 1 < r:\n            mid = (l + r) >> 1\n            if nums[mid] < nums[mid - 1]:\n                r = mid\n            elif nums[mid] < nums[mid + 1]:\n                l = mid\n            else:\n                return mid\n        # when peak is at index 0, l is the peak index, \n        # when peak is at index len(nums)-1, r is the peak index\n        mid = l if nums[l] > nums[r] else r\n        return mid\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);