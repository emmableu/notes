"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[5207],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(96540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},41786:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>x,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Leetcode/Other/393.393 - UTF-8 Validation - Medium","title":"393.393 - UTF-8 Validation - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/393.393 - UTF-8 Validation - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/d357fd86-d0c2-46d4-ba0b-6a42929b6d1b","permalink":"/notes/docs/p/d357fd86-d0c2-46d4-ba0b-6a42929b6d1b","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/393.393 - UTF-8 Validation - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/d357fd86-d0c2-46d4-ba0b-6a42929b6d1b","slug":"/p/d357fd86-d0c2-46d4-ba0b-6a42929b6d1b"},"sidebar":"tutorialSidebar","previous":{"title":"39.39 - Combination Sum - Medium","permalink":"/notes/docs/p/b2352c75-7e5b-4819-a4a0-400dcdc6de16"},"next":{"title":"398.398 - Random Pick Index - Medium","permalink":"/notes/docs/p/4afb6e61-3869-4b38-990a-cd715e8d11a7"}}');var a=t(74848),o=t(28453);const s={created_at:"2025-10-23",page_link:"/p/d357fd86-d0c2-46d4-ba0b-6a42929b6d1b",slug:"/p/d357fd86-d0c2-46d4-ba0b-6a42929b6d1b"},r=void 0,d={},l=[{value:"Description",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"Solution\uff1aDFA (Deterministic Finite Automaton)",id:"solutiondfa-deterministic-finite-automaton",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/utf-8-validation/",children:"LC link"}),"\n",(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/utf-8-validation/discuss/400575/case",children:"\u9898\u610f\u89e3\u91ca"}),"\n",(0,a.jsx)(n.a,{href:"https://leetcode-cn.com/problems/utf-8-validation/solution/java-dfa-by-zdxiq125/",children:"explanation"})]}),"\n",(0,a.jsxs)(n.p,{children:["\u7c7b\u4f3c\u9898: ",(0,a.jsx)(n.a,{href:"https://emmableu.github.io/blog/pages/a434d7/",children:"String to Integer"})]}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)(n.p,{children:"Given an integer array data representing the data, return whether it is a valid UTF-8 encoding."}),"\n",(0,a.jsx)(n.p,{children:"A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"For a 1-byte character, the first bit is a 0, followed by its Unicode code."}),"\n",(0,a.jsx)(n.li,{children:"For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\nThis is how the UTF-8 encoding would work:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\n   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data."}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Example 1:\nInput: data = [197,130,1]\nOutput: true\nExplanation: data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n\nExample 2:\nInput: data = [235,140,4]\nOutput: false\nExplanation: data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n"})}),"\n",(0,a.jsx)(n.h2,{id:"solutiondfa-deterministic-finite-automaton",children:"Solution\uff1aDFA (Deterministic Finite Automaton)"}),"\n",(0,a.jsxs)(n.p,{children:["Note: 1 byte == 8 bit\n",(0,a.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/393-2.png",alt:""})]}),"\n",(0,a.jsx)(n.p,{children:"\u6839\u636e\u56fe\u753b\u8868 table\uff0crow\u8868\u793astates(0-6, invalid),column\u8868\u793a\u9047\u5230\u7684utf-8 Octet(8\u5b57\u8282),"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["0 \u8868\u793astart\uff0c",(0,a.jsx)(n.code,{children:"None"}),"\u8868\u793ainvalid\u7684\u72b6\u6001, \u9047\u5230none\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\uff0c \u89c1\u4e0b\u9762\u4ee3\u7801\u91cc\u7684self.table"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"\u6700\u540e\uff1a\u6ce8\u610f\uff0c\u53ea\u6709state\u8fd4\u56de\u503c==0\u624d\u8bf4\u660e\u8fd9\u4e2autf-8\u662fvalid"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Automaton:\n    def __init__(self):\n        self.state = 0\n        self.table = {\n                #   0xxxxxxx 10xxxxxx 110xxxxx 1110xxxx 11110xxx other\n                0: [0,       None,    1,       2,       3,       None],\n                1: [None,    0,       None,    None,    None,    None],\n                2: [None,    4,       None,    None,    None,    None],\n                3: [None,    5,       None,    None,    None,    None],\n                4: [None,    0,       None,    None,    None,    None],\n                5: [None,    6,       None,    None,    None,    None],\n                6: [None,    0,       None,    None,    None,    None]\n        }\n    \n    def get_col(self, num):\n        # \u901a\u8fc7num\u7684\u7c7b\u578b\uff0c\u5f97\u5230\u4ed6\u4eec\u5bf9\u5e94\u5728table\u4e0a\u7b2c\u51e0\u4e2acolumn\n        if num >> 7 == 0: return 0\n        if num >> 6 == 0b10: return 1\n        if num >> 5 == 0b110: return 2\n        if num >> 4 == 0b1110: return 3\n        if num >> 3 == 0b11110: return 4\n        return 5\n        \n    def get(self, num):\n        self.state = self.table[self.state][self.get_col(num)]\n        return self.state\n        \nclass Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        automaton = Automaton()\n        state = 0\n        for c in data:\n            state = automaton.get(c)\n            if state == None: return False  #\u5982\u679c\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5c31\u53ef\u4ee5\u63d0\u524d\u8fd4\u56de\n        return state == 0\n"})})]})}function x(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);