"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6562],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(96540);const d={},s=i.createContext(d);function t(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),i.createElement(s.Provider,{value:n},e.children)}},44999:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Leetcode/DFS/695.695 - Max Area of Island - Medium","title":"695.695 - Max Area of Island - Medium","description":"Description:","source":"@site/docs/Leetcode/04.DFS/695.695 - Max Area of Island - Medium.md","sourceDirName":"Leetcode/04.DFS","slug":"/p/a0665f65-c5ab-4d73-bbcd-ff88c10f6e0b","permalink":"/notes/docs/p/a0665f65-c5ab-4d73-bbcd-ff88c10f6e0b","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/04.DFS/695.695 - Max Area of Island - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/a0665f65-c5ab-4d73-bbcd-ff88c10f6e0b","slug":"/p/a0665f65-c5ab-4d73-bbcd-ff88c10f6e0b"},"sidebar":"tutorialSidebar","previous":{"title":"694.694 - Number of Distinct Islands (Medium)","permalink":"/notes/docs/p/348511ca-d31d-42cd-94e3-24ff7b9f55ac"},"next":{"title":"721.721 - Accounts Merge - Medium","permalink":"/notes/docs/p/f33b9608-98f7-4eee-a720-0743c231be86"}}');var d=r(74848),s=r(28453);const t={created_at:"2025-10-23",page_link:"/p/a0665f65-c5ab-4d73-bbcd-ff88c10f6e0b",slug:"/p/a0665f65-c5ab-4d73-bbcd-ff88c10f6e0b"},a=void 0,c={},l=[{value:"Description:",id:"description",level:2},{value:"Examples",id:"examples",level:2},{value:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248:",id:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248",level:2},{value:"Solution: DFS",id:"solution-dfs",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"description",children:"Description:"}),"\n",(0,d.jsx)(n.p,{children:"You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water."}),"\n",(0,d.jsx)(n.p,{children:"The area of an island is the number of cells with a value 1 in the island."}),"\n",(0,d.jsx)(n.p,{children:"Return the maximum area of an island in grid. If there is no island, return 0."}),"\n",(0,d.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"Example 1:\nInput: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directionally.\n\n\nExample 2:\nInput: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0\n"})}),"\n",(0,d.jsx)(n.h2,{id:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248",children:"\u5c9b\u5c7f\u95ee\u9898dfs\u6a21\u7248:"}),"\n",(0,d.jsxs)(n.p,{children:["\u53c2\u8003\uff08",(0,d.jsx)(n.a,{href:"https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/%EF%BC%89",children:"https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/\uff09"})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'class Solution:\n    def func(self, grid: List[List[str]]) -> int:\n        # \u9898\u76ee\u8981\u6c42\u7684function\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == "1":\n                    # \u9898\u76ee\u8981\u6c42\u7684\u4e1c\u897f\n                    self.dfs(grid, r, c)\n        return #\u9898\u76ee\u8981\u6c42\u7684function\n        \n    def dfs(self, grid, r, c):\n        # base case\uff1a\u5982\u679c\u5750\u6807\u8d85\u51fa\u7f51\u683c\uff0c\u76f4\u63a5\u8fd4\u56de\n        if not self.in_area(grid, r, c):\n            return\n        if grid[r][c] != "1":\n            return \n        grid[r][c] = "2" #\u6807\u8bb0\u4ee5\u9632\u6b62\u91cd\u590dvisit\n        self.dfs(grid, r-1, c)\n        self.dfs(grid, r+1, c)\n        self.dfs(grid, r, c-1)\n        self.dfs(grid, r, c+1)\n        \n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n'})}),"\n",(0,d.jsx)(n.h2,{id:"solution-dfs",children:"Solution: DFS"}),"\n",(0,d.jsxs)(n.p,{children:["\u91cd\u70b9\uff1a\u5728 dfs\u4e2d ",(0,d.jsx)(n.code,{children:"return 1 + lt + rt + up + lo"})," \u6765\u8ba1\u7b97\u9762\u79ef"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        max_area = 0\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 1:\n                    max_area = max(max_area, self.dfs(grid, r, c))\n        return max_area\n        \n        \n    def dfs(self, grid, r, c):\n        if not self.in_area(grid, r, c):\n            return 0\n        if grid[r][c] != 1:\n            return 0\n        grid[r][c] = 2\n        lt = self.dfs(grid, r-1, c)\n        rt = self.dfs(grid, r+1, c)\n        up = self.dfs(grid, r, c-1)\n        lo = self.dfs(grid, r, c+1)\n        return 1 + lt + rt + up + lo\n\n\n    def in_area(self, grid, r, c):\n        return r >= 0 and r < len(grid) and c >= 0 and c < len(grid[0])\n"})})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}}}]);