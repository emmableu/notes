"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2768],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var d=t(96540);const a={},i=d.createContext(a);function s(e){const n=d.useContext(i);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),d.createElement(i.Provider,{value:n},e.children)}},92923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>m});const d=JSON.parse('{"id":"Leetcode/Other/1102.1102 - Path With Maximum Minimum Value - Medium","title":"1102.1102 - Path With Maximum Minimum Value - Medium","description":"LC link","source":"@site/docs/Leetcode/99.Other/1102.1102 - Path With Maximum Minimum Value - Medium.md","sourceDirName":"Leetcode/99.Other","slug":"/p/f257aeda-dd22-4db8-bf1d-5d541d818d7a","permalink":"/notes/docs/p/f257aeda-dd22-4db8-bf1d-5d541d818d7a","draft":false,"unlisted":false,"editUrl":"https://github.com/emmableu/notes/edit/main/docs/Leetcode/99.Other/1102.1102 - Path With Maximum Minimum Value - Medium.md","tags":[],"version":"current","frontMatter":{"created_at":"2025-10-23","page_link":"/p/f257aeda-dd22-4db8-bf1d-5d541d818d7a","slug":"/p/f257aeda-dd22-4db8-bf1d-5d541d818d7a"},"sidebar":"tutorialSidebar","previous":{"title":"110.110 - Balanced Binary Tree - Easy","permalink":"/notes/docs/p/8ed98e67-783d-4f12-8b7b-b6b88dd4bf9c"},"next":{"title":"112.112 - Path Sum (Easy)","permalink":"/notes/docs/p/45b18a45-2f8e-49f8-b0f2-3519eb890e83"}}');var a=t(74848),i=t(28453);const s={created_at:"2025-10-23",page_link:"/p/f257aeda-dd22-4db8-bf1d-5d541d818d7a",slug:"/p/f257aeda-dd22-4db8-bf1d-5d541d818d7a"},r=void 0,o={},m=[];function c(e){const n={a:"a",code:"code",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://leetcode.cn/problems/path-with-maximum-minimum-value/",children:"LC link"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208170941213.png",alt:""}),"\n",(0,a.jsx)(n.img,{src:"https://raw.githubusercontent.com/emmableu/image/master/202208170942838.png",alt:""})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import heapq\nclass Solution:\n    def maximumMinimumPath(self, grid):\n        m, n = len(grid), len(grid[0])\n        # \u56e0\u4e3aheapq \u662f\u6700\u5c0f\u5806\uff0c\u4f46\u662f\u6211\u4eec\u8981\u53d6\u6700\u5927\u7684\uff0c\u6240\u4ee5\u8981\u53d6\u53cd\n        q = [(-grid[0][0], 0, 0)]\n        score = float("inf")\n        while q: \n            # \u6bcf\u6b21\u51fa\u6765\u5f53\u524dheap\u91cc\u9762\u503c\u6700\u5927\u7684\u4f4d\u7f6e\n            s, x, y = heapq.heappop(q)\n            score = min(-s, score)\n            # \u8ba1\u7b97\u5e76\u8fd4\u56de\u5f53\u524d\u7684score\n            grid[x][y] = -1 # \u6807\u8bb0\u6210visited\n            if x == m-1 and y == n-1:\n                return score\n            for i, j in (x-1, y), (x + 1, y), (x, y - 1), (x, y + 1):\n                # \u5982\u679c\u5728\u754c\u5185\u4e14\u6ca1\u6709visited\n                if 0 <= i < m and 0 <= j < n and grid[i][j] >= 0:\n                    heapq.heappush(q, (-grid[i][j], i, j))\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);